{"mappings":"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","sources":["<anon>","src/browser/main.ts","src/ui/components/file-manager.ts","src/ui/components/notification.ts","src/core/validator.ts","src/ui/components/result-viewer.ts","src/core/file-processor.ts","src/core/common/parsers.ts","src/core/common/constants.ts","src/core/common/evaluator.ts","src/core/common/utils.ts"],"sourcesContent":["(() => {\n/**\r\n * 短期滞在手術等基本料３判定プログラム - メインアプリケーション\r\n *\r\n * このファイルは、アプリケーションのエントリーポイントです。\r\n * 各コンポーネントの初期化と連携を行います。\r\n */ // トースト通知型\nclass $c338b0f983d437f5$export$e71c7404ebdda22e {\n    /**\r\n   * 通知システムのコンストラクタ\r\n   * @param containerId 通知コンテナのID\r\n   */ constructor(containerId = 'toastContainer'){\n        this.activeToasts = [];\n        this.toastHistory = [];\n        this.MAX_VISIBLE_TOASTS = 3;\n        this.MAX_HISTORY_ITEMS = 10;\n        /**\r\n   * 履歴モーダルのESCキーハンドラ\r\n   */ this.handleHistoryEscKey = (e)=>{\n            if (e.key === 'Escape') this.closeNotificationHistory();\n        };\n        this.toastContainer = document.getElementById(containerId) || this.createToastContainer(containerId);\n        this.setupHistoryButton();\n    }\n    /**\r\n   * トースト通知コンテナを作成\r\n   * @param containerId コンテナID\r\n   * @returns 作成されたコンテナ要素\r\n   */ createToastContainer(containerId) {\n        const container = document.createElement('div');\n        container.id = containerId;\n        container.className = 'toast-container';\n        document.body.appendChild(container);\n        return container;\n    }\n    /**\r\n   * 履歴ボタンの初期設定\r\n   */ setupHistoryButton() {\n        let historyButton = document.getElementById('notificationHistoryButton');\n        if (!historyButton) {\n            historyButton = document.createElement('button');\n            historyButton.id = 'notificationHistoryButton';\n            historyButton.className = 'notification-history-button hidden';\n            historyButton.setAttribute('aria-label', \"\\u901A\\u77E5\\u5C65\\u6B74\\u3092\\u8868\\u793A\");\n            historyButton.innerHTML = '<span class=\"history-icon\">\\uD83D\\uDD14</span>';\n            document.body.appendChild(historyButton);\n            historyButton.addEventListener('click', ()=>this.showNotificationHistory());\n        }\n    }\n    /**\r\n   * トースト通知を表示\r\n   * @param type 通知タイプ（success, warning, error, info）\r\n   * @param title 通知タイトル\r\n   * @param message 通知メッセージ\r\n   * @param duration 表示時間（ミリ秒）\r\n   * @param priority 優先度（1-5、5が最高）\r\n   */ showToast(type, title, message, duration = 5000, priority = 3) {\n        // 通知オブジェクトを作成\n        const timestamp = Date.now();\n        const toastId = 'toast-' + timestamp;\n        const toastData = {\n            id: toastId,\n            type: type,\n            title: title,\n            message: message,\n            timestamp: timestamp,\n            priority: priority,\n            duration: duration\n        };\n        // 通知履歴に追加\n        this.addToastToHistory(toastData);\n        // 通知を表示キューに追加\n        this.activeToasts.push(toastData);\n        // 優先度順にソート（優先度が高く、新しいものが上位）\n        this.activeToasts.sort((a, b)=>{\n            if (a.priority !== b.priority) return b.priority - a.priority;\n            return b.timestamp - a.timestamp;\n        });\n        // 表示数を制限し、アクティブリストを更新\n        this.manageActiveToasts();\n        // このトーストが表示対象として残っている場合のみレンダリング\n        if (this.activeToasts.some((toast)=>toast.id === toastId)) this.renderToast(toastData);\n    }\n    /**\r\n   * 通知履歴に追加\r\n   * @param toastData 通知データ\r\n   */ addToastToHistory(toastData) {\n        // 履歴に追加\n        this.toastHistory.unshift({\n            type: toastData.type,\n            title: toastData.title,\n            message: toastData.message,\n            timestamp: toastData.timestamp\n        });\n        // 履歴の最大数を制限\n        if (this.toastHistory.length > this.MAX_HISTORY_ITEMS) this.toastHistory = this.toastHistory.slice(0, this.MAX_HISTORY_ITEMS);\n        // 履歴ボタンを更新\n        this.updateHistoryButton();\n    }\n    /**\r\n   * 履歴ボタンを更新\r\n   */ updateHistoryButton() {\n        const historyButton = document.getElementById('notificationHistoryButton');\n        if (historyButton && this.toastHistory.length > 0) {\n            historyButton.classList.remove('hidden');\n            historyButton.setAttribute('data-count', this.toastHistory.length.toString());\n        }\n    }\n    /**\r\n   * アクティブな通知を管理（表示上限のみ）\r\n   */ manageActiveToasts() {\n        // 常に優先度と時間でソートしておく\n        this.activeToasts.sort((a, b)=>{\n            if (a.priority !== b.priority) return b.priority - a.priority; // 優先度高い順\n            return b.timestamp - a.timestamp; // 新しい順\n        });\n        // 表示上限を超えている場合\n        if (this.activeToasts.length > this.MAX_VISIBLE_TOASTS) {\n            // 表示されるトーストと隠れるトーストに分ける\n            const visibleToasts = this.activeToasts.slice(0, this.MAX_VISIBLE_TOASTS);\n            const hiddenToasts = this.activeToasts.slice(this.MAX_VISIBLE_TOASTS);\n            // 隠れるトーストの要素をDOMから削除\n            hiddenToasts.forEach((toast)=>{\n                if (toast.element) this.removeToastElement(toast.id);\n            });\n            // アクティブリストを表示されるものだけに更新\n            this.activeToasts = visibleToasts;\n        }\n    // 集約通知関連のロジックは削除\n    }\n    // 不要になった getHighestPriorityType メソッドを削除\n    // 不要になった showAggregateToast メソッドを削除\n    /**\r\n   * 通知履歴を表示\r\n   */ showNotificationHistory() {\n        // 既存の履歴モーダルを削除\n        const existingModal = document.getElementById('notificationHistoryModal');\n        if (existingModal) existingModal.parentNode?.removeChild(existingModal);\n        // 履歴モーダルを作成\n        const modal = document.createElement('div');\n        modal.id = 'notificationHistoryModal';\n        modal.className = 'notification-history-modal';\n        modal.setAttribute('role', 'dialog');\n        modal.setAttribute('aria-labelledby', 'notificationHistoryTitle');\n        modal.setAttribute('aria-modal', 'true');\n        // 履歴リストを作成\n        let historyItems = '';\n        this.toastHistory.forEach((item)=>{\n            if (item.timestamp) {\n                const date = new Date(item.timestamp);\n                const timeString = date.toLocaleTimeString();\n                historyItems += `\n          <div class=\"history-item history-item-${item.type}\">\n            <div class=\"history-item-time\">${timeString}</div>\n            <div class=\"history-item-content\">\n              <h4 class=\"history-item-title\">${item.title || ''}</h4>\n              <p class=\"history-item-message\">${item.message || ''}</p>\n            </div>\n          </div>\n        `;\n            }\n        });\n        // モーダルの内容を設定\n        modal.innerHTML = `\n      <div class=\"notification-history-content\">\n        <div class=\"notification-history-header\">\n          <h3 id=\"notificationHistoryTitle\">\\u{901A}\\u{77E5}\\u{5C65}\\u{6B74}</h3>\n          <button class=\"notification-history-close\" aria-label=\"\\u{5C65}\\u{6B74}\\u{3092}\\u{9589}\\u{3058}\\u{308B}\">\\xd7</button>\n        </div>\n        <div class=\"notification-history-list\">\n          ${historyItems.length ? historyItems : '<p class=\"no-history\">\\u901A\\u77E5\\u5C65\\u6B74\\u306F\\u3042\\u308A\\u307E\\u305B\\u3093</p>'}\n        </div>\n        <div class=\"notification-history-footer\">\n          <button class=\"secondary-button notification-history-clear\">\\u{5C65}\\u{6B74}\\u{3092}\\u{30AF}\\u{30EA}\\u{30A2}</button>\n          <button class=\"primary-button notification-history-close-btn\">\\u{9589}\\u{3058}\\u{308B}</button>\n        </div>\n      </div>\n    `;\n        // モーダルをページに追加\n        document.body.appendChild(modal);\n        // モーダルを表示（アニメーション用）\n        setTimeout(()=>{\n            modal.classList.add('active');\n        }, 10);\n        // 閉じるボタンのイベントリスナーを設定\n        const closeButtons = modal.querySelectorAll('.notification-history-close, .notification-history-close-btn');\n        closeButtons.forEach((button)=>{\n            button.addEventListener('click', ()=>{\n                this.closeNotificationHistory();\n            });\n        });\n        // クリアボタンのイベントリスナーを設定\n        const clearButton = modal.querySelector('.notification-history-clear');\n        clearButton?.addEventListener('click', ()=>{\n            this.clearNotificationHistory();\n            this.closeNotificationHistory();\n        });\n        // モーダル外クリックで閉じる\n        modal.addEventListener('click', (e)=>{\n            if (e.target === modal) this.closeNotificationHistory();\n        });\n        // ESCキーで閉じる\n        document.addEventListener('keydown', this.handleHistoryEscKey);\n    }\n    /**\r\n   * 通知履歴モーダルを閉じる\r\n   */ closeNotificationHistory() {\n        const modal = document.getElementById('notificationHistoryModal');\n        if (modal) {\n            modal.classList.remove('active');\n            setTimeout(()=>{\n                if (modal.parentNode) modal.parentNode.removeChild(modal);\n            }, 300);\n        }\n        // ESCキーイベントリスナーを削除\n        document.removeEventListener('keydown', this.handleHistoryEscKey);\n    }\n    /**\r\n   * 通知履歴をクリア\r\n   */ clearNotificationHistory() {\n        this.toastHistory = [];\n        this.updateHistoryButton();\n    }\n    /**\r\n   * トースト通知を描画\r\n   * @param toastData 通知データ\r\n   */ renderToast(toastData) {\n        // トーストのHTML構造を作成\n        const toast = document.createElement('div');\n        toast.id = toastData.id;\n        toast.className = `toast toast-${toastData.type}`;\n        toast.setAttribute('role', 'alert');\n        toast.setAttribute('aria-live', 'assertive');\n        // アイコンを設定\n        let icon = '';\n        switch(toastData.type){\n            case 'success':\n                icon = \"\\u2705\";\n                break;\n            case 'warning':\n                icon = \"\\u26A0\\uFE0F\";\n                break;\n            case 'error':\n                icon = \"\\u274C\";\n                break;\n            case 'info':\n                icon = \"\\u2139\\uFE0F\";\n                break;\n        }\n        // トーストの内容を設定\n        toast.innerHTML = `\n      <div class=\"toast-icon\">${icon}</div>\n      <div class=\"toast-content\">\n        <h3 class=\"toast-title\">${toastData.title}</h3>\n        <p class=\"toast-message\">${toastData.message}</p>\n      </div>\n      <button class=\"toast-close\" aria-label=\"\\u{901A}\\u{77E5}\\u{3092}\\u{9589}\\u{3058}\\u{308B}\">\\xd7</button>\n    `;\n        // トーストをコンテナに追加\n        this.toastContainer.appendChild(toast);\n        // 要素への参照を保存\n        toastData.element = toast;\n        // 閉じるボタンのイベントリスナーを設定\n        const closeButton = toast.querySelector('.toast-close');\n        closeButton?.addEventListener('click', ()=>{\n            this.removeToast(toastData.id);\n        });\n        // 一定時間後に自動的に閉じる\n        if (toastData.duration > 0) setTimeout(()=>{\n            this.removeToast(toastData.id);\n        }, toastData.duration);\n    }\n    /**\r\n   * トースト通知を削除\r\n   * @param toastId 削除するトーストのID\r\n   */ removeToast(toastId) {\n        // アクティブリストから削除\n        this.activeToasts = this.activeToasts.filter((toast)=>toast.id !== toastId);\n        // 要素を削除\n        this.removeToastElement(toastId);\n    }\n    /**\r\n   * トースト要素を削除\r\n   * @param toastId 削除するトースト要素のID\r\n   */ removeToastElement(toastId) {\n        const toast = document.getElementById(toastId);\n        if (toast) {\n            // フェードアウトのためのスタイルを適用\n            toast.style.opacity = '0';\n            toast.style.transform = 'translateX(100%)';\n            // アニメーション完了後に要素を削除\n            setTimeout(()=>{\n                if (toast.parentNode) toast.parentNode.removeChild(toast);\n            }, 300);\n        }\n    }\n    /**\r\n   * エラー回復のための通知を表示\r\n   * @param action 回復アクション情報\r\n   */ showRecoveryToast(action) {\n        const recoveryToastId = 'toast-recovery-' + Date.now();\n        const toast = document.createElement('div');\n        toast.id = recoveryToastId;\n        toast.className = 'toast toast-info';\n        toast.setAttribute('role', 'alert');\n        toast.setAttribute('aria-live', 'assertive');\n        toast.innerHTML = `\n      <div class=\"toast-icon\">\\u{1F504}</div>\n      <div class=\"toast-content\">\n        <h3 class=\"toast-title\">\\u{56DE}\\u{5FA9}\\u{30A2}\\u{30AF}\\u{30B7}\\u{30E7}\\u{30F3}</h3>\n        <p class=\"toast-message\">${action.message}</p>\n      </div>\n      <button class=\"toast-action\" aria-label=\"${action.label}\">${action.label}</button>\n      <button class=\"toast-close\" aria-label=\"\\u{901A}\\u{77E5}\\u{3092}\\u{9589}\\u{3058}\\u{308B}\">\\xd7</button>\n    `;\n        this.toastContainer.appendChild(toast);\n        // アクションボタンのイベントリスナーを設定\n        const actionButton = toast.querySelector('.toast-action');\n        actionButton?.addEventListener('click', ()=>{\n            action.handler();\n            this.removeToastElement(recoveryToastId);\n        });\n        // 閉じるボタンのイベントリスナーを設定\n        const closeButton = toast.querySelector('.toast-close');\n        closeButton?.addEventListener('click', ()=>{\n            this.removeToastElement(recoveryToastId);\n        });\n        // 一定時間後に自動的に閉じる\n        setTimeout(()=>{\n            this.removeToastElement(recoveryToastId);\n        }, 15000); // 回復アクションは長めに表示\n    }\n}\nconst $c338b0f983d437f5$export$6af13b7de7554010 = new $c338b0f983d437f5$export$e71c7404ebdda22e();\n\n\nasync function $7a1670790cbbe4b0$export$34b1c1ed5dd6d491(files) {\n    if (!files || files.length === 0) throw new Error(\"\\u30D5\\u30A1\\u30A4\\u30EB\\u304C\\u9078\\u629E\\u3055\\u308C\\u3066\\u3044\\u307E\\u305B\\u3093\");\n    // 検証結果の配列\n    const validationResults = [];\n    // 各ファイルを検証\n    for (const file of files)try {\n        const content = await $7a1670790cbbe4b0$export$7dc2912951b09f(file);\n        const result = $7a1670790cbbe4b0$export$99273a4de8ff332c(file, content);\n        validationResults.push(result);\n    } catch  {\n        // ファイル読み込みエラーの場合\n        validationResults.push({\n            file: file,\n            isValid: false,\n            warnings: [],\n            errors: [\n                \"\\u4E0D\\u660E\\u306A\\u30A8\\u30E9\\u30FC\\u304C\\u767A\\u751F\\u3057\\u307E\\u3057\\u305F\"\n            ]\n        });\n    }\n    return validationResults;\n}\nfunction $7a1670790cbbe4b0$export$7dc2912951b09f(file) {\n    // テキストファイルでない場合はエラー\n    if (!file.type.includes('text') && !file.name.endsWith('.txt')) return Promise.reject(new Error('Read error: Invalid file format'));\n    return new Promise((resolve, reject)=>{\n        const reader = new FileReader();\n        reader.onload = (event)=>{\n            if (typeof event.target?.result === 'string') resolve(event.target.result);\n            else reject(new Error('Read error: Invalid file format'));\n        };\n        reader.onerror = ()=>{\n            reject(new Error('Read error: File read failed'));\n        };\n        try {\n            reader.readAsText(file);\n        } catch  {\n            reject(new Error('Read error: Cannot start reading file'));\n        }\n    });\n}\nfunction $7a1670790cbbe4b0$export$99273a4de8ff332c(file, content) {\n    // 検証結果オブジェクトの初期化\n    const result = {\n        file: file,\n        isValid: true,\n        warnings: [],\n        errors: []\n    };\n    // 基本チェック（空ファイル、最低行数）\n    if (!$7a1670790cbbe4b0$var$validateBasicContent(content, result)) return result; // 基本チェックに失敗した場合は以降のチェック不要\n    // 行に分割 (CRLFとLFの両方に対応)\n    const lines = content.split(/\\r?\\n/);\n    // ヘッダー行のチェック\n    $7a1670790cbbe4b0$var$validateHeaderLine(lines[0], result);\n    // データ行のチェック（最初の5行まで）\n    $7a1670790cbbe4b0$var$validateDataLines(lines, result);\n    return result;\n}\n/**\r\n * ファイルの基本的な内容をチェックする\r\n * @param content ファイルの内容\r\n * @param result 検証結果オブジェクト\r\n * @returns 基本チェックに成功したかどうか\r\n */ function $7a1670790cbbe4b0$var$validateBasicContent(content, result) {\n    // 1. ファイル全体が空でないかチェック\n    if (!content.trim()) {\n        result.isValid = false;\n        result.errors.push(\"\\u30D5\\u30A1\\u30A4\\u30EB\\u304C\\u7A7A\\u3067\\u3059\");\n        return false; // 空の場合は以降のチェック不要\n    }\n    // 2. 最低行数チェック (ヘッダー行 + データ行1行以上)\n    const lines = content.split(/\\r?\\n/);\n    if (lines.filter((line)=>line.trim()).length < 2) {\n        result.isValid = false;\n        result.errors.push(\"\\u30D5\\u30A1\\u30A4\\u30EB\\u304C\\u7A7A\\u304B\\u3001\\u30D8\\u30C3\\u30C0\\u30FC\\u884C\\u307E\\u305F\\u306F\\u30C7\\u30FC\\u30BF\\u884C\\u304C\\u4E0D\\u8DB3\\u3057\\u3066\\u3044\\u307E\\u3059\");\n        return false; // 行数が足りない場合は以降のチェック不要\n    }\n    return true;\n}\n/**\r\n * ヘッダー行を検証する\r\n * @param headerLine ヘッダー行の内容\r\n * @param result 検証結果オブジェクト\r\n */ function $7a1670790cbbe4b0$var$validateHeaderLine(headerLine, result) {\n    const trimmedHeader = headerLine.trim();\n    if (!trimmedHeader) // ヘッダー行が空の場合 (通常はありえないが念のため)\n    result.warnings.push(\"\\u30D8\\u30C3\\u30C0\\u30FC\\u884C\\u304C\\u7A7A\\u306E\\u3088\\u3046\\u3067\\u3059\");\n    else if (!trimmedHeader.includes('\\t')) // ヘッダー行にタブが含まれていない場合 (タブ区切りでない可能性)\n    result.warnings.push(\"\\u30D8\\u30C3\\u30C0\\u30FC\\u884C\\u306B\\u30BF\\u30D6\\u533A\\u5207\\u308A\\u304C\\u898B\\u3089\\u308C\\u307E\\u305B\\u3093\");\n}\n/**\r\n * データ行を検証する\r\n * @param lines ファイルの全行\r\n * @param result 検証結果オブジェクト\r\n */ function $7a1670790cbbe4b0$var$validateDataLines(lines, result) {\n    const sampleSize = Math.min(5, lines.length - 1); // チェックするデータ行数 (最大5行)\n    let tabWarningIssued = false; // タブ区切り警告発行済みフラグ\n    let columnCountWarningIssued = false; // 列数不足警告発行済みフラグ\n    let actionDetailNumWarningIssued = false; // 行為明細番号形式警告発行済みフラグ\n    // データ行のループ (インデックス 1 から開始)\n    for(let i = 1; i <= sampleSize; i++){\n        // lines[i] が存在しない場合 (ファイル末尾の空行など) はスキップ\n        if (lines[i] === undefined) continue;\n        const line = lines[i].trim();\n        // 空のデータ行はスキップ\n        if (!line) continue;\n        // 各行を検証し、発生した警告フラグを受け取る\n        const lineWarnings = $7a1670790cbbe4b0$var$validateDataLine(line, i, result);\n        // タブ区切り警告 (一度だけ追加)\n        if (lineWarnings.tabWarningIssued && !tabWarningIssued) {\n            result.warnings.push(`\\u{4E00}\\u{90E8}\\u{306E}\\u{30C7}\\u{30FC}\\u{30BF}\\u{884C}\\u{306B}\\u{30BF}\\u{30D6}\\u{533A}\\u{5207}\\u{308A}\\u{304C}\\u{898B}\\u{3089}\\u{308C}\\u{307E}\\u{305B}\\u{3093} (\\u{6700}\\u{521D}\\u{306E}\\u{4F8B}: \\u{884C} ${i + 1})`);\n            tabWarningIssued = true;\n        }\n        // 列数不足警告 (一度だけ追加)\n        if (lineWarnings.columnCountWarningIssued && !columnCountWarningIssued) {\n            // validateDateAndActionDetail で列数不足が検出された場合も考慮\n            const columns = line.split('\\t'); // 再度分割して実際の列数を取得\n            if (columns.length < 4) result.warnings.push(`\\u{4E00}\\u{90E8}\\u{306E}\\u{30C7}\\u{30FC}\\u{30BF}\\u{884C}\\u{3067}\\u{5165}\\u{9662}\\u{5E74}\\u{6708}\\u{65E5}(4\\u{5217}\\u{76EE})\\u{304C}\\u{78BA}\\u{8A8D}\\u{3067}\\u{304D}\\u{307E}\\u{305B}\\u{3093} (\\u{5217}\\u{6570}\\u{4E0D}\\u{8DB3}) (\\u{6700}\\u{521D}\\u{306E}\\u{4F8B}: \\u{884C} ${i + 1})`);\n            else if (columns.length < 7) result.warnings.push(`\\u{4E00}\\u{90E8}\\u{306E}\\u{30C7}\\u{30FC}\\u{30BF}\\u{884C}\\u{3067}\\u{884C}\\u{70BA}\\u{660E}\\u{7D30}\\u{756A}\\u{53F7}(7\\u{5217}\\u{76EE})\\u{304C}\\u{78BA}\\u{8A8D}\\u{3067}\\u{304D}\\u{307E}\\u{305B}\\u{3093} (\\u{5217}\\u{6570}\\u{4E0D}\\u{8DB3}) (\\u{6700}\\u{521D}\\u{306E}\\u{4F8B}: \\u{884C} ${i + 1})`);\n            else // 上記以外 (validateDataLine の columns.length < 10 で検出)\n            result.warnings.push(`\\u{4E00}\\u{90E8}\\u{306E}\\u{30C7}\\u{30FC}\\u{30BF}\\u{884C}\\u{306E}\\u{5217}\\u{6570}\\u{304C}\\u{5C11}\\u{306A}\\u{3044}\\u{3088}\\u{3046}\\u{3067}\\u{3059} (10\\u{5217}\\u{672A}\\u{6E80}) (\\u{6700}\\u{521D}\\u{306E}\\u{4F8B}: \\u{884C} ${i + 1}, \\u{5217}\\u{6570}: ${columns.length})`);\n            columnCountWarningIssued = true;\n        }\n        // 行為明細番号形式警告 (一度だけ追加)\n        if (lineWarnings.actionDetailNumWarningIssued && !actionDetailNumWarningIssued) {\n            const columns = line.split('\\t'); // 再度分割\n            const actionDetailNum = columns.length > 6 ? columns[6].trim() : '';\n            result.warnings.push(`\\u{884C}\\u{70BA}\\u{660E}\\u{7D30}\\u{756A}\\u{53F7}(7\\u{5217}\\u{76EE})\\u{306E}\\u{5F62}\\u{5F0F}\\u{304C}\\u{4E0D}\\u{6B63}\\u{306E}\\u{3088}\\u{3046}\\u{3067}\\u{3059} (000 or 3\\u{6841}\\u{6570}\\u{5B57}) (\\u{6700}\\u{521D}\\u{306E}\\u{4F8B}: \\u{884C} ${i + 1}, \\u{5024}: ${actionDetailNum})`);\n            actionDetailNumWarningIssued = true;\n        }\n    }\n}\n/**\r\n * 1行のデータを検証する\r\n * @param line 検証対象の行\r\n * @param lineIndex 行のインデックス（0起点）\r\n * @param result 検証結果オブジェクト\r\n * @returns 発生した警告フラグの状態\r\n */ function $7a1670790cbbe4b0$var$validateDataLine(line, lineIndex, result) {\n    let tabWarningIssued = false;\n    let columnCountWarningIssued = false;\n    let actionDetailNumWarningIssued = false;\n    // 5-1. タブ区切り形式チェック (警告)\n    if (!line.includes('\\t')) {\n        tabWarningIssued = true;\n        // タブがない場合、以降の列チェックは無意味なのでスキップ\n        return {\n            tabWarningIssued: tabWarningIssued,\n            columnCountWarningIssued: columnCountWarningIssued,\n            actionDetailNumWarningIssued: actionDetailNumWarningIssued\n        };\n    }\n    // タブで列に分割\n    const columns = line.split('\\t');\n    // 5-2. 列数チェック (警告) - 10列未満\n    if (columns.length < 10) {\n        columnCountWarningIssued = true;\n        // 列数が少ない場合、特定の列へのアクセスは危険なのでスキップ\n        // (ただし、他の行で十分な列数がある可能性もあるため、ループは継続)\n        // 警告メッセージは呼び出し元 (validateDataLines) で追加\n        return {\n            tabWarningIssued: tabWarningIssued,\n            columnCountWarningIssued: columnCountWarningIssued,\n            actionDetailNumWarningIssued: actionDetailNumWarningIssued\n        };\n    }\n    // 入院年月日と行為明細番号の検証\n    const dateActionResult = $7a1670790cbbe4b0$var$validateDateAndActionDetail(columns, lineIndex, result);\n    // validateDateAndActionDetail内で列数不足が判明する場合があるため、ここで更新\n    columnCountWarningIssued = dateActionResult.columnCountWarningIssued;\n    actionDetailNumWarningIssued = dateActionResult.actionDetailNumWarningIssued;\n    // 警告メッセージは呼び出し元 (validateDataLines) で追加\n    return {\n        tabWarningIssued: tabWarningIssued,\n        columnCountWarningIssued: columnCountWarningIssued,\n        actionDetailNumWarningIssued: actionDetailNumWarningIssued\n    };\n}\n/**\r\n * 入院年月日と行為明細番号を検証する\r\n * @param columns 行の列データ\r\n * @param lineIndex 行のインデックス（0起点）\r\n * @param result 検証結果オブジェクト\r\n * @returns 発生した警告フラグの状態 { columnCountWarningIssued, actionDetailNumWarningIssued }\r\n */ function $7a1670790cbbe4b0$var$validateDateAndActionDetail(columns, lineIndex, result) {\n    let columnCountWarningIssued = false;\n    let actionDetailNumWarningIssued = false;\n    // 5-3. 入院年月日 (列4, インデックス3) の形式チェック (エラー)\n    if (columns.length > 3) {\n        const admission = columns[3].trim(); // 4列目の値を取得\n        const dateRegex = /^(\\d{8}|00000000)$/; // yyyymmdd または 00000000\n        if (!dateRegex.test(admission)) {\n            result.isValid = false; // 不正な形式ならファイルを無効とする\n            // エラーメッセージは最初の一つだけ記録する\n            if (result.errors.length === 0 || !result.errors.some((e)=>e.startsWith(\"\\u5165\\u9662\\u5E74\\u6708\\u65E5\"))) result.errors.push(`\\u{5165}\\u{9662}\\u{5E74}\\u{6708}\\u{65E5}(4\\u{5217}\\u{76EE})\\u{306E}\\u{5F62}\\u{5F0F}\\u{304C}\\u{4E0D}\\u{6B63}\\u{3067}\\u{3059} (yyyymmdd or 00000000) (\\u{6700}\\u{521D}\\u{306E}\\u{4F8B}: \\u{884C} ${lineIndex + 1}, \\u{5024}: ${admission})`);\n        // エラーが見つかっても、他の警告を拾うためにループは継続\n        }\n    } else // 列数が足りない場合\n    columnCountWarningIssued = true; // 列数不足の警告フラグを立てる\n    // 5-4. 行為明細番号 (列7, インデックス6) の形式チェック (警告)\n    if (columns.length > 6) {\n        const actionDetailNum = columns[6].trim(); // 7列目の値を取得\n        const actionDetailRegex = /^(000|\\d{3})$/; // 000 または 3桁の数字\n        if (!actionDetailRegex.test(actionDetailNum)) actionDetailNumWarningIssued = true; // 警告フラグを立てる\n    } else if (!columnCountWarningIssued) // 列数が足りない場合 (入院年月日のチェックで既に立っている可能性もある)\n    columnCountWarningIssued = true; // 列数不足の警告フラグを立てる\n    // 警告メッセージの追加は呼び出し元 (validateDataLines) で行う\n    return {\n        columnCountWarningIssued: columnCountWarningIssued,\n        actionDetailNumWarningIssued: actionDetailNumWarningIssued\n    };\n}\n\n\nclass $e3e22f6c17ed805e$export$a5245c9b2355d1f8 {\n    /**\r\n   * ファイル管理クラスのコンストラクタ\r\n   */ constructor(){\n        this.selectedFiles = [];\n        this.validFiles = 0;\n        // DOM要素の取得\n        this.fileInput = document.getElementById('fileInput');\n        this.fileInfoArea = document.getElementById('fileInfoArea');\n        this.clearButton = document.getElementById('clearButton');\n        this.executeButton = document.getElementById('executeButton');\n        this.dropArea = document.getElementById('dropArea');\n        if (!this.fileInput || !this.fileInfoArea || !this.clearButton || !this.executeButton || !this.dropArea) throw new Error(\"\\u5FC5\\u8981\\u306ADOM\\u8981\\u7D20\\u304C\\u898B\\u3064\\u304B\\u308A\\u307E\\u305B\\u3093\");\n        this.setupEventListeners();\n    }\n    /**\r\n   * イベントリスナーのセットアップ\r\n   */ setupEventListeners() {\n        // ファイル選択ボタン\n        const fileSelectButton = document.getElementById('fileSelectButton');\n        if (fileSelectButton) fileSelectButton.addEventListener('click', (e)=>{\n            e.preventDefault();\n            e.stopPropagation();\n            this.fileInput.click();\n        });\n        // ファイル選択時の処理\n        this.fileInput.addEventListener('change', ()=>{\n            this.processNewFiles(Array.from(this.fileInput.files || []));\n        });\n        // ドラッグ&ドロップ処理\n        this.dropArea.addEventListener('dragover', (e)=>this.handleDragOver(e)); // Use public method\n        this.dropArea.addEventListener('dragleave', (e)=>this.handleDragLeave(e)); // Use public method\n        this.dropArea.addEventListener('drop', (e)=>this.handleDrop(e)); // Use public method\n        // キーボード操作のサポート\n        this.dropArea.addEventListener('keydown', (e)=>{\n            // Enterキーまたはスペースキーでファイル選択ダイアログを開く\n            if (e.key === 'Enter' || e.key === ' ') {\n                e.preventDefault();\n                this.fileInput.click();\n            }\n        });\n        // ドロップエリア全体をクリック可能に\n        this.dropArea.addEventListener('click', (e)=>{\n            // buttonの場合は、buttonのイベントに任せる\n            if (e.target.tagName !== 'BUTTON') this.fileInput.click();\n        });\n        // クリアボタンの処理\n        this.clearButton.addEventListener('click', ()=>{\n            this.clearFiles();\n        });\n    }\n    /**\r\n   * ドラッグオーバーイベントのハンドラ\r\n   * @param event ドラッグイベント\r\n   */ handleDragOver(event) {\n        // Changed to public\n        event.preventDefault(); // デフォルトの処理をキャンセル\n        this.dropArea.classList.add('drag-over');\n    }\n    /**\r\n   * ドラッグリーブイベントのハンドラ\r\n   * @param event ドラッグイベント\r\n   */ handleDragLeave(event) {\n        // Changed to public\n        event.preventDefault();\n        this.dropArea.classList.remove('drag-over');\n    }\n    /**\r\n   * ドロップイベントのハンドラ\r\n   * @param event ドラッグイベント\r\n   */ handleDrop(event) {\n        // Changed to public\n        event.preventDefault();\n        this.dropArea.classList.remove('drag-over');\n        if (event.dataTransfer && event.dataTransfer.files.length > 0) // ドロップされたファイルを処理\n        this.processNewFiles(Array.from(event.dataTransfer.files));\n    }\n    /**\r\n   * 新しく選択されたファイルを処理する\r\n   * @param files 処理対象のファイル配列\r\n   */ async processNewFiles(files) {\n        // async と Promise<void> を追加\n        // テキストファイルのみをフィルタリング\n        const textFiles = Array.from(files).filter((file)=>file.type === 'text/plain' || file.name.endsWith('.txt'));\n        // テキストファイル以外が含まれていた場合\n        if (textFiles.length < files.length) {\n            this.handleError(new Error(\"\\u30C6\\u30AD\\u30B9\\u30C8\\u30D5\\u30A1\\u30A4\\u30EB\\u4EE5\\u5916\\u304C\\u542B\\u307E\\u308C\\u3066\\u3044\\u307E\\u3059\"), 'file-format');\n            return;\n        }\n        // 既に追加されているファイルと重複するものを確認\n        const existingFileNames = Array.from(this.selectedFiles).map((f)=>f.name);\n        const newFiles = textFiles.filter((file)=>!existingFileNames.includes(file.name));\n        const duplicateCount = textFiles.length - newFiles.length;\n        // 新しいファイルを追加\n        newFiles.forEach((file)=>this.selectedFiles.push(file));\n        // ファイル情報を更新\n        this.updateFileInfo();\n        // 結果をユーザーに通知\n        if (newFiles.length === 0 && textFiles.length > 0) // Check if only duplicates were added\n        this.handleError(new Error(\"\\u3059\\u3079\\u3066\\u306E\\u30D5\\u30A1\\u30A4\\u30EB\\u304C\\u65E2\\u306B\\u8FFD\\u52A0\\u3055\\u308C\\u3066\\u3044\\u307E\\u3059\"), 'file-duplicate', {\n            recoveryAction: {\n                message: \"\\u65E2\\u5B58\\u306E\\u30D5\\u30A1\\u30A4\\u30EB\\u3092\\u30AF\\u30EA\\u30A2\\u3057\\u3066\\u65B0\\u3057\\u3044\\u30D5\\u30A1\\u30A4\\u30EB\\u3092\\u8FFD\\u52A0\\u3057\\u307E\\u3059\\u304B\\uFF1F\",\n                label: \"\\u30AF\\u30EA\\u30A2\\u3057\\u3066\\u8FFD\\u52A0\",\n                handler: ()=>{\n                    this.selectedFiles = [\n                        ...textFiles\n                    ]; // Keep only the newly added (duplicate) files after clearing\n                    this.updateFileInfo();\n                    (0, $c338b0f983d437f5$export$6af13b7de7554010).showToast('success', \"\\u30D5\\u30A1\\u30A4\\u30EB\\u66F4\\u65B0\\u5B8C\\u4E86\", `${textFiles.length}\\u{30D5}\\u{30A1}\\u{30A4}\\u{30EB}\\u{3092}\\u{8FFD}\\u{52A0}\\u{3057}\\u{307E}\\u{3057}\\u{305F}`);\n                    this.validateSelectedFiles(); // Re-validate after clearing and adding\n                }\n            }\n        });\n        else if (duplicateCount > 0) (0, $c338b0f983d437f5$export$6af13b7de7554010).showToast('warning', \"\\u30D5\\u30A1\\u30A4\\u30EB\\u91CD\\u8907\", `${newFiles.length}\\u{30D5}\\u{30A1}\\u{30A4}\\u{30EB}\\u{3092}\\u{8FFD}\\u{52A0}\\u{3057}\\u{307E}\\u{3057}\\u{305F} (${duplicateCount}\\u{30D5}\\u{30A1}\\u{30A4}\\u{30EB}\\u{306F}\\u{91CD}\\u{8907})`, 5000, 3);\n        else if (newFiles.length > 0) // Only show success if new files were actually added\n        (0, $c338b0f983d437f5$export$6af13b7de7554010).showToast('success', \"\\u30D5\\u30A1\\u30A4\\u30EB\\u8FFD\\u52A0\\u5B8C\\u4E86\", `${newFiles.length}\\u{30D5}\\u{30A1}\\u{30A4}\\u{30EB}\\u{3092}\\u{8FFD}\\u{52A0}\\u{3057}\\u{307E}\\u{3057}\\u{305F}`, 5000, 2);\n        // 新しいファイルがある場合、または重複のみでもファイルが選択されている場合は検証を実行\n        if (newFiles.length > 0 || this.selectedFiles.length > 0) await this.validateSelectedFiles(); // await を追加\n    }\n    /**\r\n   * 選択されたファイルをクリアする\r\n   */ clearFiles() {\n        // 選択されたファイルをクリア\n        this.selectedFiles = [];\n        this.fileInput.value = '';\n        this.validFiles = 0;\n        // ファイル情報表示を更新\n        this.updateFileInfo();\n        // イベント通知\n        const event = new CustomEvent('filesClear');\n        document.dispatchEvent(event);\n        (0, $c338b0f983d437f5$export$6af13b7de7554010).showToast('info', \"\\u30AF\\u30EA\\u30A2\\u5B8C\\u4E86\", \"\\u30D5\\u30A1\\u30A4\\u30EB\\u9078\\u629E\\u3092\\u30AF\\u30EA\\u30A2\\u3057\\u307E\\u3057\\u305F\");\n    }\n    /**\r\n   * 選択されたファイルを検証する\r\n   */ async validateSelectedFiles() {\n        if (this.selectedFiles.length === 0) {\n            this.updateFileInfo(); // Ensure UI reflects no files selected\n            return false;\n        }\n        try {\n            // 外部のvalidateFilesモジュールを使用\n            const results = await (0, $7a1670790cbbe4b0$export$34b1c1ed5dd6d491)(this.selectedFiles);\n            this.updateValidationUI(results);\n            // 有効なファイル数を計算（型情報を明示的に指定）\n            this.validFiles = results.filter((result)=>result.isValid).length;\n            // 実行ボタンの有効/無効を更新\n            this.executeButton.disabled = this.validFiles === 0;\n            return this.validFiles > 0;\n        } catch (error) {\n            this.handleError(error instanceof Error ? error : new Error(\"\\u4E0D\\u660E\\u306A\\u30A8\\u30E9\\u30FC\"), 'file-validation');\n            this.executeButton.disabled = true; // Disable execute button on validation error\n            return false;\n        }\n    }\n    /**\r\n   * 検証結果をUIに反映する\r\n   * @param results 検証結果の配列\r\n   */ updateValidationUI(results) {\n        // ファイル情報UIを更新\n        this.updateFileInfo(results);\n    }\n    /**\r\n   * ファイル情報表示を更新する\r\n   * @param validationResults 検証結果があれば反映\r\n   */ updateFileInfo(validationResults) {\n        // ファイルが選択されているか確認\n        if (this.selectedFiles.length === 0) {\n            this.fileInfoArea.innerHTML = '<p class=\"no-file-message\">\\u30D5\\u30A1\\u30A4\\u30EB\\u304C\\u9078\\u629E\\u3055\\u308C\\u3066\\u3044\\u307E\\u305B\\u3093</p>';\n            this.clearButton.disabled = true;\n            this.executeButton.disabled = true;\n            return;\n        }\n        // ファイルアイテムのHTMLを生成\n        let html = '';\n        this.selectedFiles.forEach((file)=>{\n            let fileStatus = {\n                status: 'pending',\n                messages: []\n            };\n            if (validationResults) {\n                const result = validationResults.find((r)=>r.file === file);\n                if (result) fileStatus = {\n                    status: result.isValid ? result.warnings.length > 0 ? 'warning' : 'valid' : 'error',\n                    messages: [\n                        ...result.errors.map((msg)=>({\n                                type: 'error',\n                                text: msg\n                            })),\n                        ...result.warnings.map((msg)=>({\n                                type: 'warning',\n                                text: msg\n                            }))\n                    ]\n                };\n            }\n            let statusClass = '';\n            let statusText = '';\n            switch(fileStatus.status){\n                case 'valid':\n                    statusClass = 'status-valid';\n                    statusText = \"\\u6709\\u52B9\";\n                    break;\n                case 'warning':\n                    statusClass = 'status-warning';\n                    statusText = \"\\u8B66\\u544A\";\n                    break;\n                case 'error':\n                    statusClass = 'status-error';\n                    statusText = \"\\u30A8\\u30E9\\u30FC\";\n                    break;\n                default:\n                    statusClass = '';\n                    statusText = \"\\u691C\\u8A3C\\u4E2D...\";\n            }\n            html += `\n        <div class=\"file-item\">\n          <div class=\"file-icon\">\\u{1F4C4}</div>\n          <div class=\"file-name\">${file.name}</div>\n          <div class=\"file-status ${statusClass}\">${statusText}</div>\n        `;\n            // バリデーションメッセージがある場合は表示\n            if (fileStatus.messages && fileStatus.messages.length > 0) {\n                html += '<div class=\"validation-feedback\">';\n                fileStatus.messages.forEach((msg)=>{\n                    let icon = '';\n                    switch(msg.type){\n                        case 'error':\n                            icon = \"\\u274C\";\n                            break;\n                        case 'warning':\n                            icon = \"\\u26A0\\uFE0F\";\n                            break;\n                        case 'info':\n                            icon = \"\\u2139\\uFE0F\";\n                            break;\n                    }\n                    html += `\n            <div class=\"validation-message ${msg.type}\">\n              <span class=\"validation-icon\">${icon}</span>\n              <span class=\"validation-text\">${msg.text}</span>\n            </div>\n          `;\n                });\n                html += '</div>';\n            } else if (fileStatus.status === 'valid') html += `\n          <div class=\"validation-feedback\">\n            <div class=\"validation-message success\">\n              <span class=\"validation-icon\">\\u{2705}</span>\n              <span class=\"validation-text\">\\u{30D5}\\u{30A1}\\u{30A4}\\u{30EB}\\u{5F62}\\u{5F0F}\\u{306F}\\u{6709}\\u{52B9}\\u{3067}\\u{3059}</span>\n            </div>\n          </div>\n        `;\n            html += '</div>'; // file-item end\n        });\n        // HTMLを適用\n        this.fileInfoArea.innerHTML = html;\n        this.clearButton.disabled = false;\n    // Execute button state is handled by validateSelectedFiles\n    }\n    /**\r\n   * エラーを処理する\r\n   * @param error エラーオブジェクト\r\n   * @param context エラーが発生したコンテキスト\r\n   * @param options 追加オプション\r\n   */ handleError(error, context, options = {}) {\n        console.error(`\\u{30A8}\\u{30E9}\\u{30FC} (${context}):`, error);\n        // エラータイプに基づいて適切なメッセージと解決策を提供\n        let title = \"\\u30A8\\u30E9\\u30FC\\u304C\\u767A\\u751F\\u3057\\u307E\\u3057\\u305F\";\n        const message = error.message || \"\\u30A8\\u30E9\\u30FC\\u304C\\u767A\\u751F\\u3057\\u307E\\u3057\\u305F\";\n        let solution = '';\n        const priority = 4; // エラーは高い優先度\n        switch(context){\n            case 'file-format':\n                title = \"\\u30D5\\u30A1\\u30A4\\u30EB\\u5F62\\u5F0F\\u30A8\\u30E9\\u30FC\";\n                solution = \"\\u30C6\\u30AD\\u30B9\\u30C8\\u30D5\\u30A1\\u30A4\\u30EB(.txt)\\u306E\\u307F\\u8FFD\\u52A0\\u3067\\u304D\\u307E\\u3059\\u3002\\u30D5\\u30A1\\u30A4\\u30EB\\u5F62\\u5F0F\\u3092\\u78BA\\u8A8D\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\";\n                break;\n            case 'file-validation':\n                title = \"\\u30D5\\u30A1\\u30A4\\u30EB\\u691C\\u8A3C\\u30A8\\u30E9\\u30FC\";\n                solution = \"\\u6B63\\u3057\\u3044\\u5F62\\u5F0F\\u306EEF\\u7D71\\u5408\\u30D5\\u30A1\\u30A4\\u30EB\\u3067\\u3042\\u308B\\u3053\\u3068\\u3092\\u78BA\\u8A8D\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\";\n                break;\n            case 'file-duplicate':\n                title = \"\\u30D5\\u30A1\\u30A4\\u30EB\\u91CD\\u8907\";\n                solution = \"\\u5225\\u306E\\u30D5\\u30A1\\u30A4\\u30EB\\u3092\\u9078\\u629E\\u3059\\u308B\\u304B\\u3001\\u65E2\\u5B58\\u306E\\u30D5\\u30A1\\u30A4\\u30EB\\u3092\\u30AF\\u30EA\\u30A2\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\";\n                break;\n            default:\n                solution = \"\\u554F\\u984C\\u304C\\u89E3\\u6C7A\\u3057\\u306A\\u3044\\u5834\\u5408\\u306F\\u3001\\u30DA\\u30FC\\u30B8\\u3092\\u518D\\u8AAD\\u307F\\u8FBC\\u307F\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\";\n        }\n        // 解決策がある場合はメッセージに追加\n        const fullMessage = solution ? `${message}<br><span class=\"error-solution\">\\u{89E3}\\u{6C7A}\\u{7B56}: ${solution}</span>` : message;\n        // 通知を表示\n        (0, $c338b0f983d437f5$export$6af13b7de7554010).showToast('error', title, fullMessage, 8000, priority);\n        // エラー回復のためのアクションを提供\n        if (options.recoveryAction && options.recoveryAction.message && options.recoveryAction.label && options.recoveryAction.handler) {\n            const recoveryAction = {\n                message: options.recoveryAction.message,\n                label: options.recoveryAction.label,\n                handler: options.recoveryAction.handler\n            };\n            setTimeout(()=>{\n                (0, $c338b0f983d437f5$export$6af13b7de7554010).showRecoveryToast(recoveryAction);\n            }, 1000);\n        }\n        // エラー状態をUIに反映\n        if (options.updateUI) options.updateUI();\n    }\n    /**\r\n   * 選択されたファイルを取得\r\n   * @returns 選択されたファイル配列\r\n   */ getSelectedFiles() {\n        return this.selectedFiles;\n    }\n    /**\r\n   * 有効なファイル数を取得\r\n   * @returns 有効なファイル数\r\n   */ getValidFileCount() {\n        return this.validFiles;\n    }\n}\n// グローバルでアクセス可能なインスタンスを作成\nlet $e3e22f6c17ed805e$var$fileManagerInstance = null;\nfunction $e3e22f6c17ed805e$export$5ffab0dbdf79647e() {\n    if (!$e3e22f6c17ed805e$var$fileManagerInstance) {\n        // DOMが準備できているか確認\n        if (document.readyState === 'loading') throw new Error('DOM is not ready. Call this function after DOMContentLoaded');\n        $e3e22f6c17ed805e$var$fileManagerInstance = new $e3e22f6c17ed805e$export$a5245c9b2355d1f8();\n    }\n    return $e3e22f6c17ed805e$var$fileManagerInstance;\n}\nconst $e3e22f6c17ed805e$export$d45d33c808f51185 = {\n    get instance () {\n        // 戻り値の型を追加\n        return $e3e22f6c17ed805e$export$5ffab0dbdf79647e();\n    }\n};\n\n\nclass $d5176f4c1bfaf4b6$export$81386075c4f5828b {\n    /**\r\n   * 結果表示クラスのコンストラクタ\r\n   */ constructor(){\n        this.currentView = 'text';\n        // DOM要素の取得\n        this.resultTextarea = document.getElementById('resultTextarea');\n        this.resultTable = document.getElementById('resultTable');\n        this.textViewButton = document.getElementById('textViewButton');\n        this.tableViewButton = document.getElementById('tableViewButton');\n        this.textResultView = document.getElementById('textResultView');\n        this.tableResultView = document.getElementById('tableResultView');\n        this.copyButton = document.getElementById('copyButton');\n        this.copyMessage = document.getElementById('copyMessage');\n        this.downloadLink = document.getElementById('downloadLink');\n        if (!this.resultTextarea || !this.resultTable || !this.textViewButton || !this.tableViewButton || !this.textResultView || !this.tableResultView || !this.copyButton || !this.copyMessage || !this.downloadLink) throw new Error(\"\\u5FC5\\u8981\\u306ADOM\\u8981\\u7D20\\u304C\\u898B\\u3064\\u304B\\u308A\\u307E\\u305B\\u3093\");\n        this.setupEventListeners();\n    }\n    /**\r\n   * イベントリスナーのセットアップ\r\n   */ setupEventListeners() {\n        // 表示切替ボタンのイベント\n        this.textViewButton.addEventListener('click', ()=>{\n            this.setResultView('text');\n        });\n        this.tableViewButton.addEventListener('click', ()=>{\n            this.setResultView('table');\n        });\n        // コピーボタンのイベント\n        this.copyButton.addEventListener('click', ()=>{\n            this.copyResultToClipboard();\n        });\n    }\n    /**\r\n   * 結果表示モードを設定する\r\n   * @param viewMode 表示モード ('text' または 'table')\r\n   */ setResultView(viewMode) {\n        this.currentView = viewMode;\n        if (viewMode === 'text') {\n            this.textResultView.style.display = 'block';\n            this.tableResultView.style.display = 'none';\n            this.textViewButton.classList.add('active');\n            this.tableViewButton.classList.remove('active');\n            this.textViewButton.setAttribute('aria-pressed', 'true');\n            this.tableViewButton.setAttribute('aria-pressed', 'false');\n        } else {\n            this.textResultView.style.display = 'none';\n            this.tableResultView.style.display = 'block';\n            this.textViewButton.classList.remove('active');\n            this.tableViewButton.classList.add('active');\n            this.textViewButton.setAttribute('aria-pressed', 'false');\n            this.tableViewButton.setAttribute('aria-pressed', 'true');\n        }\n    }\n    /**\r\n   * 結果をクリップボードにコピーする (navigator.clipboard APIを使用)\r\n   */ async copyResultToClipboard() {\n        const textToCopy = this.resultTextarea.value;\n        if (!textToCopy) return;\n        try {\n            // navigator.clipboard APIを使用してテキストをコピー\n            await navigator.clipboard.writeText(textToCopy);\n            // 既存のクラスをクリア\n            this.copyMessage.classList.remove('visible', 'error');\n            // コピー成功メッセージを表示\n            this.copyMessage.textContent = \"\\u30B3\\u30D4\\u30FC\\u3057\\u307E\\u3057\\u305F\\uFF01\";\n            this.copyMessage.classList.add('visible');\n            // メッセージを一定時間後に消す\n            setTimeout(()=>{\n                this.copyMessage.classList.remove('visible');\n            }, 2000);\n        } catch (err) {\n            console.error(\"\\u30AF\\u30EA\\u30C3\\u30D7\\u30DC\\u30FC\\u30C9\\u3078\\u306E\\u30B3\\u30D4\\u30FC\\u306B\\u5931\\u6557\\u3057\\u307E\\u3057\\u305F:\", err);\n            // 既存のクラスをクリア\n            this.copyMessage.classList.remove('visible', 'error');\n            // エラーメッセージを表示 (より具体的に)\n            this.copyMessage.textContent = \"\\u30B3\\u30D4\\u30FC\\u306B\\u5931\\u6557\\u3057\\u307E\\u3057\\u305F\";\n            this.copyMessage.classList.add('visible');\n            this.copyMessage.classList.add('error'); // エラー用スタイルを追加 (CSSで定義が必要)\n            // メッセージを一定時間後に消す\n            setTimeout(()=>{\n                this.copyMessage.classList.remove('visible');\n                this.copyMessage.classList.remove('error');\n            }, 3000);\n        }\n    }\n    /**\r\n   * 結果を表示する\r\n   * @param resultText 結果のテキストデータ\r\n   */ displayResult(resultText, debugInfo) {\n        // 空文字列の場合も処理を続行し、表示をクリアする\n        // デバッグ情報がある場合は、結果の前に追加\n        const displayText = debugInfo ? `=== \\u{30C7}\\u{30D0}\\u{30C3}\\u{30B0}\\u{60C5}\\u{5831} ===\n${debugInfo}\n\n=== \\u{51E6}\\u{7406}\\u{7D50}\\u{679C} ===\n${resultText}` : resultText;\n        // テキストエリアに表示\n        this.resultTextarea.value = displayText;\n        // テーブルに表示（デバッグ情報は除外）\n        this.updateResultTable(resultText);\n        // 結果表示エリアを表示\n        const resultContainer = document.getElementById('resultContainer');\n        if (resultContainer) resultContainer.classList.remove('hidden');\n        // 保存用リンクを更新\n        this.updateDownloadLink(resultText);\n        // 結果があればコピー/ダウンロードボタンを有効化、なければ無効化\n        const hasResult = !!resultText;\n        this.copyButton.disabled = !hasResult;\n        this.downloadLink.classList.toggle('hidden', !hasResult);\n        // 結果が空ならテーブルもクリア\n        if (!hasResult) this.clearResultTable();\n    }\n    /**\r\n   * 結果テーブルをクリアする\r\n   */ clearResultTable() {\n        const tbody = this.resultTable.querySelector('tbody');\n        if (tbody) tbody.innerHTML = '';\n    }\n    /**\r\n   * 結果テーブルを更新する\r\n   * @param resultText タブ区切りのテキスト結果\r\n   */ updateResultTable(resultText) {\n        if (!resultText) return;\n        const tbody = this.resultTable.querySelector('tbody');\n        if (!tbody) return;\n        this.clearResultTable();\n        // テキストを行に分割\n        const lines = resultText.trim().split('\\n');\n        // ヘッダー行をスキップして2行目から処理\n        for(let i = 1; i < lines.length; i++){\n            const columns = lines[i].split('\\t');\n            // 行が正しいフォーマットかチェック\n            if (columns.length >= 5) {\n                const row = document.createElement('tr');\n                // 各列のデータをセルに追加\n                for(let j = 0; j < 5; j++){\n                    const cell = document.createElement('td');\n                    cell.textContent = columns[j];\n                    // 短手３対象症例の列に特別なスタイルを適用\n                    if (j === 3) {\n                        if (columns[j] === 'Yes') cell.classList.add('eligible-yes');\n                        else cell.classList.add('eligible-no');\n                    }\n                    row.appendChild(cell);\n                }\n                tbody.appendChild(row);\n            }\n        }\n    }\n    /**\r\n   * ダウンロードリンクを更新する\r\n   * @param resultText 結果テキスト\r\n   */ updateDownloadLink(resultText) {\n        const blob = new Blob([\n            resultText\n        ], {\n            type: 'text/plain'\n        });\n        const url = URL.createObjectURL(blob);\n        // 既存のURLを解放\n        if (this.downloadLink.href) URL.revokeObjectURL(this.downloadLink.href);\n        // 新しいURLを設定\n        this.downloadLink.href = url;\n        // ファイル名の設定\n        const date = new Date();\n        const dateStr = `${date.getFullYear()}${(date.getMonth() + 1).toString().padStart(2, '0')}${date.getDate().toString().padStart(2, '0')}`;\n        this.downloadLink.setAttribute('download', `\\u{77ED}\\u{624B}3\\u{5224}\\u{5B9A}\\u{7D50}\\u{679C}_${dateStr}.txt`);\n        // ダウンロードリンクを表示\n        this.downloadLink.classList.remove('hidden');\n    }\n    /**\r\n   * 現在の表示モードを取得\r\n   * @returns 現在の表示モード\r\n   */ getCurrentView() {\n        return this.currentView;\n    }\n    /**\r\n   * 表示用設定を取得\r\n   * @returns 出力設定\r\n   */ getOutputSettings() {\n        // 戻り値の型を明示 (インポート元が修正されたため)\n        const eligibleOnlyRadio = document.getElementById('eligibleOnly');\n        const dateFormatRadios = document.querySelectorAll('input[name=\"dateFormat\"]');\n        // デフォルト値を小文字に修正し、型を明示\n        let dateFormat = 'yyyymmdd';\n        for (const radio of Array.from(dateFormatRadios))if (radio.checked) {\n            // radio.value が正しい型であることを確認 (必要であればアサーション)\n            dateFormat = radio.value;\n            break;\n        }\n        return {\n            outputMode: eligibleOnlyRadio?.checked ? 'eligibleOnly' : 'allCases',\n            dateFormat: dateFormat\n        };\n    }\n} // グローバルインスタンス作成を削除。インスタンスは main.ts などで必要に応じて作成する。\n\n\n\n\n/**\r\n * 短期滞在手術等基本料３判定プログラム - パーサー関数\r\n * このファイルには、ファイル解析に関連する関数を含みます。\r\n */ /**\r\n * デフォルトの結果ヘッダー行\r\n */ const $952cec8ced8a46bd$export$4100e9622577bf55 = \"\\u30C7\\u30FC\\u30BF\\u8B58\\u5225\\u756A\\u53F7\t\\u5165\\u9662\\u5E74\\u6708\\u65E5\t\\u9000\\u9662\\u5E74\\u6708\\u65E5\t\\u77ED\\u624B\\uFF13\\u5BFE\\u8C61\\u75C7\\u4F8B\t\\u7406\\u7531\";\nconst $952cec8ced8a46bd$export$f1a027a66665c964 = '150285010'; // 長径２センチメートル未満\nconst $952cec8ced8a46bd$export$a01379b891872e93 = '150183410'; // 長径２センチメートル以上\nconst $952cec8ced8a46bd$export$9abababf870cce56 = [\n    $952cec8ced8a46bd$export$f1a027a66665c964,\n    $952cec8ced8a46bd$export$a01379b891872e93\n]; // 小・大の両方のコードをまとめた配列\nconst $952cec8ced8a46bd$export$861aae5ae66b2524 = {\n    '160218510': \"\\u7D42\\u591C\\u7761\\u7720\\u30DD\\u30EA\\u30B0\\u30E9\\u30D5\\u30A3\\u30FC\\uFF08\\uFF11\\u53CA\\u3073\\uFF12\\u4EE5\\u5916\\u306E\\u5834\\u5408\\uFF09\\uFF08\\u5B89\\u5168\\u7CBE\\u5EA6\\u7BA1\\u7406\\u4E0B\\u3067\\u884C\\u3046\\u3082\\u306E\\uFF09\",\n    '160218610': \"\\u7D42\\u591C\\u7761\\u7720\\u30DD\\u30EA\\u30B0\\u30E9\\u30D5\\u30A3\\u30FC\\uFF08\\uFF11\\u53CA\\u3073\\uFF12\\u4EE5\\u5916\\u306E\\u5834\\u5408\\uFF09\\uFF08\\u305D\\u306E\\u4ED6\\u306E\\u3082\\u306E\\uFF09\",\n    '160183110': \"\\u53CD\\u5FA9\\u7761\\u7720\\u6F5C\\u6642\\u8A66\\u9A13\\uFF08\\uFF2D\\uFF33\\uFF2C\\uFF34\\uFF09\",\n    '160119710': \"\\u4E0B\\u5782\\u4F53\\u524D\\u8449\\u8CA0\\u8377\\u8A66\\u9A13\\u6210\\u9577\\u30DB\\u30EB\\u30E2\\u30F3\\uFF08\\uFF27\\uFF28\\uFF09\\uFF08\\u4E00\\u9023\\u3068\\u3057\\u3066\\uFF09\",\n    '160180410': \"\\u5C0F\\u5150\\u98DF\\u7269\\u30A2\\u30EC\\u30EB\\u30AE\\u30FC\\u8CA0\\u8377\\u691C\\u67FB\",\n    '160098110': \"\\u524D\\u7ACB\\u817A\\u91DD\\u751F\\u691C\\u6CD5\\uFF08\\u305D\\u306E\\u4ED6\\u306E\\u3082\\u306E\\uFF09\",\n    '150351910': \"\\u7D4C\\u76AE\\u7684\\u653E\\u5C04\\u7DDA\\u6CBB\\u7642\\u7528\\u91D1\\u5C5E\\u30DE\\u30FC\\u30AB\\u30FC\\u7559\\u7F6E\\u8853\",\n    '150011310': \"\\u56DB\\u80A2\\u30FB\\u8EAF\\u5E79\\u8EDF\\u90E8\\u816B\\u760D\\u6458\\u51FA\\u8853\\uFF08\\u624B\\uFF09\",\n    '150294810': \"\\u9AA8\\u6298\\u89B3\\u8840\\u7684\\u624B\\u8853\\uFF08\\u624B\\u821F\\u72B6\\u9AA8\\uFF09\",\n    '150020810': \"\\u9AA8\\u5185\\u7570\\u7269\\uFF08\\u633F\\u5165\\u7269\\u3092\\u542B\\u3080\\u3002\\uFF09\\u9664\\u53BB\\u8853\\uFF08\\u524D\\u8155\\uFF09\",\n    '150021010': \"\\u9AA8\\u5185\\u7570\\u7269\\uFF08\\u633F\\u5165\\u7269\\u3092\\u542B\\u3080\\u3002\\uFF09\\u9664\\u53BB\\u8853\\uFF08\\u9396\\u9AA8\\uFF09\",\n    '150021210': \"\\u9AA8\\u5185\\u7570\\u7269\\uFF08\\u633F\\u5165\\u7269\\u3092\\u542B\\u3080\\u3002\\uFF09\\u9664\\u53BB\\u8853\\uFF08\\u624B\\uFF09\",\n    '150041010': \"\\u30AC\\u30F3\\u30B0\\u30EA\\u30AA\\u30F3\\u6458\\u51FA\\u8853\\uFF08\\u624B\\uFF09\",\n    '150314110': \"\\u95A2\\u7BC0\\u93E1\\u4E0B\\u624B\\u6839\\u7BA1\\u958B\\u653E\\u624B\\u8853\",\n    '150273810': \"\\u80F8\\u8154\\u93E1\\u4E0B\\u4EA4\\u611F\\u795E\\u7D4C\\u7BC0\\u5207\\u9664\\u8853\\uFF08\\u4E21\\u5074\\uFF09\",\n    '150355810': \"\\u6D99\\u7BA1\\u30C1\\u30E5\\u30FC\\u30D6\\u633F\\u5165\\u8853\\uFF08\\u6D99\\u9053\\u5185\\u8996\\u93E1\\u3092\\u7528\\u3044\\u308B\\u3082\\u306E\\uFF09\",\n    '150355910': \"\\u773C\\u77BC\\u5185\\u53CD\\u75C7\\u624B\\u8853\\uFF08\\u76AE\\u819A\\u5207\\u958B\\u6CD5\\uFF09\",\n    '150078810': \"\\u773C\\u77BC\\u4E0B\\u5782\\u75C7\\u624B\\u8853\\uFF08\\u773C\\u77BC\\u6319\\u7B4B\\u524D\\u8EE2\\u6CD5\\uFF09\",\n    '150079010': \"\\u773C\\u77BC\\u4E0B\\u5782\\u75C7\\u624B\\u8853\\uFF08\\u305D\\u306E\\u4ED6\\u306E\\u3082\\u306E\\uFF09\",\n    '150080210': \"\\u7FFC\\u72B6\\u7247\\u624B\\u8853\\uFF08\\u5F01\\u306E\\u79FB\\u690D\\u3092\\u8981\\u3059\\u308B\\u3082\\u306E\\uFF09\",\n    '150083410': \"\\u659C\\u8996\\u624B\\u8853\\uFF08\\u5F8C\\u8EE2\\u6CD5\\uFF09\",\n    '150083510': \"\\u659C\\u8996\\u624B\\u8853\\uFF08\\u524D\\u8EE2\\u6CD5\\u53CA\\u3073\\u5F8C\\u8EE2\\u6CD5\\u306E\\u4F75\\u65BD\\uFF09\",\n    '150344510': \"\\u6CBB\\u7642\\u7684\\u89D2\\u819C\\u5207\\u9664\\u8853\\uFF08\\u30A8\\u30AD\\u30B7\\u30DE\\u30EC\\u30FC\\u30B6\\u30FC\\u306B\\u3088\\u308B\\u3082\\u306E\\uFF08\\u89D2\\u819C\\u30B8\\u30B9\\u30C8\\u30ED\\u30D5\\u30A3\\u30FC\\u53C8\\u306F\\u5E2F\\u72B6\\u89D2\\u819C\\u5909\\u6027\\u306B\\u4FC2\\u308B\\u3082\\u306E\\u306B\\u9650\\u308B\\u3002\\uFF09\\uFF09\",\n    '150395150': \"\\u7DD1\\u5185\\u969C\\u624B\\u8853\\uFF08\\u6C34\\u6676\\u4F53\\u518D\\u5EFA\\u8853\\u4F75\\u7528\\u773C\\u5185\\u30C9\\u30EC\\u30FC\\u30F3\\u633F\\u5165\\u8853\\uFF09\",\n    '150253010': \"\\u6C34\\u6676\\u4F53\\u518D\\u5EFA\\u8853\\uFF08\\u773C\\u5185\\u30EC\\u30F3\\u30BA\\u3092\\u633F\\u5165\\u3059\\u308B\\u5834\\u5408\\uFF09\\uFF08\\u305D\\u306E\\u4ED6\\u306E\\u3082\\u306E\\uFF09\",\n    '150315610': \"\\u6C34\\u6676\\u4F53\\u518D\\u5EFA\\u8853\\uFF08\\u773C\\u5185\\u30EC\\u30F3\\u30BA\\u3092\\u633F\\u5165\\u3057\\u306A\\u3044\\u5834\\u5408\\uFF09\",\n    '150096010': \"\\u9F13\\u819C\\u5F62\\u6210\\u624B\\u8853\",\n    '150097710': \"\\u9F3B\\u9AA8\\u9AA8\\u6298\\u6574\\u5FA9\\u56FA\\u5B9A\\u8853\",\n    '150315910': \"\\u58F0\\u5E2F\\u30DD\\u30EA\\u30FC\\u30D7\\u5207\\u9664\\u8853\\uFF08\\u30D5\\u30A1\\u30A4\\u30D0\\u30FC\\u30B9\\u30B3\\u30FC\\u30D7\\u306B\\u3088\\u308B\\u3082\\u306E\\uFF09\",\n    '150316010': \"\\u58F0\\u5E2F\\u30DD\\u30EA\\u30FC\\u30D7\\u5207\\u9664\\u8853\\uFF08\\u76F4\\u9054\\u5589\\u982D\\u93E1\\u306B\\u3088\\u308B\\u3082\\u306E\\uFF09\",\n    '150106850': \"\\u5589\\u982D\\u30DD\\u30EA\\u30FC\\u30D7\\u5207\\u9664\\u8853\\uFF08\\u76F4\\u9054\\u5589\\u982D\\u93E1\\u306B\\u3088\\u308B\\u3082\\u306E\\uFF09\",\n    '150299450': \"\\u5589\\u982D\\u30DD\\u30EA\\u30FC\\u30D7\\u5207\\u9664\\u8853\\uFF08\\u30D5\\u30A1\\u30A4\\u30D0\\u30FC\\u30B9\\u30B3\\u30FC\\u30D7\\u306B\\u3088\\u308B\\u3082\\u306E\\uFF09\",\n    '150121110': \"\\u4E73\\u817A\\u816B\\u760D\\u6458\\u51FA\\u8853\\uFF08\\u9577\\u5F84\\uFF15\\u30BB\\u30F3\\u30C1\\u30E1\\u30FC\\u30C8\\u30EB\\u672A\\u6E80\\uFF09\",\n    '150121210': \"\\u4E73\\u817A\\u816B\\u760D\\u6458\\u51FA\\u8853\\uFF08\\u9577\\u5F84\\uFF15\\u30BB\\u30F3\\u30C1\\u30E1\\u30FC\\u30C8\\u30EB\\u4EE5\\u4E0A\\uFF09\",\n    '150416610': \"\\u7D4C\\u76AE\\u7684\\u30B7\\u30E3\\u30F3\\u30C8\\u62E1\\u5F35\\u8853\\u30FB\\u8840\\u6813\\u9664\\u53BB\\u8853\\uFF08\\u521D\\u56DE\\uFF09\",\n    '150416710': \"\\u7D4C\\u76AE\\u7684\\u30B7\\u30E3\\u30F3\\u30C8\\u62E1\\u5F35\\u8853\\u30FB\\u8840\\u6813\\u9664\\u53BB\\u8853\\uFF08\\uFF11\\u306E\\u5B9F\\u65BD\\u5F8C\\uFF13\\u6708\\u4EE5\\u5185\\u306B\\u5B9F\\u65BD\\u3059\\u308B\\u5834\\u5408\\uFF09\",\n    '150154010': \"\\u4E0B\\u80A2\\u9759\\u8108\\u7624\\u624B\\u8853\\uFF08\\u629C\\u53BB\\u5207\\u9664\\u8853\\uFF09\",\n    '150263410': \"\\u4E0B\\u80A2\\u9759\\u8108\\u7624\\u624B\\u8853\\uFF08\\u786C\\u5316\\u7642\\u6CD5\\uFF08\\u4E00\\u9023\\u3068\\u3057\\u3066\\uFF09\\uFF09\",\n    '150296510': \"\\u4E0B\\u80A2\\u9759\\u8108\\u7624\\u624B\\u8853\\uFF08\\u9AD8\\u4F4D\\u7D50\\u7D2E\\u8853\\uFF09\",\n    '150154150': \"\\u5927\\u4F0F\\u5728\\u9759\\u8108\\u629C\\u53BB\\u8853\",\n    '150360910': \"\\u4E0B\\u80A2\\u9759\\u8108\\u7624\\u8840\\u7BA1\\u5185\\u713C\\u707C\\u8853\",\n    '150411150': \"\\u4E0B\\u80A2\\u9759\\u8108\\u7624\\u8840\\u7BA1\\u5185\\u585E\\u6813\\u8853\",\n    '150159010': \"\\u30D8\\u30EB\\u30CB\\u30A2\\u624B\\u8853\\uFF08\\u9F20\\u5F84\\u30D8\\u30EB\\u30CB\\u30A2\\uFF09\",\n    '150263610': \"\\u8179\\u8154\\u93E1\\u4E0B\\u9F20\\u5F84\\u30D8\\u30EB\\u30CB\\u30A2\\u624B\\u8853\\uFF08\\u4E21\\u5074\\uFF09\",\n    '150285010': \"\\u5185\\u8996\\u93E1\\u7684\\u5927\\u8178\\u30DD\\u30EA\\u30FC\\u30D7\\u30FB\\u7C98\\u819C\\u5207\\u9664\\u8853\\uFF08\\u9577\\u5F84\\uFF12\\u30BB\\u30F3\\u30C1\\u30E1\\u30FC\\u30C8\\u30EB\\u672A\\u6E80\\uFF09\",\n    '150183410': \"\\u5185\\u8996\\u93E1\\u7684\\u5927\\u8178\\u30DD\\u30EA\\u30FC\\u30D7\\u30FB\\u7C98\\u819C\\u5207\\u9664\\u8853\\uFF08\\u9577\\u5F84\\uFF12\\u30BB\\u30F3\\u30C1\\u30E1\\u30FC\\u30C8\\u30EB\\u4EE5\\u4E0A\\uFF09\",\n    '150325410': \"\\u75D4\\u6838\\u624B\\u8853\\uFF08\\u8131\\u809B\\u3092\\u542B\\u3080\\u3002\\uFF09\\uFF08\\u786C\\u5316\\u7642\\u6CD5\\uFF08\\u56DB\\u6BB5\\u968E\\u6CE8\\u5C04\\u6CD5\\u306B\\u3088\\u308B\\u3082\\u306E\\uFF09\\uFF09\",\n    '150190310': \"\\u809B\\u9580\\u30DD\\u30EA\\u30FC\\u30D7\\u5207\\u9664\\u8853\",\n    '150190410': \"\\u809B\\u9580\\u5C16\\u572D\\u30B3\\u30F3\\u30B8\\u30ED\\u30FC\\u30E0\\u5207\\u9664\\u8853\",\n    '150194510': \"\\u4F53\\u5916\\u885D\\u6483\\u6CE2\\u814E\\u30FB\\u5C3F\\u7BA1\\u7D50\\u77F3\\u7834\\u7815\\u8853\\uFF08\\u4E00\\u9023\\u306B\\u3064\\u304D\\uFF09\",\n    '150421110': \"\\u5C3F\\u5931\\u7981\\u624B\\u8853\\uFF08\\u30DC\\u30C4\\u30EA\\u30CC\\u30B9\\u6BD2\\u7D20\\u306B\\u3088\\u308B\\u3082\\u306E\\uFF09\",\n    '150404310': \"\\u9855\\u5FAE\\u93E1\\u4E0B\\u7CBE\\u7D22\\u9759\\u8108\\u7624\\u624B\\u8853\",\n    '150216510': \"\\u5B50\\u5BAE\\u9838\\u90E8\\uFF08\\u815F\\u90E8\\uFF09\\u5207\\u9664\\u8853\",\n    '150421310': \"\\u5B50\\u5BAE\\u93E1\\u4E0B\\u6709\\u830E\\u7C98\\u819C\\u4E0B\\u7B4B\\u816B\\u5207\\u51FA\\u8853\\uFF08\\u96FB\\u89E3\\u8CEA\\u6EB6\\u6DB2\\u5229\\u7528\\u306E\\u3082\\u306E\\uFF09\",\n    '150421410': \"\\u5B50\\u5BAE\\u5185\\u819C\\u30DD\\u30EA\\u30FC\\u30D7\\u5207\\u9664\\u8853\\uFF08\\u96FB\\u89E3\\u8CEA\\u6EB6\\u6DB2\\u5229\\u7528\\u306E\\u3082\\u306E\\uFF09\",\n    '150421510': \"\\u5B50\\u5BAE\\u93E1\\u4E0B\\u6709\\u830E\\u7C98\\u819C\\u4E0B\\u7B4B\\u816B\\u5207\\u51FA\\u8853\\uFF08\\u305D\\u306E\\u4ED6\\u306E\\u3082\\u306E\\uFF09\",\n    '150421610': \"\\u5B50\\u5BAE\\u5185\\u819C\\u30DD\\u30EA\\u30FC\\u30D7\\u5207\\u9664\\u8853\\uFF08\\u305D\\u306E\\u4ED6\\u306E\\u3082\\u306E\\uFF09\",\n    '150421710': \"\\u5B50\\u5BAE\\u93E1\\u4E0B\\u5B50\\u5BAE\\u7B4B\\u816B\\u6458\\u51FA\\u8853\\uFF08\\u96FB\\u89E3\\u8CEA\\u6EB6\\u6DB2\\u5229\\u7528\\u306E\\u3082\\u306E\\uFF09\",\n    '150421810': \"\\u5B50\\u5BAE\\u93E1\\u4E0B\\u5B50\\u5BAE\\u7B4B\\u816B\\u6458\\u51FA\\u8853\\uFF08\\u305D\\u306E\\u4ED6\\u306E\\u3082\\u306E\\uFF09\",\n    '150366110': \"\\u8179\\u8154\\u93E1\\u4E0B\\u5375\\u7BA1\\u5F62\\u6210\\u8853\",\n    '180018910': \"\\u30AC\\u30F3\\u30DE\\u30CA\\u30A4\\u30D5\\u306B\\u3088\\u308B\\u5B9A\\u4F4D\\u653E\\u5C04\\u7DDA\\u6CBB\\u7642\"\n};\nconst $952cec8ced8a46bd$export$bc8c9440750cf9cc = Object.keys($952cec8ced8a46bd$export$861aae5ae66b2524);\nconst $952cec8ced8a46bd$export$c2dd158f3483965f = [\n    '150429570',\n    '150437170'\n];\nconst $952cec8ced8a46bd$export$e682c072e4e56117 = 5;\nconst $952cec8ced8a46bd$export$b875acc5e1c1d7cd = {\n    UNDISCHARGED: \"\\u9000\\u9662\\u65E5\\u672A\\u78BA\\u5B9A\",\n    NO_TARGET_PROCEDURE: \"\\u5BFE\\u8C61\\u624B\\u8853\\u7B49\\u306A\\u3057\",\n    HOSPITAL_DAYS_EXCEEDED: \"\\u5165\\u9662\\u671F\\u9593\\u304C\\uFF16\\u65E5\\u4EE5\\u4E0A\",\n    MULTIPLE_TARGET_PROCEDURES: \"\\u5BFE\\u8C61\\u624B\\u8853\\u7B49\\u3092\\uFF12\\u4EE5\\u4E0A\\u5B9F\\u65BD\",\n    OTHER_SURGERY: \"\\u5BFE\\u8C61\\u624B\\u8853\\u7B49\\u4EE5\\u5916\\u306E\\u624B\\u8853\\u3042\\u308A\",\n    SPECIAL_ADDITION: \"\\u5185\\u8996\\u93E1\\u7684\\u5927\\u8178\\u30DD\\u30EA\\u30FC\\u30D7\\u8853\\u306B\\u7279\\u5B9A\\u52A0\\u7B97\\u3042\\u308A\"\n};\n\n\n/**\r\n * EFファイルの行からデータを抽出する共通関数\r\n * @param columns - データ列の配列\r\n * @returns 患者データ（対象手術の場合は完全、それ以外は基本情報のみ）またはnull（データが不十分な場合）\r\n */ function $d4b1decbb56d16ba$var$extractCaseData(columns) {\n    // 少なくとも基本情報（ID, 入院日, 退院日）を含む列が必要\n    if (columns.length < 4) return null;\n    const dataId = columns[1].trim();\n    if (!dataId) return null;\n    const admission = columns[3].trim();\n    const discharge = columns[2].trim();\n    // 行為明細番号を取得 (列が存在する場合のみ)\n    const actionDetailNo = columns.length > 6 ? columns[6].trim() : null;\n    // 行為明細番号が\"000\"の行（Eファイル）は日付更新にも不要なためスキップ\n    if (actionDetailNo === '000') return null;\n    // 基本情報\n    const basicInfo = {\n        dataId: dataId,\n        admission: admission,\n        discharge: discharge\n    };\n    // レセプト電算コードと診療明細名称を取得 (列が存在する場合のみ)\n    const procedure = columns.length > 8 ? columns[8].trim() : null;\n    const procedureName = columns.length > 10 ? columns[10].trim() : null;\n    // 短手3の対象手術かどうかを判定\n    if (!procedure || !(0, $952cec8ced8a46bd$export$bc8c9440750cf9cc).includes(procedure)) // 対象手術でなくても基本情報は返す（日付更新のため）\n    return {\n        ...basicInfo,\n        procedure: null,\n        procedureName: null\n    };\n    // 対象手術の場合、完全な情報を返す\n    // RawCaseData型にキャストして返す (procedureはstringであることが保証されている)\n    // procedureNameがnullの場合もデフォルト値を設定し、string型を保証\n    return {\n        ...basicInfo,\n        procedure: procedure,\n        procedureName: procedureName ?? \"(\\u540D\\u79F0\\u306A\\u3057)\"\n    };\n}\nfunction $d4b1decbb56d16ba$export$571ac2eb53ddaf2d(content) {\n    const lines = content.split(/\\r?\\n/);\n    // キーを複合キー (dataId_admission) に変更\n    const caseMap = {};\n    // ヘッダー行を除いたデータ行を処理\n    for(let i = 1; i < lines.length; i++){\n        const line = lines[i].trim();\n        if (!line) continue;\n        try {\n            const columns = line.split('\\t');\n            const extractedData = $d4b1decbb56d16ba$var$extractCaseData(columns);\n            if (extractedData) {\n                const { dataId: dataId, discharge: discharge, admission: admission, procedure: procedure, procedureName: procedureName } = extractedData;\n                // 複合キーを作成\n                const caseKey = `${dataId}_${admission}`;\n                // 既存の症例データを取得または新規作成 (複合キーを使用)\n                let currentCase = caseMap[caseKey];\n                if (!currentCase) {\n                    currentCase = {\n                        id: dataId,\n                        admission: admission,\n                        discharge: discharge,\n                        procedures: [],\n                        procedureNames: []\n                    };\n                    caseMap[caseKey] = currentCase;\n                }\n                // 退院日の更新 (00000000 でなく、既存より新しい日付の場合)\n                // この症例 (複合キーで特定) の退院日を更新\n                if (discharge && discharge !== '00000000' && (!currentCase.discharge || currentCase.discharge === '00000000' || discharge > currentCase.discharge)) currentCase.discharge = discharge;\n                // 対象手術コードと名称を追加（procedureがnullでない場合のみ）\n                // この症例 (複合キーで特定) の手術リストに追加\n                if (procedure && !currentCase.procedures.includes(procedure)) {\n                    currentCase.procedures.push(procedure);\n                    if (!currentCase.procedureNames) currentCase.procedureNames = [];\n                    currentCase.procedureNames.push(procedureName ?? \"(\\u540D\\u79F0\\u306A\\u3057)\");\n                }\n            }\n        } catch  {\n            continue;\n        }\n    }\n    return Object.values(caseMap);\n}\nfunction $d4b1decbb56d16ba$export$b88fb33a849f1168(existingCases, newCases) {\n    // キーを複合キー (dataId_admission) に変更\n    const caseMap = {};\n    // 既存のケースをマップに追加 (複合キーを使用)\n    for (const c of existingCases){\n        const caseKey = `${c.id}_${c.admission}`;\n        caseMap[caseKey] = $d4b1decbb56d16ba$var$createSafeCase(c); // 既存データも安全にコピー\n    }\n    // 新しいケースをマージ (複合キーを使用)\n    for (const c of newCases){\n        const caseKey = `${c.id}_${c.admission}`;\n        if (caseMap[caseKey]) // 既存症例の更新処理 (複合キーで特定された症例を更新)\n        $d4b1decbb56d16ba$var$updateExistingCase(caseMap[caseKey], c);\n        else // 新しい症例を追加 (複合キーでマップに追加)\n        caseMap[caseKey] = $d4b1decbb56d16ba$var$createSafeCase(c);\n    }\n    return Object.values(caseMap);\n}\n/**\r\n * 既存の症例データを新しいデータで更新する\r\n * @param currentCase - 更新対象の症例データ\r\n * @param newCase - 新しい症例データ\r\n */ function $d4b1decbb56d16ba$var$updateExistingCase(currentCase, newCase) {\n    // 退院日が確定した場合（00000000 から具体的な日付に変わった場合）\n    // または、より新しい退院日が来た場合 (YYYYMMDD形式なので文字列比較でOK)\n    if (newCase.discharge && newCase.discharge !== '00000000' && (!currentCase.discharge || currentCase.discharge === '00000000' || newCase.discharge > currentCase.discharge)) currentCase.discharge = newCase.discharge;\n    // procedures と procedureNames の初期化を確実に行う\n    if (!Array.isArray(currentCase.procedures)) currentCase.procedures = [];\n    if (!Array.isArray(currentCase.procedureNames)) currentCase.procedureNames = [];\n    // 新しい手術コードを追加\n    $d4b1decbb56d16ba$var$mergeProcedures(currentCase, newCase);\n}\n/**\r\n * 安全な症例データオブジェクトを作成する\r\n * @param c - 元の症例データ\r\n * @returns 配列が初期化された症例データ\r\n */ function $d4b1decbb56d16ba$var$createSafeCase(c) {\n    return {\n        ...c,\n        procedures: Array.isArray(c.procedures) ? [\n            ...c.procedures\n        ] : [],\n        procedureNames: Array.isArray(c.procedureNames) ? [\n            ...c.procedureNames\n        ] : []\n    };\n}\n/**\r\n * 症例の処置データを統合する\r\n * @param currentCase - 統合先の症例データ\r\n * @param newCase - 統合元の症例データ\r\n */ function $d4b1decbb56d16ba$var$mergeProcedures(currentCase, newCase) {\n    // 新しい手術コードを追加（重複を避ける）\n    const procedures = Array.isArray(newCase.procedures) ? newCase.procedures : [];\n    const procedureNames = Array.isArray(newCase.procedureNames) ? newCase.procedureNames : [];\n    for(let i = 0; i < procedures.length; i++){\n        const proc = procedures[i];\n        if (!currentCase.procedures.includes(proc)) {\n            currentCase.procedures.push(proc);\n            // procedureNamesが未定義の場合は初期化\n            if (!currentCase.procedureNames) currentCase.procedureNames = [];\n            // 対応する手術名も追加（存在しない場合はデフォルト値）\n            currentCase.procedureNames.push(procedureNames[i] ?? \"(\\u540D\\u79F0\\u306A\\u3057)\");\n        }\n    }\n}\n\n\n/**\r\n * 短期滞在手術等基本料３判定プログラム - 評価ロジック\r\n * このファイルには、短手３該当症例の判定などの評価ロジックを含みます。\r\n */ /**\r\n * 短期滞在手術等基本料３判定プログラム - ユーティリティ関数\r\n * このファイルには、アプリケーション全体で使用される汎用的な関数を含みます。\r\n */ /**\r\n * 日付文字列（yyyymmdd）をDateオブジェクトに変換する関数\r\n * @param dateStr - 変換する日付文字列（yyyymmdd形式）\r\n * @returns Dateオブジェクトまたはnull（無効な日付の場合）\r\n */ function $f9424a7ebcc0e1f6$export$6b862160d295c8e(dateStr) {\n    if (!dateStr || dateStr === '00000000') return null;\n    try {\n        const year = parseInt(dateStr.substring(0, 4), 10);\n        const month = parseInt(dateStr.substring(4, 6), 10) - 1; // 月は0から始まる\n        const day = parseInt(dateStr.substring(6, 8), 10);\n        const date = new Date(year, month, day);\n        // 有効な日付かチェック\n        if (isNaN(date.getTime())) return null;\n        return date;\n    } catch (error) {\n        console.error(`\\u{65E5}\\u{4ED8}\\u{306E}\\u{89E3}\\u{6790}\\u{4E2D}\\u{306B}\\u{30A8}\\u{30E9}\\u{30FC}\\u{304C}\\u{767A}\\u{751F}\\u{3057}\\u{307E}\\u{3057}\\u{305F}: ${dateStr} - ${error instanceof Error ? error.message : String(error)}`);\n        return null;\n    }\n}\nfunction $f9424a7ebcc0e1f6$export$b1f346a0d0b04f26(admissionStr, dischargeStr) {\n    const admissionDate = $f9424a7ebcc0e1f6$export$6b862160d295c8e(admissionStr);\n    const dischargeDate = $f9424a7ebcc0e1f6$export$6b862160d295c8e(dischargeStr);\n    if (!admissionDate || !dischargeDate) return null;\n    // ミリ秒数を日数に変換（1日 = 24 * 60 * 60 * 1000 ミリ秒）\n    // 入院日と退院日も期間に含めるため、計算結果に1を加える\n    const diffDays = Math.round((dischargeDate.getTime() - admissionDate.getTime()) / 86400000);\n    return diffDays + 1;\n}\nfunction $f9424a7ebcc0e1f6$export$3ae94a2503e890a1(dateStr, format = 'yyyymmdd') {\n    // 00000000の場合はそのまま返す\n    if (dateStr === '00000000') return dateStr;\n    // 日付オブジェクトに変換\n    const date = $f9424a7ebcc0e1f6$export$6b862160d295c8e(dateStr);\n    if (!date) return dateStr; // 変換できない場合は元の文字列を返す\n    // 年、月、日を取得\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1; // 月は0から始まるので+1\n    const day = date.getDate();\n    // 指定されたフォーマットに変換\n    if (format === 'yyyy/mm/dd') return `${year}/${month.toString().padStart(2, '0')}/${day.toString().padStart(2, '0')}`;\n    else return `${year}${month.toString().padStart(2, '0')}${day.toString().padStart(2, '0')}`;\n}\nfunction $f9424a7ebcc0e1f6$export$82f46aa4e6535a45(error) {\n    if (error instanceof Error) return error.message;\n    return String(error);\n}\n\n\n\nfunction $17747c2b7083ee11$export$17a9168246d97340(cases) {\n    // 全症例に対して適格性と理由を設定\n    const evaluatedCases = cases.map((c)=>{\n        try {\n            // 評価結果を格納するオブジェクトを作成（元のオブジェクトをコピー）\n            const evaluatedCase = {\n                ...c\n            };\n            // 1. 退院日が '00000000' でない（退院が確定している）\n            if (!c.discharge || c.discharge === '00000000') {\n                evaluatedCase.isEligible = false;\n                evaluatedCase.reason = (0, $952cec8ced8a46bd$export$b875acc5e1c1d7cd).UNDISCHARGED;\n                return evaluatedCase;\n            }\n            // 2. 対象手術等の実施（少なくとも1つの対象手術等が実施されている）\n            const targetProceduresFound = c.procedures.filter((p)=>(0, $952cec8ced8a46bd$export$bc8c9440750cf9cc).includes(p));\n            if (targetProceduresFound.length === 0) {\n                evaluatedCase.isEligible = false;\n                evaluatedCase.reason = (0, $952cec8ced8a46bd$export$b875acc5e1c1d7cd).NO_TARGET_PROCEDURE;\n                return evaluatedCase;\n            }\n            // 3. 入院期間が5日以内\n            const hospitalDays = (0, $f9424a7ebcc0e1f6$export$b1f346a0d0b04f26)(c.admission, c.discharge);\n            if (hospitalDays === null || hospitalDays > (0, $952cec8ced8a46bd$export$e682c072e4e56117)) {\n                evaluatedCase.isEligible = false;\n                evaluatedCase.reason = (0, $952cec8ced8a46bd$export$b875acc5e1c1d7cd).HOSPITAL_DAYS_EXCEEDED;\n                return evaluatedCase;\n            }\n            // 4. 入院期間中に対象手術等を2以上実施していないかチェック\n            // ただし、同一の対象手術等を複数回実施する場合は例外とする\n            if (targetProceduresFound.length > 1) {\n                // 対象手術等の種類数をカウント（重複を除外）\n                const uniqueTargetProcedures = new Set(targetProceduresFound);\n                if (uniqueTargetProcedures.size > 1) {\n                    evaluatedCase.isEligible = false;\n                    evaluatedCase.reason = (0, $952cec8ced8a46bd$export$b875acc5e1c1d7cd).MULTIPLE_TARGET_PROCEDURES;\n                    return evaluatedCase;\n                }\n            }\n            // 5. 入院期間中に対象手術等に加えて、他の手術を実施していないかチェック\n            // 手術コードは通常 '15' で始まるが、診療明細名称に「加算」が含まれるコードは手術ではないため除外\n            const surgeryProcedures = c.procedures.filter((p, index)=>{\n                // 対象手術等に含まれるコードは除外\n                if ((0, $952cec8ced8a46bd$export$bc8c9440750cf9cc).includes(p)) return false;\n                // '15'で始まるコードのみを対象\n                if (!p.startsWith('15')) return false;\n                // 診療明細名称に「加算」が含まれるコードは手術ではないため除外\n                if (c.procedureNames && c.procedureNames[index] && c.procedureNames[index].includes(\"\\u52A0\\u7B97\")) return false;\n                // 加算コードは通常、特定のパターンを持つ（例：150000490）\n                // 多くの加算コードは '1500' で始まり、その後に '00' が続く\n                if (p.startsWith('1500') && p.substring(4, 6) === '00') return false;\n                return true;\n            });\n            if (surgeryProcedures.length > 0) {\n                evaluatedCase.isEligible = false;\n                evaluatedCase.reason = (0, $952cec8ced8a46bd$export$b875acc5e1c1d7cd).OTHER_SURGERY;\n                return evaluatedCase;\n            }\n            // 6. 内視鏡的大腸ポリープ・粘膜切除術の特定加算チェック\n            // 内視鏡的大腸ポリープ・粘膜切除術を実施したかどうか\n            const hasColonoscopy = c.procedures.some((p)=>(0, $952cec8ced8a46bd$export$9abababf870cce56).includes(p));\n            // 特定加算が含まれているかどうか\n            const hasSpecialAddition = c.procedures.some((p)=>(0, $952cec8ced8a46bd$export$c2dd158f3483965f).includes(p));\n            // 内視鏡的大腸ポリープ術に特定加算がある場合は対象外\n            if (hasColonoscopy && hasSpecialAddition) {\n                evaluatedCase.isEligible = false;\n                evaluatedCase.reason = (0, $952cec8ced8a46bd$export$b875acc5e1c1d7cd).SPECIAL_ADDITION;\n                return evaluatedCase;\n            }\n            // すべての条件を満たす場合は短手３対象症例\n            evaluatedCase.isEligible = true;\n            // 実施された対象手術の名称を理由として設定\n            const procedureCode = targetProceduresFound[0]; // 最初の対象手術コード\n            evaluatedCase.reason = (0, $952cec8ced8a46bd$export$861aae5ae66b2524)[procedureCode] || \"\\u5BFE\\u8C61\\u624B\\u8853\\u7B49\";\n            return evaluatedCase;\n        } catch (error) {\n            console.error(`\\u{75C7}\\u{4F8B} ${c.id} \\u{306E}\\u{8A55}\\u{4FA1}\\u{4E2D}\\u{306B}\\u{30A8}\\u{30E9}\\u{30FC}\\u{304C}\\u{767A}\\u{751F}\\u{3057}\\u{307E}\\u{3057}\\u{305F}: ${error instanceof Error ? error.message : String(error)}`);\n            // エラーが発生した場合は該当しないと判断\n            return {\n                ...c,\n                isEligible: false,\n                reason: `\\u{8A55}\\u{4FA1}\\u{30A8}\\u{30E9}\\u{30FC}: ${error instanceof Error ? error.message : String(error)}`\n            };\n        }\n    });\n    // 修正: フィルタリングせず、全ての評価済み症例を返す\n    // フィルタリングは formatResults で行う\n    // ID順にソート\n    return evaluatedCases.sort((a, b)=>a.id.localeCompare(b.id));\n}\nfunction $17747c2b7083ee11$export$cee0a265a810f88b(cases, headerLine = (0, $952cec8ced8a46bd$export$4100e9622577bf55), settings) {\n    // 設定に基づいて出力する症例をフィルタリング\n    const filteredCases = settings.outputMode === 'allCases' ? cases : cases.filter((c)=>c.isEligible === true);\n    // 症例が存在しない場合\n    if (filteredCases.length === 0) return \"\\u8A72\\u5F53\\u3059\\u308B\\u75C7\\u4F8B\\u306F\\u3042\\u308A\\u307E\\u305B\\u3093\\u3002\";\n    // ヘッダー行を配列の最初の要素として追加\n    const lines = [\n        headerLine\n    ];\n    // 各症例のデータ行を追加\n    filteredCases.forEach((c)=>{\n        // 日付を指定されたフォーマットに変換\n        const admissionDate = (0, $f9424a7ebcc0e1f6$export$3ae94a2503e890a1)(c.admission, settings.dateFormat);\n        const dischargeDate = (0, $f9424a7ebcc0e1f6$export$3ae94a2503e890a1)(c.discharge, settings.dateFormat);\n        const line = `${c.id}\\t${admissionDate}\\t${dischargeDate}\\t${c.isEligible ? 'Yes' : 'No'}\\t${c.reason || ''}`;\n        lines.push(line);\n    });\n    // 行を改行文字で結合して返す\n    return lines.join('\\n');\n}\n\n\n\n/**\r\n * ファイル処理クラス\r\n * EFファイルの読み込みと処理を行うユーティリティ\r\n */ class $8acc7c30e37a5f1a$var$FileProcessor {\n    /**\r\n   * 複数のファイルを処理する\r\n   * @param files 処理対象のファイル配列\r\n   * @param settings 出力設定\r\n   * @returns 処理結果のプロミス\r\n   */ async processFiles(files, settings) {\n        // settings 引数を追加\n        try {\n            if (!files || files.length === 0) throw new Error(\"\\u30D5\\u30A1\\u30A4\\u30EB\\u304C\\u9078\\u629E\\u3055\\u308C\\u3066\\u3044\\u307E\\u305B\\u3093\");\n            // ファイルの内容を読み込む\n            const fileContents = [];\n            for (const file of files){\n                const content = await (0, $7a1670790cbbe4b0$export$7dc2912951b09f)(file);\n                fileContents.push(content);\n            }\n            // ファイルの内容を解析して症例データを統合\n            let allCases = [];\n            for (const content of fileContents){\n                const cases = (0, $d4b1decbb56d16ba$export$571ac2eb53ddaf2d)(content);\n                allCases = (0, $d4b1decbb56d16ba$export$b88fb33a849f1168)(allCases, cases);\n            }\n            // 判定処理を実行\n            const evaluatedCases = (0, $17747c2b7083ee11$export$17a9168246d97340)(allCases);\n            // 結果をフォーマット\n            const result = (0, $17747c2b7083ee11$export$cee0a265a810f88b)(evaluatedCases, (0, $952cec8ced8a46bd$export$4100e9622577bf55), settings); // settings を渡すように修正\n            return result;\n        } catch (error) {\n            console.error(\"\\u30D5\\u30A1\\u30A4\\u30EB\\u51E6\\u7406\\u30A8\\u30E9\\u30FC:\", error);\n            throw error;\n        }\n    }\n}\nconst $8acc7c30e37a5f1a$export$62de47a40c7b42b0 = new $8acc7c30e37a5f1a$var$FileProcessor();\n\n\n/**\r\n * アプリケーションクラス\r\n */ class $157295337300d7f0$var$Application {\n    /**\r\n   * アプリケーションクラスのコンストラクタ\r\n   */ constructor(){\n        this.loadingIndicator = null;\n        this.executeButton = null;\n        // インスタンスの作成\n        this.fileManagerInstance = (0, $e3e22f6c17ed805e$export$d45d33c808f51185).instance; // 既存のシングルトンパターンを利用\n        this.resultViewerInstance = new (0, $d5176f4c1bfaf4b6$export$81386075c4f5828b)(); // ResultViewer をインスタンス化\n    }\n    /**\r\n   * アプリケーションの初期化\r\n   */ init() {\n        // DOM要素の取得\n        this.loadingIndicator = document.getElementById('loadingIndicator');\n        this.executeButton = document.getElementById('executeButton');\n        // イベントリスナーの設定\n        this.setupEventListeners();\n        // ファイルクリア時のイベントリスナーを追加\n        document.addEventListener('filesClear', ()=>{\n        // ResultViewer の結果もクリアする (必要に応じて)\n        // this.resultViewerInstance.clearResult(); // clearResult メソッドがあれば呼び出す\n        });\n    }\n    /**\r\n   * イベントリスナーの設定\r\n   */ setupEventListeners() {\n        // 実行ボタンのイベント\n        if (this.executeButton) this.executeButton.addEventListener('click', ()=>{\n            this.processFiles();\n        });\n    // 他のイベントリスナーを設定...\n    // document.addEventListener('filesClear', () => { // init 内に移動\n    //   // ファイルクリア時の処理（ステップ更新は削除）\n    // });\n    }\n    /**\r\n   * ファイル処理の実行\r\n   */ async processFiles() {\n        try {\n            // ファイルが選択されているか確認\n            const selectedFiles = this.fileManagerInstance.getSelectedFiles();\n            if (selectedFiles.length === 0) {\n                this.handleError(new Error(\"\\u30D5\\u30A1\\u30A4\\u30EB\\u304C\\u9078\\u629E\\u3055\\u308C\\u3066\\u3044\\u307E\\u305B\\u3093\"), 'no-files', {\n                    recoveryAction: {\n                        message: \"\\u30D5\\u30A1\\u30A4\\u30EB\\u3092\\u9078\\u629E\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\",\n                        label: \"\\u30D5\\u30A1\\u30A4\\u30EB\\u9078\\u629E\",\n                        handler: ()=>{\n                            const fileInput = document.getElementById('fileInput');\n                            if (fileInput) fileInput.click();\n                        }\n                    }\n                });\n                return;\n            }\n            // 処理中表示\n            if (this.loadingIndicator) this.loadingIndicator.classList.add('active');\n            // ファイルの検証\n            const isValid = await this.fileManagerInstance.validateSelectedFiles();\n            if (!isValid) {\n                if (this.loadingIndicator) this.loadingIndicator.classList.remove('active');\n                // ステップ更新は削除\n                return;\n            }\n            // UIから出力設定を取得\n            const outputSettings = this.resultViewerInstance.getOutputSettings();\n            // 処理の実行 (設定を渡す)\n            const resultText = await (0, $8acc7c30e37a5f1a$export$62de47a40c7b42b0).processFiles(selectedFiles, outputSettings);\n            // 結果の表示\n            this.resultViewerInstance.displayResult(resultText);\n            // 成功通知\n            (0, $c338b0f983d437f5$export$6af13b7de7554010).showToast('success', \"\\u51E6\\u7406\\u5B8C\\u4E86\", \"\\u51E6\\u7406\\u304C\\u6B63\\u5E38\\u306B\\u5B8C\\u4E86\\u3057\\u307E\\u3057\\u305F\", 5000, 2);\n        } catch (error) {\n            this.handleError(error instanceof Error ? error : new Error(\"\\u4E0D\\u660E\\u306A\\u30A8\\u30E9\\u30FC\"), 'processing', {\n                recoveryAction: {\n                    message: \"\\u8A2D\\u5B9A\\u3092\\u5909\\u66F4\\u3057\\u3066\\u518D\\u8A66\\u884C\\u3057\\u307E\\u3059\\u304B\\uFF1F\",\n                    label: \"\\u518D\\u8A66\\u884C\",\n                    handler: ()=>{\n                        if (this.executeButton) this.executeButton.click();\n                    }\n                },\n                updateUI: ()=>{\n                // エラー時のUI更新（ステップ更新は削除）\n                }\n            });\n        } finally{\n            // 処理中表示を非表示\n            if (this.loadingIndicator) this.loadingIndicator.classList.remove('active');\n        }\n    }\n    /**\r\n   * エラーハンドリング\r\n   * @param error エラーオブジェクト\r\n   * @param context エラーコンテキスト\r\n   * @param options 追加オプション\r\n   */ handleError(error, context, options = {}) {\n        console.error(`\\u{30A8}\\u{30E9}\\u{30FC} (${context}):`, error);\n        // エラータイプに基づいて適切なメッセージと解決策を提供\n        let title = \"\\u30A8\\u30E9\\u30FC\\u304C\\u767A\\u751F\\u3057\\u307E\\u3057\\u305F\";\n        let message = error.message || \"\\u30A8\\u30E9\\u30FC\\u304C\\u767A\\u751F\\u3057\\u307E\\u3057\\u305F\";\n        let solution = '';\n        const priority = 4; // エラーは高い優先度\n        switch(context){\n            case 'processing':\n                title = \"\\u51E6\\u7406\\u30A8\\u30E9\\u30FC\";\n                if (error.message.includes(\"\\u30E1\\u30E2\\u30EA\")) solution = \"\\u30D5\\u30A1\\u30A4\\u30EB\\u30B5\\u30A4\\u30BA\\u304C\\u5927\\u304D\\u3059\\u304E\\u308B\\u53EF\\u80FD\\u6027\\u304C\\u3042\\u308A\\u307E\\u3059\\u3002\\u5C0F\\u3055\\u306A\\u30D5\\u30A1\\u30A4\\u30EB\\u306B\\u5206\\u5272\\u3057\\u3066\\u51E6\\u7406\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\";\n                else solution = \"\\u5165\\u529B\\u30C7\\u30FC\\u30BF\\u3092\\u78BA\\u8A8D\\u3057\\u3001\\u518D\\u5EA6\\u5B9F\\u884C\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\";\n                break;\n            case 'no-files':\n                title = \"\\u30D5\\u30A1\\u30A4\\u30EB\\u672A\\u9078\\u629E\";\n                message = \"\\u30D5\\u30A1\\u30A4\\u30EB\\u304C\\u9078\\u629E\\u3055\\u308C\\u3066\\u3044\\u307E\\u305B\\u3093\";\n                solution = \"\\u30D5\\u30A1\\u30A4\\u30EB\\u3092\\u9078\\u629E\\u3057\\u3066\\u304B\\u3089\\u51E6\\u7406\\u3092\\u5B9F\\u884C\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\";\n                break;\n            default:\n                solution = \"\\u554F\\u984C\\u304C\\u89E3\\u6C7A\\u3057\\u306A\\u3044\\u5834\\u5408\\u306F\\u3001\\u30DA\\u30FC\\u30B8\\u3092\\u518D\\u8AAD\\u307F\\u8FBC\\u307F\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\";\n        }\n        // 解決策がある場合はメッセージに追加\n        const fullMessage = solution ? `${message}<br><span class=\"error-solution\">\\u{89E3}\\u{6C7A}\\u{7B56}: ${solution}</span>` : message;\n        // 通知を表示\n        (0, $c338b0f983d437f5$export$6af13b7de7554010).showToast('error', title, fullMessage, 8000, priority);\n        // エラー回復のためのアクションを提供\n        if (options.recoveryAction && options.recoveryAction.message && options.recoveryAction.label && options.recoveryAction.handler) {\n            const recoveryAction = {\n                message: options.recoveryAction.message,\n                label: options.recoveryAction.label,\n                handler: options.recoveryAction.handler\n            };\n            setTimeout(()=>{\n                (0, $c338b0f983d437f5$export$6af13b7de7554010).showRecoveryToast(recoveryAction);\n            }, 1000);\n        }\n        // エラー状態をUIに反映\n        if (options.updateUI) options.updateUI();\n    }\n}\n// DOMContentLoaded イベントで初期化\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    try {\n        const app = new $157295337300d7f0$var$Application();\n        app.init();\n    } catch (error) {\n        console.error(\"\\u521D\\u671F\\u5316\\u30A8\\u30E9\\u30FC:\", error);\n        // エラーメッセージを画面に表示\n        const errorDiv = document.createElement('div');\n        errorDiv.className = 'initialization-error';\n        errorDiv.textContent = \"\\u521D\\u671F\\u5316\\u4E2D\\u306B\\u30A8\\u30E9\\u30FC\\u304C\\u767A\\u751F\\u3057\\u307E\\u3057\\u305F\\u3002\\u30DA\\u30FC\\u30B8\\u3092\\u518D\\u8AAD\\u307F\\u8FBC\\u307F\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\";\n        document.body.prepend(errorDiv);\n    }\n});\n\n})();\n//# sourceMappingURL=main.js.map\n","/**\r\n * 短期滞在手術等基本料３判定プログラム - メインアプリケーション\r\n *\r\n * このファイルは、アプリケーションのエントリーポイントです。\r\n * 各コンポーネントの初期化と連携を行います。\r\n */\r\nimport { FileManager, fileManager } from '../ui/components/file-manager'; // FileManager クラスもインポート\r\nimport { ResultViewer } from '../ui/components/result-viewer'; // ResultViewer クラスをインポート (グローバルインスタンスは削除)\r\nimport { notificationSystem } from '../ui/components/notification';\r\nimport { fileProcessor } from '../core/file-processor';\r\nimport { ErrorHandlerOptions } from '../core/common/types'; // types.d.ts 削除に伴いパス変更\r\n\r\n/**\r\n * アプリケーションクラス\r\n */\r\nclass Application {\r\n  private loadingIndicator: HTMLElement | null = null;\r\n  private executeButton: HTMLButtonElement | null = null;\r\n  private fileManagerInstance: FileManager; // 型を明示\r\n  private resultViewerInstance: ResultViewer; // ResultViewer インスタンスを保持\r\n\r\n  /**\r\n   * アプリケーションクラスのコンストラクタ\r\n   */\r\n  constructor() {\r\n    // インスタンスの作成\r\n    this.fileManagerInstance = fileManager.instance; // 既存のシングルトンパターンを利用\r\n    this.resultViewerInstance = new ResultViewer(); // ResultViewer をインスタンス化\r\n  }\r\n\r\n  /**\r\n   * アプリケーションの初期化\r\n   */\r\n  public init(): void {\r\n    // DOM要素の取得\r\n    this.loadingIndicator = document.getElementById('loadingIndicator');\r\n    this.executeButton = document.getElementById('executeButton') as HTMLButtonElement;\r\n\r\n    // イベントリスナーの設定\r\n    this.setupEventListeners();\r\n\r\n    // ファイルクリア時のイベントリスナーを追加\r\n    document.addEventListener('filesClear', () => {\r\n      // ResultViewer の結果もクリアする (必要に応じて)\r\n      // this.resultViewerInstance.clearResult(); // clearResult メソッドがあれば呼び出す\r\n    });\r\n  }\r\n\r\n  /**\r\n   * イベントリスナーの設定\r\n   */\r\n  private setupEventListeners(): void {\r\n    // 実行ボタンのイベント\r\n    if (this.executeButton) {\r\n      this.executeButton.addEventListener('click', () => {\r\n        this.processFiles();\r\n      });\r\n    }\r\n\r\n    // 他のイベントリスナーを設定...\r\n    // document.addEventListener('filesClear', () => { // init 内に移動\r\n    //   // ファイルクリア時の処理（ステップ更新は削除）\r\n    // });\r\n  }\r\n\r\n  /**\r\n   * ファイル処理の実行\r\n   */\r\n  private async processFiles(): Promise<void> {\r\n    try {\r\n      // ファイルが選択されているか確認\r\n      const selectedFiles = this.fileManagerInstance.getSelectedFiles();\r\n      if (selectedFiles.length === 0) {\r\n        this.handleError(new Error('ファイルが選択されていません'), 'no-files', {\r\n          recoveryAction: {\r\n            message: 'ファイルを選択してください',\r\n            label: 'ファイル選択',\r\n            handler: () => {\r\n              const fileInput = document.getElementById('fileInput');\r\n              if (fileInput) fileInput.click();\r\n            },\r\n          },\r\n        });\r\n        return;\r\n      }\r\n\r\n      // 処理中表示\r\n      if (this.loadingIndicator) {\r\n        this.loadingIndicator.classList.add('active');\r\n      }\r\n\r\n      // ファイルの検証\r\n      const isValid = await this.fileManagerInstance.validateSelectedFiles();\r\n      if (!isValid) {\r\n        if (this.loadingIndicator) {\r\n          this.loadingIndicator.classList.remove('active');\r\n        }\r\n        // ステップ更新は削除\r\n        return;\r\n      }\r\n\r\n      // UIから出力設定を取得\r\n      const outputSettings = this.resultViewerInstance.getOutputSettings();\r\n\r\n      // 処理の実行 (設定を渡す)\r\n      const resultText = await fileProcessor.processFiles(selectedFiles, outputSettings);\r\n\r\n      // 結果の表示\r\n      this.resultViewerInstance.displayResult(resultText);\r\n\r\n      // 成功通知\r\n      notificationSystem.showToast('success', '処理完了', '処理が正常に完了しました', 5000, 2);\r\n    } catch (error) {\r\n      this.handleError(error instanceof Error ? error : new Error('不明なエラー'), 'processing', {\r\n        recoveryAction: {\r\n          message: '設定を変更して再試行しますか？',\r\n          label: '再試行',\r\n          handler: () => {\r\n            if (this.executeButton) this.executeButton.click();\r\n          },\r\n        },\r\n        updateUI: () => {\r\n          // エラー時のUI更新（ステップ更新は削除）\r\n        },\r\n      });\r\n    } finally {\r\n      // 処理中表示を非表示\r\n      if (this.loadingIndicator) {\r\n        this.loadingIndicator.classList.remove('active');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * エラーハンドリング\r\n   * @param error エラーオブジェクト\r\n   * @param context エラーコンテキスト\r\n   * @param options 追加オプション\r\n   */\r\n  private handleError(error: Error, context: string, options: ErrorHandlerOptions = {}): void {\r\n    console.error(`エラー (${context}):`, error);\r\n\r\n    // エラータイプに基づいて適切なメッセージと解決策を提供\r\n    let title = 'エラーが発生しました';\r\n    let message = error.message || 'エラーが発生しました';\r\n    let solution = '';\r\n    const priority = 4; // エラーは高い優先度\r\n\r\n    switch (context) {\r\n      case 'processing':\r\n        title = '処理エラー';\r\n        if (error.message.includes('メモリ')) {\r\n          solution =\r\n            'ファイルサイズが大きすぎる可能性があります。小さなファイルに分割して処理してください';\r\n        } else {\r\n          solution = '入力データを確認し、再度実行してください';\r\n        }\r\n        break;\r\n\r\n      case 'no-files':\r\n        title = 'ファイル未選択';\r\n        message = 'ファイルが選択されていません';\r\n        solution = 'ファイルを選択してから処理を実行してください';\r\n        break;\r\n\r\n      default:\r\n        solution = '問題が解決しない場合は、ページを再読み込みしてください';\r\n    }\r\n\r\n    // 解決策がある場合はメッセージに追加\r\n    const fullMessage = solution\r\n      ? `${message}<br><span class=\"error-solution\">解決策: ${solution}</span>`\r\n      : message;\r\n\r\n    // 通知を表示\r\n    notificationSystem.showToast('error', title, fullMessage, 8000, priority);\r\n\r\n    // エラー回復のためのアクションを提供\r\n    if (\r\n      options.recoveryAction &&\r\n      options.recoveryAction.message &&\r\n      options.recoveryAction.label &&\r\n      options.recoveryAction.handler\r\n    ) {\r\n      const recoveryAction = {\r\n        message: options.recoveryAction.message,\r\n        label: options.recoveryAction.label,\r\n        handler: options.recoveryAction.handler,\r\n      };\r\n\r\n      setTimeout(() => {\r\n        notificationSystem.showRecoveryToast(recoveryAction);\r\n      }, 1000);\r\n    }\r\n\r\n    // エラー状態をUIに反映\r\n    if (options.updateUI) {\r\n      options.updateUI();\r\n    }\r\n  }\r\n}\r\n\r\n// DOMContentLoaded イベントで初期化\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  try {\r\n    const app = new Application();\r\n    app.init();\r\n  } catch (error) {\r\n    console.error('初期化エラー:', error);\r\n    // エラーメッセージを画面に表示\r\n    const errorDiv = document.createElement('div');\r\n    errorDiv.className = 'initialization-error';\r\n    errorDiv.textContent = '初期化中にエラーが発生しました。ページを再読み込みしてください。';\r\n    document.body.prepend(errorDiv);\r\n  }\r\n});\r\n","import { FileValidationResult } from '../../core/file-processor'; // Import from file-processor\r\nimport { ErrorHandlerOptions } from '../../core/common/types'; // Import from common/types\r\nimport { notificationSystem } from './notification';\r\nimport { validateFiles } from '../../core/validator';\r\n\r\n/**\r\n * ファイル管理クラス\r\n * ファイルの選択、表示、管理を行うコンポーネント\r\n */\r\nexport class FileManager {\r\n  private fileInput: HTMLInputElement;\r\n  private fileInfoArea: HTMLElement;\r\n  private clearButton: HTMLButtonElement;\r\n  private executeButton: HTMLButtonElement;\r\n  private dropArea: HTMLElement;\r\n  private selectedFiles: File[] = [];\r\n  private validFiles: number = 0;\r\n\r\n  /**\r\n   * ファイル管理クラスのコンストラクタ\r\n   */\r\n  constructor() {\r\n    // DOM要素の取得\r\n    this.fileInput = document.getElementById('fileInput') as HTMLInputElement;\r\n    this.fileInfoArea = document.getElementById('fileInfoArea') as HTMLElement;\r\n    this.clearButton = document.getElementById('clearButton') as HTMLButtonElement;\r\n    this.executeButton = document.getElementById('executeButton') as HTMLButtonElement;\r\n    this.dropArea = document.getElementById('dropArea') as HTMLElement;\r\n\r\n    if (\r\n      !this.fileInput ||\r\n      !this.fileInfoArea ||\r\n      !this.clearButton ||\r\n      !this.executeButton ||\r\n      !this.dropArea\r\n    ) {\r\n      throw new Error('必要なDOM要素が見つかりません');\r\n    }\r\n\r\n    this.setupEventListeners();\r\n  }\r\n\r\n  /**\r\n   * イベントリスナーのセットアップ\r\n   */\r\n  private setupEventListeners(): void {\r\n    // ファイル選択ボタン\r\n    const fileSelectButton = document.getElementById('fileSelectButton');\r\n    if (fileSelectButton) {\r\n      fileSelectButton.addEventListener('click', (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.fileInput.click();\r\n      });\r\n    }\r\n\r\n    // ファイル選択時の処理\r\n    this.fileInput.addEventListener('change', () => {\r\n      this.processNewFiles(Array.from(this.fileInput.files || []));\r\n    });\r\n\r\n    // ドラッグ&ドロップ処理\r\n    this.dropArea.addEventListener('dragover', (e) => this.handleDragOver(e)); // Use public method\r\n    this.dropArea.addEventListener('dragleave', (e) => this.handleDragLeave(e)); // Use public method\r\n    this.dropArea.addEventListener('drop', (e) => this.handleDrop(e)); // Use public method\r\n\r\n    // キーボード操作のサポート\r\n    this.dropArea.addEventListener('keydown', (e) => {\r\n      // Enterキーまたはスペースキーでファイル選択ダイアログを開く\r\n      if (e.key === 'Enter' || e.key === ' ') {\r\n        e.preventDefault();\r\n        this.fileInput.click();\r\n      }\r\n    });\r\n\r\n    // ドロップエリア全体をクリック可能に\r\n    this.dropArea.addEventListener('click', (e) => {\r\n      // buttonの場合は、buttonのイベントに任せる\r\n      if ((e.target as HTMLElement).tagName !== 'BUTTON') {\r\n        this.fileInput.click();\r\n      }\r\n    });\r\n\r\n    // クリアボタンの処理\r\n    this.clearButton.addEventListener('click', () => {\r\n      this.clearFiles();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * ドラッグオーバーイベントのハンドラ\r\n   * @param event ドラッグイベント\r\n   */\r\n  public handleDragOver(event: DragEvent): void {\r\n    // Changed to public\r\n    event.preventDefault(); // デフォルトの処理をキャンセル\r\n    this.dropArea.classList.add('drag-over');\r\n  }\r\n\r\n  /**\r\n   * ドラッグリーブイベントのハンドラ\r\n   * @param event ドラッグイベント\r\n   */\r\n  public handleDragLeave(event: DragEvent): void {\r\n    // Changed to public\r\n    event.preventDefault();\r\n    this.dropArea.classList.remove('drag-over');\r\n  }\r\n\r\n  /**\r\n   * ドロップイベントのハンドラ\r\n   * @param event ドラッグイベント\r\n   */\r\n  public handleDrop(event: DragEvent): void {\r\n    // Changed to public\r\n    event.preventDefault();\r\n    this.dropArea.classList.remove('drag-over');\r\n\r\n    if (event.dataTransfer && event.dataTransfer.files.length > 0) {\r\n      // ドロップされたファイルを処理\r\n      this.processNewFiles(Array.from(event.dataTransfer.files));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 新しく選択されたファイルを処理する\r\n   * @param files 処理対象のファイル配列\r\n   */\r\n  public async processNewFiles(files: File[]): Promise<void> {\r\n    // async と Promise<void> を追加\r\n    // テキストファイルのみをフィルタリング\r\n    const textFiles = Array.from(files).filter(\r\n      (file) => file.type === 'text/plain' || file.name.endsWith('.txt'),\r\n    );\r\n\r\n    // テキストファイル以外が含まれていた場合\r\n    if (textFiles.length < files.length) {\r\n      this.handleError(new Error('テキストファイル以外が含まれています'), 'file-format');\r\n      return;\r\n    }\r\n\r\n    // 既に追加されているファイルと重複するものを確認\r\n    const existingFileNames = Array.from(this.selectedFiles).map((f) => f.name);\r\n    const newFiles = textFiles.filter((file) => !existingFileNames.includes(file.name));\r\n    const duplicateCount = textFiles.length - newFiles.length;\r\n\r\n    // 新しいファイルを追加\r\n    newFiles.forEach((file) => this.selectedFiles.push(file));\r\n\r\n    // ファイル情報を更新\r\n    this.updateFileInfo();\r\n\r\n    // 結果をユーザーに通知\r\n    if (newFiles.length === 0 && textFiles.length > 0) {\r\n      // Check if only duplicates were added\r\n      this.handleError(new Error('すべてのファイルが既に追加されています'), 'file-duplicate', {\r\n        recoveryAction: {\r\n          message: '既存のファイルをクリアして新しいファイルを追加しますか？',\r\n          label: 'クリアして追加',\r\n          handler: () => {\r\n            this.selectedFiles = [...textFiles]; // Keep only the newly added (duplicate) files after clearing\r\n            this.updateFileInfo();\r\n            notificationSystem.showToast(\r\n              'success',\r\n              'ファイル更新完了',\r\n              `${textFiles.length}ファイルを追加しました`,\r\n            );\r\n            this.validateSelectedFiles(); // Re-validate after clearing and adding\r\n          },\r\n        },\r\n      });\r\n    } else if (duplicateCount > 0) {\r\n      notificationSystem.showToast(\r\n        'warning',\r\n        'ファイル重複',\r\n        `${newFiles.length}ファイルを追加しました (${duplicateCount}ファイルは重複)`, // Show count of actually added files\r\n        5000,\r\n        3,\r\n      );\r\n    } else if (newFiles.length > 0) {\r\n      // Only show success if new files were actually added\r\n      notificationSystem.showToast(\r\n        'success',\r\n        'ファイル追加完了',\r\n        `${newFiles.length}ファイルを追加しました`,\r\n        5000,\r\n        2,\r\n      );\r\n    }\r\n\r\n    // 新しいファイルがある場合、または重複のみでもファイルが選択されている場合は検証を実行\r\n    if (newFiles.length > 0 || this.selectedFiles.length > 0) {\r\n      await this.validateSelectedFiles(); // await を追加\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 選択されたファイルをクリアする\r\n   */\r\n  public clearFiles(): void {\r\n    // 選択されたファイルをクリア\r\n    this.selectedFiles = [];\r\n    this.fileInput.value = '';\r\n    this.validFiles = 0;\r\n\r\n    // ファイル情報表示を更新\r\n    this.updateFileInfo();\r\n\r\n    // イベント通知\r\n    const event = new CustomEvent('filesClear');\r\n    document.dispatchEvent(event);\r\n\r\n    notificationSystem.showToast('info', 'クリア完了', 'ファイル選択をクリアしました');\r\n  }\r\n\r\n  /**\r\n   * 選択されたファイルを検証する\r\n   */\r\n  public async validateSelectedFiles(): Promise<boolean> {\r\n    if (this.selectedFiles.length === 0) {\r\n      this.updateFileInfo(); // Ensure UI reflects no files selected\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      // 外部のvalidateFilesモジュールを使用\r\n      const results = await validateFiles(this.selectedFiles);\r\n      this.updateValidationUI(results);\r\n\r\n      // 有効なファイル数を計算（型情報を明示的に指定）\r\n      this.validFiles = results.filter((result: FileValidationResult) => result.isValid).length;\r\n\r\n      // 実行ボタンの有効/無効を更新\r\n      this.executeButton.disabled = this.validFiles === 0;\r\n\r\n      return this.validFiles > 0;\r\n    } catch (error) {\r\n      this.handleError(\r\n        error instanceof Error ? error : new Error('不明なエラー'),\r\n        'file-validation',\r\n      );\r\n      this.executeButton.disabled = true; // Disable execute button on validation error\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 検証結果をUIに反映する\r\n   * @param results 検証結果の配列\r\n   */\r\n  private updateValidationUI(results: FileValidationResult[]): void {\r\n    // ファイル情報UIを更新\r\n    this.updateFileInfo(results);\r\n  }\r\n\r\n  /**\r\n   * ファイル情報表示を更新する\r\n   * @param validationResults 検証結果があれば反映\r\n   */\r\n  private updateFileInfo(validationResults?: FileValidationResult[]): void {\r\n    // ファイルが選択されているか確認\r\n    if (this.selectedFiles.length === 0) {\r\n      this.fileInfoArea.innerHTML = '<p class=\"no-file-message\">ファイルが選択されていません</p>';\r\n      this.clearButton.disabled = true;\r\n      this.executeButton.disabled = true;\r\n      return;\r\n    }\r\n\r\n    // ファイルアイテムのHTMLを生成\r\n    let html = '';\r\n\r\n    this.selectedFiles.forEach((file) => {\r\n      // 検証結果を探す\r\n      type FileStatus = {\r\n        status: string;\r\n        messages: Array<{ type: string; text: string }>;\r\n      };\r\n      let fileStatus: FileStatus = { status: 'pending', messages: [] };\r\n\r\n      if (validationResults) {\r\n        const result = validationResults.find((r) => r.file === file);\r\n        if (result) {\r\n          fileStatus = {\r\n            status: result.isValid ? (result.warnings.length > 0 ? 'warning' : 'valid') : 'error',\r\n            messages: [\r\n              ...result.errors.map((msg: string) => ({ type: 'error', text: msg })), // Add string type to msg\r\n              ...result.warnings.map((msg: string) => ({ type: 'warning', text: msg })), // Add string type to msg\r\n            ],\r\n          };\r\n        }\r\n      }\r\n\r\n      let statusClass = '';\r\n      let statusText = '';\r\n\r\n      switch (fileStatus.status) {\r\n        case 'valid':\r\n          statusClass = 'status-valid';\r\n          statusText = '有効';\r\n          break;\r\n        case 'warning':\r\n          statusClass = 'status-warning';\r\n          statusText = '警告';\r\n          break;\r\n        case 'error':\r\n          statusClass = 'status-error';\r\n          statusText = 'エラー';\r\n          break;\r\n        default:\r\n          statusClass = '';\r\n          statusText = '検証中...';\r\n      }\r\n\r\n      html += `\r\n        <div class=\"file-item\">\r\n          <div class=\"file-icon\">📄</div>\r\n          <div class=\"file-name\">${file.name}</div>\r\n          <div class=\"file-status ${statusClass}\">${statusText}</div>\r\n        `;\r\n\r\n      // バリデーションメッセージがある場合は表示\r\n      if (fileStatus.messages && fileStatus.messages.length > 0) {\r\n        html += '<div class=\"validation-feedback\">';\r\n        fileStatus.messages.forEach((msg: { type: string; text: string }) => {\r\n          let icon = '';\r\n          switch (msg.type) {\r\n            case 'error':\r\n              icon = '❌';\r\n              break;\r\n            case 'warning':\r\n              icon = '⚠️';\r\n              break;\r\n            case 'info':\r\n              icon = 'ℹ️';\r\n              break;\r\n          }\r\n          html += `\r\n            <div class=\"validation-message ${msg.type}\">\r\n              <span class=\"validation-icon\">${icon}</span>\r\n              <span class=\"validation-text\">${msg.text}</span>\r\n            </div>\r\n          `;\r\n        });\r\n        html += '</div>';\r\n      } else if (fileStatus.status === 'valid') {\r\n        html += `\r\n          <div class=\"validation-feedback\">\r\n            <div class=\"validation-message success\">\r\n              <span class=\"validation-icon\">✅</span>\r\n              <span class=\"validation-text\">ファイル形式は有効です</span>\r\n            </div>\r\n          </div>\r\n        `;\r\n      }\r\n\r\n      html += '</div>'; // file-item end\r\n    });\r\n\r\n    // HTMLを適用\r\n    this.fileInfoArea.innerHTML = html;\r\n    this.clearButton.disabled = false;\r\n    // Execute button state is handled by validateSelectedFiles\r\n  }\r\n\r\n  /**\r\n   * エラーを処理する\r\n   * @param error エラーオブジェクト\r\n   * @param context エラーが発生したコンテキスト\r\n   * @param options 追加オプション\r\n   */\r\n  private handleError(error: Error, context: string, options: ErrorHandlerOptions = {}): void {\r\n    console.error(`エラー (${context}):`, error);\r\n\r\n    // エラータイプに基づいて適切なメッセージと解決策を提供\r\n    let title = 'エラーが発生しました';\r\n    const message = error.message || 'エラーが発生しました';\r\n    let solution = '';\r\n    const priority = 4; // エラーは高い優先度\r\n\r\n    switch (context) {\r\n      case 'file-format':\r\n        title = 'ファイル形式エラー';\r\n        solution = 'テキストファイル(.txt)のみ追加できます。ファイル形式を確認してください';\r\n        break;\r\n\r\n      case 'file-validation':\r\n        title = 'ファイル検証エラー';\r\n        solution = '正しい形式のEF統合ファイルであることを確認してください';\r\n        break;\r\n\r\n      case 'file-duplicate':\r\n        title = 'ファイル重複';\r\n        solution = '別のファイルを選択するか、既存のファイルをクリアしてください';\r\n        break;\r\n\r\n      default:\r\n        solution = '問題が解決しない場合は、ページを再読み込みしてください';\r\n    }\r\n\r\n    // 解決策がある場合はメッセージに追加\r\n    const fullMessage = solution\r\n      ? `${message}<br><span class=\"error-solution\">解決策: ${solution}</span>`\r\n      : message;\r\n\r\n    // 通知を表示\r\n    notificationSystem.showToast('error', title, fullMessage, 8000, priority);\r\n\r\n    // エラー回復のためのアクションを提供\r\n    if (\r\n      options.recoveryAction &&\r\n      options.recoveryAction.message &&\r\n      options.recoveryAction.label &&\r\n      options.recoveryAction.handler\r\n    ) {\r\n      const recoveryAction = {\r\n        message: options.recoveryAction.message,\r\n        label: options.recoveryAction.label,\r\n        handler: options.recoveryAction.handler,\r\n      };\r\n\r\n      setTimeout(() => {\r\n        notificationSystem.showRecoveryToast(recoveryAction);\r\n      }, 1000);\r\n    }\r\n\r\n    // エラー状態をUIに反映\r\n    if (options.updateUI) {\r\n      options.updateUI();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 選択されたファイルを取得\r\n   * @returns 選択されたファイル配列\r\n   */\r\n  public getSelectedFiles(): File[] {\r\n    return this.selectedFiles;\r\n  }\r\n\r\n  /**\r\n   * 有効なファイル数を取得\r\n   * @returns 有効なファイル数\r\n   */\r\n  public getValidFileCount(): number {\r\n    return this.validFiles;\r\n  }\r\n}\r\n\r\n// グローバルでアクセス可能なインスタンスを作成\r\nlet fileManagerInstance: FileManager | null = null;\r\n\r\n// インスタンスを取得または作成する関数\r\n/**\r\n * インスタンスを取得または作成する関数\r\n * @returns FileManagerのインスタンス\r\n */\r\nexport function getFileManager(): FileManager {\r\n  if (!fileManagerInstance) {\r\n    // DOMが準備できているか確認\r\n    if (document.readyState === 'loading') {\r\n      throw new Error('DOM is not ready. Call this function after DOMContentLoaded');\r\n    }\r\n    fileManagerInstance = new FileManager();\r\n  }\r\n  return fileManagerInstance;\r\n}\r\n\r\n// 既存のexport文を削除し、新しい初期化方法を使用\r\nexport const fileManager = {\r\n  get instance(): FileManager {\r\n    // 戻り値の型を追加\r\n    return getFileManager();\r\n  },\r\n};\r\n","// トースト通知型\r\nexport interface ToastData {\r\n  id: string;\r\n  type: 'success' | 'warning' | 'error' | 'info';\r\n  title: string;\r\n  message: string;\r\n  timestamp: number;\r\n  priority: number;\r\n  duration: number;\r\n  element?: HTMLElement;\r\n}\r\n\r\n// タイプ優先度マップ (削除予定だが、他の箇所で使われている可能性を考慮し一旦残す)\r\nexport interface TypePriorityMap {\r\n  [key: string]: number;\r\n  error: number;\r\n  warning: number;\r\n  info: number;\r\n  success: number;\r\n}\r\n\r\n/**\r\n * 通知システム\r\n * ユーザーへの通知表示を管理するモジュール\r\n */\r\nexport class NotificationSystem {\r\n  private toastContainer: HTMLElement;\r\n  private activeToasts: ToastData[] = [];\r\n  private toastHistory: Partial<ToastData>[] = [];\r\n  private readonly MAX_VISIBLE_TOASTS = 3;\r\n  private readonly MAX_HISTORY_ITEMS = 10;\r\n\r\n  /**\r\n   * 通知システムのコンストラクタ\r\n   * @param containerId 通知コンテナのID\r\n   */\r\n  constructor(containerId: string = 'toastContainer') {\r\n    this.toastContainer =\r\n      document.getElementById(containerId) || this.createToastContainer(containerId);\r\n    this.setupHistoryButton();\r\n  }\r\n\r\n  /**\r\n   * トースト通知コンテナを作成\r\n   * @param containerId コンテナID\r\n   * @returns 作成されたコンテナ要素\r\n   */\r\n  private createToastContainer(containerId: string): HTMLElement {\r\n    const container = document.createElement('div');\r\n    container.id = containerId;\r\n    container.className = 'toast-container';\r\n    document.body.appendChild(container);\r\n    return container;\r\n  }\r\n\r\n  /**\r\n   * 履歴ボタンの初期設定\r\n   */\r\n  private setupHistoryButton(): void {\r\n    let historyButton = document.getElementById('notificationHistoryButton');\r\n    if (!historyButton) {\r\n      historyButton = document.createElement('button');\r\n      historyButton.id = 'notificationHistoryButton';\r\n      historyButton.className = 'notification-history-button hidden';\r\n      historyButton.setAttribute('aria-label', '通知履歴を表示');\r\n      historyButton.innerHTML = '<span class=\"history-icon\">🔔</span>';\r\n      document.body.appendChild(historyButton);\r\n\r\n      historyButton.addEventListener('click', () => this.showNotificationHistory());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * トースト通知を表示\r\n   * @param type 通知タイプ（success, warning, error, info）\r\n   * @param title 通知タイトル\r\n   * @param message 通知メッセージ\r\n   * @param duration 表示時間（ミリ秒）\r\n   * @param priority 優先度（1-5、5が最高）\r\n   */\r\n  public showToast(\r\n    type: 'success' | 'warning' | 'error' | 'info',\r\n    title: string,\r\n    message: string,\r\n    duration: number = 5000,\r\n    priority: number = 3,\r\n  ): void {\r\n    // 通知オブジェクトを作成\r\n    const timestamp = Date.now();\r\n    const toastId = 'toast-' + timestamp;\r\n    const toastData: ToastData = {\r\n      id: toastId,\r\n      type,\r\n      title,\r\n      message,\r\n      timestamp,\r\n      priority,\r\n      duration,\r\n    };\r\n\r\n    // 通知履歴に追加\r\n    this.addToastToHistory(toastData);\r\n\r\n    // 通知を表示キューに追加\r\n    this.activeToasts.push(toastData);\r\n\r\n    // 優先度順にソート（優先度が高く、新しいものが上位）\r\n    this.activeToasts.sort((a, b) => {\r\n      if (a.priority !== b.priority) {\r\n        return b.priority - a.priority;\r\n      }\r\n      return b.timestamp - a.timestamp;\r\n    });\r\n\r\n    // 表示数を制限し、アクティブリストを更新\r\n    this.manageActiveToasts();\r\n\r\n    // このトーストが表示対象として残っている場合のみレンダリング\r\n    if (this.activeToasts.some((toast) => toast.id === toastId)) {\r\n      this.renderToast(toastData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 通知履歴に追加\r\n   * @param toastData 通知データ\r\n   */\r\n  private addToastToHistory(toastData: ToastData): void {\r\n    // 履歴に追加\r\n    this.toastHistory.unshift({\r\n      type: toastData.type,\r\n      title: toastData.title,\r\n      message: toastData.message,\r\n      timestamp: toastData.timestamp,\r\n    });\r\n\r\n    // 履歴の最大数を制限\r\n    if (this.toastHistory.length > this.MAX_HISTORY_ITEMS) {\r\n      this.toastHistory = this.toastHistory.slice(0, this.MAX_HISTORY_ITEMS);\r\n    }\r\n\r\n    // 履歴ボタンを更新\r\n    this.updateHistoryButton();\r\n  }\r\n\r\n  /**\r\n   * 履歴ボタンを更新\r\n   */\r\n  private updateHistoryButton(): void {\r\n    const historyButton = document.getElementById('notificationHistoryButton');\r\n    if (historyButton && this.toastHistory.length > 0) {\r\n      historyButton.classList.remove('hidden');\r\n      historyButton.setAttribute('data-count', this.toastHistory.length.toString());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * アクティブな通知を管理（表示上限のみ）\r\n   */\r\n  private manageActiveToasts(): void {\r\n    // 常に優先度と時間でソートしておく\r\n    this.activeToasts.sort((a, b) => {\r\n      if (a.priority !== b.priority) {\r\n        return b.priority - a.priority; // 優先度高い順\r\n      }\r\n      return b.timestamp - a.timestamp; // 新しい順\r\n    });\r\n\r\n    // 表示上限を超えている場合\r\n    if (this.activeToasts.length > this.MAX_VISIBLE_TOASTS) {\r\n      // 表示されるトーストと隠れるトーストに分ける\r\n      const visibleToasts = this.activeToasts.slice(0, this.MAX_VISIBLE_TOASTS);\r\n      const hiddenToasts = this.activeToasts.slice(this.MAX_VISIBLE_TOASTS);\r\n\r\n      // 隠れるトーストの要素をDOMから削除\r\n      hiddenToasts.forEach((toast) => {\r\n        if (toast.element) {\r\n          this.removeToastElement(toast.id);\r\n        }\r\n      });\r\n\r\n      // アクティブリストを表示されるものだけに更新\r\n      this.activeToasts = visibleToasts;\r\n    }\r\n    // 集約通知関連のロジックは削除\r\n  }\r\n\r\n  // 不要になった getHighestPriorityType メソッドを削除\r\n\r\n  // 不要になった showAggregateToast メソッドを削除\r\n\r\n  /**\r\n   * 通知履歴を表示\r\n   */\r\n  public showNotificationHistory(): void {\r\n    // 既存の履歴モーダルを削除\r\n    const existingModal = document.getElementById('notificationHistoryModal');\r\n    if (existingModal) {\r\n      existingModal.parentNode?.removeChild(existingModal);\r\n    }\r\n\r\n    // 履歴モーダルを作成\r\n    const modal = document.createElement('div');\r\n    modal.id = 'notificationHistoryModal';\r\n    modal.className = 'notification-history-modal';\r\n    modal.setAttribute('role', 'dialog');\r\n    modal.setAttribute('aria-labelledby', 'notificationHistoryTitle');\r\n    modal.setAttribute('aria-modal', 'true');\r\n\r\n    // 履歴リストを作成\r\n    let historyItems = '';\r\n    this.toastHistory.forEach((item) => {\r\n      if (item.timestamp) {\r\n        const date = new Date(item.timestamp);\r\n        const timeString = date.toLocaleTimeString();\r\n        historyItems += `\r\n          <div class=\"history-item history-item-${item.type}\">\r\n            <div class=\"history-item-time\">${timeString}</div>\r\n            <div class=\"history-item-content\">\r\n              <h4 class=\"history-item-title\">${item.title || ''}</h4>\r\n              <p class=\"history-item-message\">${item.message || ''}</p>\r\n            </div>\r\n          </div>\r\n        `;\r\n      }\r\n    });\r\n\r\n    // モーダルの内容を設定\r\n    modal.innerHTML = `\r\n      <div class=\"notification-history-content\">\r\n        <div class=\"notification-history-header\">\r\n          <h3 id=\"notificationHistoryTitle\">通知履歴</h3>\r\n          <button class=\"notification-history-close\" aria-label=\"履歴を閉じる\">×</button>\r\n        </div>\r\n        <div class=\"notification-history-list\">\r\n          ${historyItems.length ? historyItems : '<p class=\"no-history\">通知履歴はありません</p>'}\r\n        </div>\r\n        <div class=\"notification-history-footer\">\r\n          <button class=\"secondary-button notification-history-clear\">履歴をクリア</button>\r\n          <button class=\"primary-button notification-history-close-btn\">閉じる</button>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n    // モーダルをページに追加\r\n    document.body.appendChild(modal);\r\n\r\n    // モーダルを表示（アニメーション用）\r\n    setTimeout(() => {\r\n      modal.classList.add('active');\r\n    }, 10);\r\n\r\n    // 閉じるボタンのイベントリスナーを設定\r\n    const closeButtons = modal.querySelectorAll(\r\n      '.notification-history-close, .notification-history-close-btn',\r\n    );\r\n    closeButtons.forEach((button) => {\r\n      button.addEventListener('click', () => {\r\n        this.closeNotificationHistory();\r\n      });\r\n    });\r\n\r\n    // クリアボタンのイベントリスナーを設定\r\n    const clearButton = modal.querySelector('.notification-history-clear');\r\n    clearButton?.addEventListener('click', () => {\r\n      this.clearNotificationHistory();\r\n      this.closeNotificationHistory();\r\n    });\r\n\r\n    // モーダル外クリックで閉じる\r\n    modal.addEventListener('click', (e) => {\r\n      if (e.target === modal) {\r\n        this.closeNotificationHistory();\r\n      }\r\n    });\r\n\r\n    // ESCキーで閉じる\r\n    document.addEventListener('keydown', this.handleHistoryEscKey);\r\n  }\r\n\r\n  /**\r\n   * 履歴モーダルのESCキーハンドラ\r\n   */\r\n  private handleHistoryEscKey = (e: KeyboardEvent): void => {\r\n    if (e.key === 'Escape') {\r\n      this.closeNotificationHistory();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 通知履歴モーダルを閉じる\r\n   */\r\n  private closeNotificationHistory(): void {\r\n    const modal = document.getElementById('notificationHistoryModal');\r\n    if (modal) {\r\n      modal.classList.remove('active');\r\n      setTimeout(() => {\r\n        if (modal.parentNode) {\r\n          modal.parentNode.removeChild(modal);\r\n        }\r\n      }, 300);\r\n    }\r\n\r\n    // ESCキーイベントリスナーを削除\r\n    document.removeEventListener('keydown', this.handleHistoryEscKey);\r\n  }\r\n\r\n  /**\r\n   * 通知履歴をクリア\r\n   */\r\n  public clearNotificationHistory(): void {\r\n    this.toastHistory = [];\r\n    this.updateHistoryButton();\r\n  }\r\n\r\n  /**\r\n   * トースト通知を描画\r\n   * @param toastData 通知データ\r\n   */\r\n  private renderToast(toastData: ToastData): void {\r\n    // トーストのHTML構造を作成\r\n    const toast = document.createElement('div');\r\n    toast.id = toastData.id;\r\n    toast.className = `toast toast-${toastData.type}`;\r\n    toast.setAttribute('role', 'alert');\r\n    toast.setAttribute('aria-live', 'assertive');\r\n\r\n    // アイコンを設定\r\n    let icon = '';\r\n    switch (toastData.type) {\r\n      case 'success':\r\n        icon = '✅';\r\n        break;\r\n      case 'warning':\r\n        icon = '⚠️';\r\n        break;\r\n      case 'error':\r\n        icon = '❌';\r\n        break;\r\n      case 'info':\r\n        icon = 'ℹ️';\r\n        break;\r\n    }\r\n\r\n    // トーストの内容を設定\r\n    toast.innerHTML = `\r\n      <div class=\"toast-icon\">${icon}</div>\r\n      <div class=\"toast-content\">\r\n        <h3 class=\"toast-title\">${toastData.title}</h3>\r\n        <p class=\"toast-message\">${toastData.message}</p>\r\n      </div>\r\n      <button class=\"toast-close\" aria-label=\"通知を閉じる\">×</button>\r\n    `;\r\n\r\n    // トーストをコンテナに追加\r\n    this.toastContainer.appendChild(toast);\r\n\r\n    // 要素への参照を保存\r\n    toastData.element = toast;\r\n\r\n    // 閉じるボタンのイベントリスナーを設定\r\n    const closeButton = toast.querySelector('.toast-close');\r\n    closeButton?.addEventListener('click', () => {\r\n      this.removeToast(toastData.id);\r\n    });\r\n\r\n    // 一定時間後に自動的に閉じる\r\n    if (toastData.duration > 0) {\r\n      setTimeout(() => {\r\n        this.removeToast(toastData.id);\r\n      }, toastData.duration);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * トースト通知を削除\r\n   * @param toastId 削除するトーストのID\r\n   */\r\n  public removeToast(toastId: string): void {\r\n    // アクティブリストから削除\r\n    this.activeToasts = this.activeToasts.filter((toast) => toast.id !== toastId);\r\n\r\n    // 要素を削除\r\n    this.removeToastElement(toastId);\r\n  }\r\n\r\n  /**\r\n   * トースト要素を削除\r\n   * @param toastId 削除するトースト要素のID\r\n   */\r\n  private removeToastElement(toastId: string): void {\r\n    const toast = document.getElementById(toastId);\r\n    if (toast) {\r\n      // フェードアウトのためのスタイルを適用\r\n      toast.style.opacity = '0';\r\n      toast.style.transform = 'translateX(100%)';\r\n\r\n      // アニメーション完了後に要素を削除\r\n      setTimeout(() => {\r\n        if (toast.parentNode) {\r\n          toast.parentNode.removeChild(toast);\r\n        }\r\n      }, 300);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * エラー回復のための通知を表示\r\n   * @param action 回復アクション情報\r\n   */\r\n  public showRecoveryToast(action: { message: string; label: string; handler: () => void }): void {\r\n    const recoveryToastId = 'toast-recovery-' + Date.now();\r\n    const toast = document.createElement('div');\r\n    toast.id = recoveryToastId;\r\n    toast.className = 'toast toast-info';\r\n    toast.setAttribute('role', 'alert');\r\n    toast.setAttribute('aria-live', 'assertive');\r\n\r\n    toast.innerHTML = `\r\n      <div class=\"toast-icon\">🔄</div>\r\n      <div class=\"toast-content\">\r\n        <h3 class=\"toast-title\">回復アクション</h3>\r\n        <p class=\"toast-message\">${action.message}</p>\r\n      </div>\r\n      <button class=\"toast-action\" aria-label=\"${action.label}\">${action.label}</button>\r\n      <button class=\"toast-close\" aria-label=\"通知を閉じる\">×</button>\r\n    `;\r\n\r\n    this.toastContainer.appendChild(toast);\r\n\r\n    // アクションボタンのイベントリスナーを設定\r\n    const actionButton = toast.querySelector('.toast-action');\r\n    actionButton?.addEventListener('click', () => {\r\n      action.handler();\r\n      this.removeToastElement(recoveryToastId);\r\n    });\r\n\r\n    // 閉じるボタンのイベントリスナーを設定\r\n    const closeButton = toast.querySelector('.toast-close');\r\n    closeButton?.addEventListener('click', () => {\r\n      this.removeToastElement(recoveryToastId);\r\n    });\r\n\r\n    // 一定時間後に自動的に閉じる\r\n    setTimeout(() => {\r\n      this.removeToastElement(recoveryToastId);\r\n    }, 15000); // 回復アクションは長めに表示\r\n  }\r\n}\r\n\r\n// グローバルでアクセス可能なインスタンスを作成\r\nexport const notificationSystem = new NotificationSystem();\r\n","import { FileValidationResult } from './file-processor'; // Import from file-processor where it was moved\r\n\r\n/**\r\n * ファイルのバリデーションを実行する関数\r\n * @param files バリデーション対象のファイル配列\r\n * @returns 検証結果の配列\r\n */\r\nexport async function validateFiles(files: File[]): Promise<FileValidationResult[]> {\r\n  if (!files || files.length === 0) {\r\n    throw new Error('ファイルが選択されていません');\r\n  }\r\n\r\n  // 検証結果の配列\r\n  const validationResults: FileValidationResult[] = [];\r\n\r\n  // 各ファイルを検証\r\n  for (const file of files) {\r\n    try {\r\n      const content = await readFileAsText(file);\r\n      const result = validateFileContent(file, content);\r\n      validationResults.push(result);\r\n    } catch {\r\n      // ファイル読み込みエラーの場合\r\n      validationResults.push({\r\n        file,\r\n        isValid: false,\r\n        warnings: [],\r\n        errors: ['不明なエラーが発生しました'],\r\n      });\r\n    }\r\n  }\r\n\r\n  return validationResults;\r\n}\r\n\r\n/**\r\n * ファイルをテキストとして読み込む\r\n * @param file 読み込むファイル\r\n * @returns ファイルの内容\r\n */\r\nexport function readFileAsText(file: File): Promise<string> {\r\n  // テキストファイルでない場合はエラー\r\n  if (!file.type.includes('text') && !file.name.endsWith('.txt')) {\r\n    return Promise.reject(new Error('Read error: Invalid file format'));\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = (event): void => {\r\n      if (typeof event.target?.result === 'string') {\r\n        resolve(event.target.result);\r\n      } else {\r\n        reject(new Error('Read error: Invalid file format'));\r\n      }\r\n    };\r\n\r\n    reader.onerror = (): void => {\r\n      reject(new Error('Read error: File read failed'));\r\n    };\r\n\r\n    try {\r\n      reader.readAsText(file);\r\n    } catch {\r\n      reject(new Error('Read error: Cannot start reading file'));\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * ファイルの内容を検証する\r\n * @param file ファイルオブジェクト\r\n * @param content ファイルの内容\r\n * @returns 検証結果\r\n */\r\nexport function validateFileContent(file: File, content: string): FileValidationResult {\r\n  // 検証結果オブジェクトの初期化\r\n  const result: FileValidationResult = {\r\n    file,\r\n    isValid: true,\r\n    warnings: [],\r\n    errors: [],\r\n  };\r\n\r\n  // 基本チェック（空ファイル、最低行数）\r\n  if (!validateBasicContent(content, result)) {\r\n    return result; // 基本チェックに失敗した場合は以降のチェック不要\r\n  }\r\n\r\n  // 行に分割 (CRLFとLFの両方に対応)\r\n  const lines = content.split(/\\r?\\n/);\r\n\r\n  // ヘッダー行のチェック\r\n  validateHeaderLine(lines[0], result);\r\n\r\n  // データ行のチェック（最初の5行まで）\r\n  validateDataLines(lines, result);\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * ファイルの基本的な内容をチェックする\r\n * @param content ファイルの内容\r\n * @param result 検証結果オブジェクト\r\n * @returns 基本チェックに成功したかどうか\r\n */\r\nfunction validateBasicContent(content: string, result: FileValidationResult): boolean {\r\n  // 1. ファイル全体が空でないかチェック\r\n  if (!content.trim()) {\r\n    result.isValid = false;\r\n    result.errors.push('ファイルが空です');\r\n    return false; // 空の場合は以降のチェック不要\r\n  }\r\n\r\n  // 2. 最低行数チェック (ヘッダー行 + データ行1行以上)\r\n  const lines = content.split(/\\r?\\n/);\r\n  if (lines.filter((line) => line.trim()).length < 2) {\r\n    result.isValid = false;\r\n    result.errors.push('ファイルが空か、ヘッダー行またはデータ行が不足しています');\r\n    return false; // 行数が足りない場合は以降のチェック不要\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * ヘッダー行を検証する\r\n * @param headerLine ヘッダー行の内容\r\n * @param result 検証結果オブジェクト\r\n */\r\nfunction validateHeaderLine(headerLine: string, result: FileValidationResult): void {\r\n  const trimmedHeader = headerLine.trim();\r\n\r\n  if (!trimmedHeader) {\r\n    // ヘッダー行が空の場合 (通常はありえないが念のため)\r\n    result.warnings.push('ヘッダー行が空のようです');\r\n  } else if (!trimmedHeader.includes('\\t')) {\r\n    // ヘッダー行にタブが含まれていない場合 (タブ区切りでない可能性)\r\n    result.warnings.push('ヘッダー行にタブ区切りが見られません');\r\n  }\r\n}\r\n\r\n/**\r\n * データ行を検証する\r\n * @param lines ファイルの全行\r\n * @param result 検証結果オブジェクト\r\n */\r\nfunction validateDataLines(lines: string[], result: FileValidationResult): void {\r\n  const sampleSize = Math.min(5, lines.length - 1); // チェックするデータ行数 (最大5行)\r\n  let tabWarningIssued = false; // タブ区切り警告発行済みフラグ\r\n  let columnCountWarningIssued = false; // 列数不足警告発行済みフラグ\r\n  let actionDetailNumWarningIssued = false; // 行為明細番号形式警告発行済みフラグ\r\n\r\n  // データ行のループ (インデックス 1 から開始)\r\n  for (let i = 1; i <= sampleSize; i++) {\r\n    // lines[i] が存在しない場合 (ファイル末尾の空行など) はスキップ\r\n    if (lines[i] === undefined) continue;\r\n\r\n    const line = lines[i].trim();\r\n    // 空のデータ行はスキップ\r\n    if (!line) continue;\r\n\r\n    // 各行を検証し、発生した警告フラグを受け取る\r\n    const lineWarnings = validateDataLine(line, i, result);\r\n\r\n    // タブ区切り警告 (一度だけ追加)\r\n    if (lineWarnings.tabWarningIssued && !tabWarningIssued) {\r\n      result.warnings.push(`一部のデータ行にタブ区切りが見られません (最初の例: 行 ${i + 1})`);\r\n      tabWarningIssued = true;\r\n    }\r\n\r\n    // 列数不足警告 (一度だけ追加)\r\n    if (lineWarnings.columnCountWarningIssued && !columnCountWarningIssued) {\r\n      // validateDateAndActionDetail で列数不足が検出された場合も考慮\r\n      const columns = line.split('\\t'); // 再度分割して実際の列数を取得\r\n      if (columns.length < 4) {\r\n        result.warnings.push(\r\n          `一部のデータ行で入院年月日(4列目)が確認できません (列数不足) (最初の例: 行 ${i + 1})`,\r\n        );\r\n      } else if (columns.length < 7) {\r\n        result.warnings.push(\r\n          `一部のデータ行で行為明細番号(7列目)が確認できません (列数不足) (最初の例: 行 ${i + 1})`,\r\n        );\r\n      } else {\r\n        // 上記以外 (validateDataLine の columns.length < 10 で検出)\r\n        result.warnings.push(\r\n          `一部のデータ行の列数が少ないようです (10列未満) (最初の例: 行 ${i + 1}, 列数: ${columns.length})`,\r\n        );\r\n      }\r\n      columnCountWarningIssued = true;\r\n    }\r\n\r\n    // 行為明細番号形式警告 (一度だけ追加)\r\n    if (lineWarnings.actionDetailNumWarningIssued && !actionDetailNumWarningIssued) {\r\n      const columns = line.split('\\t'); // 再度分割\r\n      const actionDetailNum = columns.length > 6 ? columns[6].trim() : '';\r\n      result.warnings.push(\r\n        `行為明細番号(7列目)の形式が不正のようです (000 or 3桁数字) (最初の例: 行 ${i + 1}, 値: ${actionDetailNum})`,\r\n      );\r\n      actionDetailNumWarningIssued = true;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 1行のデータを検証する\r\n * @param line 検証対象の行\r\n * @param lineIndex 行のインデックス（0起点）\r\n * @param result 検証結果オブジェクト\r\n * @returns 発生した警告フラグの状態\r\n */\r\nfunction validateDataLine(\r\n  line: string,\r\n  lineIndex: number,\r\n  result: FileValidationResult,\r\n): {\r\n  tabWarningIssued: boolean;\r\n  columnCountWarningIssued: boolean;\r\n  actionDetailNumWarningIssued: boolean;\r\n} {\r\n  let tabWarningIssued = false;\r\n  let columnCountWarningIssued = false;\r\n  let actionDetailNumWarningIssued = false;\r\n\r\n  // 5-1. タブ区切り形式チェック (警告)\r\n  if (!line.includes('\\t')) {\r\n    tabWarningIssued = true;\r\n    // タブがない場合、以降の列チェックは無意味なのでスキップ\r\n    return { tabWarningIssued, columnCountWarningIssued, actionDetailNumWarningIssued };\r\n  }\r\n\r\n  // タブで列に分割\r\n  const columns = line.split('\\t');\r\n\r\n  // 5-2. 列数チェック (警告) - 10列未満\r\n  if (columns.length < 10) {\r\n    columnCountWarningIssued = true;\r\n    // 列数が少ない場合、特定の列へのアクセスは危険なのでスキップ\r\n    // (ただし、他の行で十分な列数がある可能性もあるため、ループは継続)\r\n    // 警告メッセージは呼び出し元 (validateDataLines) で追加\r\n    return { tabWarningIssued, columnCountWarningIssued, actionDetailNumWarningIssued };\r\n  }\r\n\r\n  // 入院年月日と行為明細番号の検証\r\n  const dateActionResult = validateDateAndActionDetail(columns, lineIndex, result);\r\n  // validateDateAndActionDetail内で列数不足が判明する場合があるため、ここで更新\r\n  columnCountWarningIssued = dateActionResult.columnCountWarningIssued;\r\n  actionDetailNumWarningIssued = dateActionResult.actionDetailNumWarningIssued;\r\n\r\n  // 警告メッセージは呼び出し元 (validateDataLines) で追加\r\n  return { tabWarningIssued, columnCountWarningIssued, actionDetailNumWarningIssued };\r\n}\r\n\r\n/**\r\n * 入院年月日と行為明細番号を検証する\r\n * @param columns 行の列データ\r\n * @param lineIndex 行のインデックス（0起点）\r\n * @param result 検証結果オブジェクト\r\n * @returns 発生した警告フラグの状態 { columnCountWarningIssued, actionDetailNumWarningIssued }\r\n */\r\nfunction validateDateAndActionDetail(\r\n  columns: string[],\r\n  lineIndex: number,\r\n  result: FileValidationResult,\r\n): { columnCountWarningIssued: boolean; actionDetailNumWarningIssued: boolean } {\r\n  let columnCountWarningIssued = false;\r\n  let actionDetailNumWarningIssued = false;\r\n\r\n  // 5-3. 入院年月日 (列4, インデックス3) の形式チェック (エラー)\r\n  if (columns.length > 3) {\r\n    const admission = columns[3].trim(); // 4列目の値を取得\r\n    const dateRegex = /^(\\d{8}|00000000)$/; // yyyymmdd または 00000000\r\n    if (!dateRegex.test(admission)) {\r\n      result.isValid = false; // 不正な形式ならファイルを無効とする\r\n      // エラーメッセージは最初の一つだけ記録する\r\n      if (\r\n        result.errors.length === 0 ||\r\n        !result.errors.some((e: string) => e.startsWith('入院年月日'))\r\n      ) {\r\n        result.errors.push(\r\n          `入院年月日(4列目)の形式が不正です (yyyymmdd or 00000000) (最初の例: 行 ${lineIndex + 1}, 値: ${admission})`,\r\n        );\r\n      }\r\n      // エラーが見つかっても、他の警告を拾うためにループは継続\r\n    }\r\n  } else {\r\n    // 列数が足りない場合\r\n    columnCountWarningIssued = true; // 列数不足の警告フラグを立てる\r\n  }\r\n\r\n  // 5-4. 行為明細番号 (列7, インデックス6) の形式チェック (警告)\r\n  if (columns.length > 6) {\r\n    const actionDetailNum = columns[6].trim(); // 7列目の値を取得\r\n    const actionDetailRegex = /^(000|\\d{3})$/; // 000 または 3桁の数字\r\n    if (!actionDetailRegex.test(actionDetailNum)) {\r\n      actionDetailNumWarningIssued = true; // 警告フラグを立てる\r\n    }\r\n  } else if (!columnCountWarningIssued) {\r\n    // 列数が足りない場合 (入院年月日のチェックで既に立っている可能性もある)\r\n    columnCountWarningIssued = true; // 列数不足の警告フラグを立てる\r\n  }\r\n\r\n  // 警告メッセージの追加は呼び出し元 (validateDataLines) で行う\r\n  return { columnCountWarningIssued, actionDetailNumWarningIssued };\r\n}\r\n","import { OutputSettings } from '../../core/common/types'; // さらに正しいパスに修正\r\n\r\n/**\r\n * 結果表示クラス\r\n * テキスト/テーブル形式での結果表示を管理するコンポーネント\r\n */\r\nexport class ResultViewer {\r\n  private resultTextarea: HTMLTextAreaElement;\r\n  private resultTable: HTMLTableElement;\r\n  private textViewButton: HTMLButtonElement;\r\n  private tableViewButton: HTMLButtonElement;\r\n  private textResultView: HTMLElement;\r\n  private tableResultView: HTMLElement;\r\n  private copyButton: HTMLButtonElement;\r\n  private copyMessage: HTMLElement;\r\n  private downloadLink: HTMLAnchorElement;\r\n  private currentView: 'text' | 'table' = 'text';\r\n\r\n  /**\r\n   * 結果表示クラスのコンストラクタ\r\n   */\r\n  constructor() {\r\n    // DOM要素の取得\r\n    this.resultTextarea = document.getElementById('resultTextarea') as HTMLTextAreaElement;\r\n    this.resultTable = document.getElementById('resultTable') as HTMLTableElement;\r\n    this.textViewButton = document.getElementById('textViewButton') as HTMLButtonElement;\r\n    this.tableViewButton = document.getElementById('tableViewButton') as HTMLButtonElement;\r\n    this.textResultView = document.getElementById('textResultView') as HTMLElement;\r\n    this.tableResultView = document.getElementById('tableResultView') as HTMLElement;\r\n    this.copyButton = document.getElementById('copyButton') as HTMLButtonElement;\r\n    this.copyMessage = document.getElementById('copyMessage') as HTMLElement;\r\n    this.downloadLink = document.getElementById('downloadLink') as HTMLAnchorElement;\r\n\r\n    if (\r\n      !this.resultTextarea ||\r\n      !this.resultTable ||\r\n      !this.textViewButton ||\r\n      !this.tableViewButton ||\r\n      !this.textResultView ||\r\n      !this.tableResultView ||\r\n      !this.copyButton ||\r\n      !this.copyMessage ||\r\n      !this.downloadLink\r\n    ) {\r\n      throw new Error('必要なDOM要素が見つかりません');\r\n    }\r\n\r\n    this.setupEventListeners();\r\n  }\r\n\r\n  /**\r\n   * イベントリスナーのセットアップ\r\n   */\r\n  private setupEventListeners(): void {\r\n    // 表示切替ボタンのイベント\r\n    this.textViewButton.addEventListener('click', () => {\r\n      this.setResultView('text');\r\n    });\r\n\r\n    this.tableViewButton.addEventListener('click', () => {\r\n      this.setResultView('table');\r\n    });\r\n\r\n    // コピーボタンのイベント\r\n    this.copyButton.addEventListener('click', () => {\r\n      this.copyResultToClipboard();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 結果表示モードを設定する\r\n   * @param viewMode 表示モード ('text' または 'table')\r\n   */\r\n  public setResultView(viewMode: 'text' | 'table'): void {\r\n    this.currentView = viewMode;\r\n\r\n    if (viewMode === 'text') {\r\n      this.textResultView.style.display = 'block';\r\n      this.tableResultView.style.display = 'none';\r\n      this.textViewButton.classList.add('active');\r\n      this.tableViewButton.classList.remove('active');\r\n      this.textViewButton.setAttribute('aria-pressed', 'true');\r\n      this.tableViewButton.setAttribute('aria-pressed', 'false');\r\n    } else {\r\n      this.textResultView.style.display = 'none';\r\n      this.tableResultView.style.display = 'block';\r\n      this.textViewButton.classList.remove('active');\r\n      this.tableViewButton.classList.add('active');\r\n      this.textViewButton.setAttribute('aria-pressed', 'false');\r\n      this.tableViewButton.setAttribute('aria-pressed', 'true');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 結果をクリップボードにコピーする (navigator.clipboard APIを使用)\r\n   */\r\n  private async copyResultToClipboard(): Promise<void> {\r\n    const textToCopy = this.resultTextarea.value;\r\n    if (!textToCopy) return;\r\n\r\n    try {\r\n      // navigator.clipboard APIを使用してテキストをコピー\r\n      await navigator.clipboard.writeText(textToCopy);\r\n\r\n      // 既存のクラスをクリア\r\n      this.copyMessage.classList.remove('visible', 'error');\r\n      // コピー成功メッセージを表示\r\n      this.copyMessage.textContent = 'コピーしました！';\r\n      this.copyMessage.classList.add('visible');\r\n\r\n      // メッセージを一定時間後に消す\r\n      setTimeout(() => {\r\n        this.copyMessage.classList.remove('visible');\r\n      }, 2000);\r\n    } catch (err) {\r\n      console.error('クリップボードへのコピーに失敗しました:', err);\r\n      // 既存のクラスをクリア\r\n      this.copyMessage.classList.remove('visible', 'error');\r\n      // エラーメッセージを表示 (より具体的に)\r\n      this.copyMessage.textContent = 'コピーに失敗しました';\r\n      this.copyMessage.classList.add('visible');\r\n      this.copyMessage.classList.add('error'); // エラー用スタイルを追加 (CSSで定義が必要)\r\n\r\n      // メッセージを一定時間後に消す\r\n      setTimeout(() => {\r\n        this.copyMessage.classList.remove('visible');\r\n        this.copyMessage.classList.remove('error');\r\n      }, 3000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 結果を表示する\r\n   * @param resultText 結果のテキストデータ\r\n   */\r\n  public displayResult(resultText: string, debugInfo?: string): void {\r\n    // 空文字列の場合も処理を続行し、表示をクリアする\r\n\r\n    // デバッグ情報がある場合は、結果の前に追加\r\n    const displayText = debugInfo\r\n      ? `=== デバッグ情報 ===\\n${debugInfo}\\n\\n=== 処理結果 ===\\n${resultText}`\r\n      : resultText;\r\n\r\n    // テキストエリアに表示\r\n    this.resultTextarea.value = displayText;\r\n\r\n    // テーブルに表示（デバッグ情報は除外）\r\n    this.updateResultTable(resultText);\r\n\r\n    // 結果表示エリアを表示\r\n    const resultContainer = document.getElementById('resultContainer');\r\n    if (resultContainer) {\r\n      resultContainer.classList.remove('hidden');\r\n    }\r\n\r\n    // 保存用リンクを更新\r\n    this.updateDownloadLink(resultText);\r\n\r\n    // 結果があればコピー/ダウンロードボタンを有効化、なければ無効化\r\n    const hasResult = !!resultText;\r\n    this.copyButton.disabled = !hasResult;\r\n    this.downloadLink.classList.toggle('hidden', !hasResult);\r\n\r\n    // 結果が空ならテーブルもクリア\r\n    if (!hasResult) {\r\n      this.clearResultTable();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 結果テーブルをクリアする\r\n   */\r\n  private clearResultTable(): void {\r\n    const tbody = this.resultTable.querySelector('tbody');\r\n    if (tbody) {\r\n      tbody.innerHTML = '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 結果テーブルを更新する\r\n   * @param resultText タブ区切りのテキスト結果\r\n   */\r\n  private updateResultTable(resultText: string): void {\r\n    if (!resultText) return;\r\n\r\n    const tbody = this.resultTable.querySelector('tbody');\r\n    if (!tbody) return;\r\n\r\n    this.clearResultTable();\r\n\r\n    // テキストを行に分割\r\n    const lines = resultText.trim().split('\\n');\r\n\r\n    // ヘッダー行をスキップして2行目から処理\r\n    for (let i = 1; i < lines.length; i++) {\r\n      const columns = lines[i].split('\\t');\r\n\r\n      // 行が正しいフォーマットかチェック\r\n      if (columns.length >= 5) {\r\n        const row = document.createElement('tr');\r\n\r\n        // 各列のデータをセルに追加\r\n        for (let j = 0; j < 5; j++) {\r\n          const cell = document.createElement('td');\r\n          cell.textContent = columns[j];\r\n\r\n          // 短手３対象症例の列に特別なスタイルを適用\r\n          if (j === 3) {\r\n            if (columns[j] === 'Yes') {\r\n              cell.classList.add('eligible-yes');\r\n            } else {\r\n              cell.classList.add('eligible-no');\r\n            }\r\n          }\r\n\r\n          row.appendChild(cell);\r\n        }\r\n\r\n        tbody.appendChild(row);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ダウンロードリンクを更新する\r\n   * @param resultText 結果テキスト\r\n   */\r\n  private updateDownloadLink(resultText: string): void {\r\n    const blob = new Blob([resultText], { type: 'text/plain' });\r\n    const url = URL.createObjectURL(blob);\r\n\r\n    // 既存のURLを解放\r\n    if (this.downloadLink.href) {\r\n      URL.revokeObjectURL(this.downloadLink.href);\r\n    }\r\n\r\n    // 新しいURLを設定\r\n    this.downloadLink.href = url;\r\n\r\n    // ファイル名の設定\r\n    const date = new Date();\r\n    const dateStr = `${date.getFullYear()}${(date.getMonth() + 1).toString().padStart(2, '0')}${date.getDate().toString().padStart(2, '0')}`;\r\n    this.downloadLink.setAttribute('download', `短手3判定結果_${dateStr}.txt`);\r\n\r\n    // ダウンロードリンクを表示\r\n    this.downloadLink.classList.remove('hidden');\r\n  }\r\n\r\n  /**\r\n   * 現在の表示モードを取得\r\n   * @returns 現在の表示モード\r\n   */\r\n  public getCurrentView(): 'text' | 'table' {\r\n    return this.currentView;\r\n  }\r\n\r\n  /**\r\n   * 表示用設定を取得\r\n   * @returns 出力設定\r\n   */\r\n  public getOutputSettings(): OutputSettings {\r\n    // 戻り値の型を明示 (インポート元が修正されたため)\r\n    const eligibleOnlyRadio = document.getElementById('eligibleOnly') as HTMLInputElement;\r\n    const dateFormatRadios = document.querySelectorAll(\r\n      'input[name=\"dateFormat\"]',\r\n    ) as NodeListOf<HTMLInputElement>;\r\n\r\n    // デフォルト値を小文字に修正し、型を明示\r\n    let dateFormat: 'yyyymmdd' | 'yyyy/mm/dd' = 'yyyymmdd';\r\n    for (const radio of Array.from(dateFormatRadios)) {\r\n      if (radio.checked) {\r\n        // radio.value が正しい型であることを確認 (必要であればアサーション)\r\n        dateFormat = radio.value as 'yyyymmdd' | 'yyyy/mm/dd';\r\n        break;\r\n      }\r\n    }\r\n\r\n    return {\r\n      outputMode: eligibleOnlyRadio?.checked ? 'eligibleOnly' : 'allCases',\r\n      dateFormat,\r\n    };\r\n  }\r\n}\r\n\r\n// グローバルインスタンス作成を削除。インスタンスは main.ts などで必要に応じて作成する。\r\n","import { CaseData, OutputSettings } from './common/types'; // OutputSettings をインポート\r\nimport { readFileAsText } from './validator'; // readFileAsText は validator からインポートされる想定\r\nimport { parseEFFile, mergeCases } from './common/parsers';\r\nimport { evaluateCases, formatResults } from './common/evaluator';\r\nimport { DEFAULT_RESULT_HEADER } from './common/constants'; // DEFAULT_RESULT_HEADER をインポート\r\n\r\n/**\r\n * ファイル検証結果型\r\n * ファイルごとの検証結果を表します。\r\n */\r\nexport interface FileValidationResult {\r\n  file: File; // 対象ファイルオブジェクト\r\n  isValid: boolean; // 検証が成功したか\r\n  warnings: string[]; // 警告メッセージの配列\r\n  errors: string[]; // エラーメッセージの配列\r\n}\r\n\r\n/**\r\n * ファイル処理クラス\r\n * EFファイルの読み込みと処理を行うユーティリティ\r\n */\r\nclass FileProcessor {\r\n  /**\r\n   * 複数のファイルを処理する\r\n   * @param files 処理対象のファイル配列\r\n   * @param settings 出力設定\r\n   * @returns 処理結果のプロミス\r\n   */\r\n  public async processFiles(files: File[], settings: OutputSettings): Promise<string> {\r\n    // settings 引数を追加\r\n    try {\r\n      if (!files || files.length === 0) {\r\n        throw new Error('ファイルが選択されていません');\r\n      }\r\n\r\n      // ファイルの内容を読み込む\r\n      const fileContents: string[] = [];\r\n      for (const file of files) {\r\n        const content = await readFileAsText(file);\r\n        fileContents.push(content);\r\n      }\r\n\r\n      // ファイルの内容を解析して症例データを統合\r\n      let allCases: CaseData[] = [];\r\n      for (const content of fileContents) {\r\n        const cases = parseEFFile(content);\r\n        allCases = mergeCases(allCases, cases);\r\n      }\r\n\r\n      // 判定処理を実行\r\n      const evaluatedCases = evaluateCases(allCases);\r\n\r\n      // 結果をフォーマット\r\n      const result = formatResults(evaluatedCases, DEFAULT_RESULT_HEADER, settings); // settings を渡すように修正\r\n\r\n      return result;\r\n    } catch (error) {\r\n      console.error('ファイル処理エラー:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// グローバルでアクセス可能なインスタンスを作成\r\nexport const fileProcessor = new FileProcessor();\r\n","/**\r\n * 短期滞在手術等基本料３判定プログラム - パーサー関数\r\n * このファイルには、ファイル解析に関連する関数を含みます。\r\n */\r\n\r\nimport { CaseData, RawCaseData } from './types';\r\nimport { TARGET_PROCEDURES } from './constants';\r\n\r\n/**\r\n * EFファイルの行からデータを抽出する共通関数\r\n * @param columns - データ列の配列\r\n * @returns 患者データ（対象手術の場合は完全、それ以外は基本情報のみ）またはnull（データが不十分な場合）\r\n */\r\nfunction extractCaseData(\r\n  columns: string[],\r\n):\r\n  | (RawCaseData & { procedure: string; procedureName: string | null })\r\n  | { dataId: string; admission: string; discharge: string; procedure: null; procedureName: null }\r\n  | null {\r\n  // 少なくとも基本情報（ID, 入院日, 退院日）を含む列が必要\r\n  if (columns.length < 4) {\r\n    return null;\r\n  }\r\n\r\n  const dataId = columns[1].trim();\r\n  if (!dataId) {\r\n    return null;\r\n  }\r\n  const admission = columns[3].trim();\r\n  const discharge = columns[2].trim();\r\n\r\n  // 行為明細番号を取得 (列が存在する場合のみ)\r\n  const actionDetailNo = columns.length > 6 ? columns[6].trim() : null;\r\n\r\n  // 行為明細番号が\"000\"の行（Eファイル）は日付更新にも不要なためスキップ\r\n  if (actionDetailNo === '000') {\r\n    return null;\r\n  }\r\n\r\n  // 基本情報\r\n  const basicInfo = { dataId, admission, discharge };\r\n\r\n  // レセプト電算コードと診療明細名称を取得 (列が存在する場合のみ)\r\n  const procedure = columns.length > 8 ? columns[8].trim() : null;\r\n  const procedureName = columns.length > 10 ? columns[10].trim() : null;\r\n\r\n  // 短手3の対象手術かどうかを判定\r\n  if (!procedure || !TARGET_PROCEDURES.includes(procedure)) {\r\n    // 対象手術でなくても基本情報は返す（日付更新のため）\r\n    return { ...basicInfo, procedure: null, procedureName: null };\r\n  }\r\n\r\n  // 対象手術の場合、完全な情報を返す\r\n  // RawCaseData型にキャストして返す (procedureはstringであることが保証されている)\r\n  // procedureNameがnullの場合もデフォルト値を設定し、string型を保証\r\n  return {\r\n    ...basicInfo,\r\n    procedure: procedure, // procedure is guaranteed to be string here\r\n    procedureName: procedureName ?? '(名称なし)', // Ensure string type for RawCaseData compatibility\r\n  };\r\n}\r\n\r\n/**\r\n * 入院EF統合ファイルの内容をパースする関数\r\n * ファイルの内容を解析し、患者ごとのデータを抽出します\r\n * @param content - ファイルの内容\r\n * @returns 統合前の症例データ配列\r\n */\r\nexport function parseEFFile(content: string): CaseData[] {\r\n  const lines = content.split(/\\r?\\n/);\r\n  // キーを複合キー (dataId_admission) に変更\r\n  const caseMap: Record<string, CaseData> = {};\r\n\r\n  // ヘッダー行を除いたデータ行を処理\r\n  for (let i = 1; i < lines.length; i++) {\r\n    const line = lines[i].trim();\r\n    if (!line) {\r\n      continue;\r\n    }\r\n\r\n    try {\r\n      const columns = line.split('\\t');\r\n      const extractedData = extractCaseData(columns);\r\n\r\n      if (extractedData) {\r\n        const { dataId, discharge, admission, procedure, procedureName } = extractedData;\r\n\r\n        // 複合キーを作成\r\n        const caseKey = `${dataId}_${admission}`;\r\n\r\n        // 既存の症例データを取得または新規作成 (複合キーを使用)\r\n        let currentCase = caseMap[caseKey];\r\n        if (!currentCase) {\r\n          currentCase = {\r\n            id: dataId,\r\n            admission: admission,\r\n            discharge: discharge, // 初期値として設定\r\n            procedures: [],\r\n            procedureNames: [],\r\n          };\r\n          caseMap[caseKey] = currentCase;\r\n        }\r\n\r\n        // 退院日の更新 (00000000 でなく、既存より新しい日付の場合)\r\n        // この症例 (複合キーで特定) の退院日を更新\r\n        if (\r\n          discharge &&\r\n          discharge !== '00000000' &&\r\n          (!currentCase.discharge ||\r\n            currentCase.discharge === '00000000' ||\r\n            discharge > currentCase.discharge)\r\n        ) {\r\n          currentCase.discharge = discharge;\r\n        }\r\n\r\n        // 対象手術コードと名称を追加（procedureがnullでない場合のみ）\r\n        // この症例 (複合キーで特定) の手術リストに追加\r\n        if (procedure && !currentCase.procedures.includes(procedure)) {\r\n          currentCase.procedures.push(procedure);\r\n          if (!currentCase.procedureNames) {\r\n            currentCase.procedureNames = [];\r\n          }\r\n          currentCase.procedureNames.push(procedureName ?? '(名称なし)');\r\n        }\r\n      }\r\n    } catch {\r\n      // エラーが発生しても処理を継続するが、ログは残さない\r\n      continue;\r\n    }\r\n  }\r\n\r\n  return Object.values(caseMap);\r\n}\r\n\r\n/**\r\n * 複数ファイルからの症例データを統合する関数\r\n * 同一IDの症例については、退院日が更新されている場合に差し替え、手術コードは統合します\r\n * @param existingCases - 既存の症例データ\r\n * @param newCases - 新しい症例データ\r\n * @returns 統合された症例データ\r\n */\r\nexport function mergeCases(existingCases: CaseData[], newCases: CaseData[]): CaseData[] {\r\n  // キーを複合キー (dataId_admission) に変更\r\n  const caseMap: Record<string, CaseData> = {};\r\n\r\n  // 既存のケースをマップに追加 (複合キーを使用)\r\n  for (const c of existingCases) {\r\n    const caseKey = `${c.id}_${c.admission}`;\r\n    caseMap[caseKey] = createSafeCase(c); // 既存データも安全にコピー\r\n  }\r\n\r\n  // 新しいケースをマージ (複合キーを使用)\r\n  for (const c of newCases) {\r\n    const caseKey = `${c.id}_${c.admission}`;\r\n    if (caseMap[caseKey]) {\r\n      // 既存症例の更新処理 (複合キーで特定された症例を更新)\r\n      updateExistingCase(caseMap[caseKey], c);\r\n    } else {\r\n      // 新しい症例を追加 (複合キーでマップに追加)\r\n      caseMap[caseKey] = createSafeCase(c);\r\n    }\r\n  }\r\n\r\n  return Object.values(caseMap);\r\n}\r\n\r\n/**\r\n * 既存の症例データを新しいデータで更新する\r\n * @param currentCase - 更新対象の症例データ\r\n * @param newCase - 新しい症例データ\r\n */\r\nfunction updateExistingCase(currentCase: CaseData, newCase: CaseData): void {\r\n  // 退院日が確定した場合（00000000 から具体的な日付に変わった場合）\r\n  // または、より新しい退院日が来た場合 (YYYYMMDD形式なので文字列比較でOK)\r\n  if (\r\n    newCase.discharge &&\r\n    newCase.discharge !== '00000000' &&\r\n    (!currentCase.discharge ||\r\n      currentCase.discharge === '00000000' ||\r\n      newCase.discharge > currentCase.discharge)\r\n  ) {\r\n    currentCase.discharge = newCase.discharge;\r\n  }\r\n\r\n  // procedures と procedureNames の初期化を確実に行う\r\n  if (!Array.isArray(currentCase.procedures)) {\r\n    currentCase.procedures = [];\r\n  }\r\n  if (!Array.isArray(currentCase.procedureNames)) {\r\n    currentCase.procedureNames = [];\r\n  }\r\n\r\n  // 新しい手術コードを追加\r\n  mergeProcedures(currentCase, newCase);\r\n}\r\n\r\n/**\r\n * 安全な症例データオブジェクトを作成する\r\n * @param c - 元の症例データ\r\n * @returns 配列が初期化された症例データ\r\n */\r\nfunction createSafeCase(c: CaseData): CaseData {\r\n  return {\r\n    ...c,\r\n    procedures: Array.isArray(c.procedures) ? [...c.procedures] : [],\r\n    procedureNames: Array.isArray(c.procedureNames) ? [...c.procedureNames] : [],\r\n  };\r\n}\r\n\r\n/**\r\n * 症例の処置データを統合する\r\n * @param currentCase - 統合先の症例データ\r\n * @param newCase - 統合元の症例データ\r\n */\r\nfunction mergeProcedures(currentCase: CaseData, newCase: CaseData): void {\r\n  // 新しい手術コードを追加（重複を避ける）\r\n  const procedures = Array.isArray(newCase.procedures) ? newCase.procedures : [];\r\n  const procedureNames = Array.isArray(newCase.procedureNames) ? newCase.procedureNames : [];\r\n\r\n  for (let i = 0; i < procedures.length; i++) {\r\n    const proc = procedures[i];\r\n    if (!currentCase.procedures.includes(proc)) {\r\n      currentCase.procedures.push(proc);\r\n\r\n      // procedureNamesが未定義の場合は初期化\r\n      if (!currentCase.procedureNames) {\r\n        currentCase.procedureNames = [];\r\n      }\r\n      // 対応する手術名も追加（存在しない場合はデフォルト値）\r\n      currentCase.procedureNames.push(procedureNames[i] ?? '(名称なし)');\r\n    }\r\n  }\r\n}\r\n","/**\r\n * デフォルトの結果ヘッダー行\r\n */\r\nexport const DEFAULT_RESULT_HEADER = 'データ識別番号\\t入院年月日\\t退院年月日\\t短手３対象症例\\t理由';\r\n\r\n/**\r\n * 内視鏡的大腸ポリープ・粘膜切除術の診療行為コード\r\n */\r\nexport const COLONOSCOPY_PROCEDURE_CODE_SMALL = '150285010'; // 長径２センチメートル未満\r\nexport const COLONOSCOPY_PROCEDURE_CODE_LARGE = '150183410'; // 長径２センチメートル以上\r\nexport const COLONOSCOPY_PROCEDURE_CODES: string[] = [\r\n  COLONOSCOPY_PROCEDURE_CODE_SMALL,\r\n  COLONOSCOPY_PROCEDURE_CODE_LARGE,\r\n]; // 小・大の両方のコードをまとめた配列\r\n\r\n/**\r\n * 対象手術等のコードと名称のマッピング\r\n * 短期滞在手術等基本料３の対象となる診療行為コードとその名称のマッピング\r\n */\r\nexport const PROCEDURE_NAME_MAP: Record<string, string> = {\r\n  '160218510': '終夜睡眠ポリグラフィー（１及び２以外の場合）（安全精度管理下で行うもの）',\r\n  '160218610': '終夜睡眠ポリグラフィー（１及び２以外の場合）（その他のもの）',\r\n  '160183110': '反復睡眠潜時試験（ＭＳＬＴ）',\r\n  '160119710': '下垂体前葉負荷試験成長ホルモン（ＧＨ）（一連として）',\r\n  '160180410': '小児食物アレルギー負荷検査',\r\n  '160098110': '前立腺針生検法（その他のもの）',\r\n  '150351910': '経皮的放射線治療用金属マーカー留置術',\r\n  '150011310': '四肢・躯幹軟部腫瘍摘出術（手）',\r\n  '150294810': '骨折観血的手術（手舟状骨）',\r\n  '150020810': '骨内異物（挿入物を含む。）除去術（前腕）',\r\n  '150021010': '骨内異物（挿入物を含む。）除去術（鎖骨）',\r\n  '150021210': '骨内異物（挿入物を含む。）除去術（手）',\r\n  '150041010': 'ガングリオン摘出術（手）',\r\n  '150314110': '関節鏡下手根管開放手術',\r\n  '150273810': '胸腔鏡下交感神経節切除術（両側）',\r\n  '150355810': '涙管チューブ挿入術（涙道内視鏡を用いるもの）',\r\n  '150355910': '眼瞼内反症手術（皮膚切開法）',\r\n  '150078810': '眼瞼下垂症手術（眼瞼挙筋前転法）',\r\n  '150079010': '眼瞼下垂症手術（その他のもの）',\r\n  '150080210': '翼状片手術（弁の移植を要するもの）',\r\n  '150083410': '斜視手術（後転法）',\r\n  '150083510': '斜視手術（前転法及び後転法の併施）',\r\n  '150344510':\r\n    '治療的角膜切除術（エキシマレーザーによるもの（角膜ジストロフィー又は帯状角膜変性に係るものに限る。））',\r\n  '150395150': '緑内障手術（水晶体再建術併用眼内ドレーン挿入術）',\r\n  '150253010': '水晶体再建術（眼内レンズを挿入する場合）（その他のもの）',\r\n  '150315610': '水晶体再建術（眼内レンズを挿入しない場合）',\r\n  '150096010': '鼓膜形成手術',\r\n  '150097710': '鼻骨骨折整復固定術',\r\n  '150315910': '声帯ポリープ切除術（ファイバースコープによるもの）',\r\n  '150316010': '声帯ポリープ切除術（直達喉頭鏡によるもの）',\r\n  '150106850': '喉頭ポリープ切除術（直達喉頭鏡によるもの）',\r\n  '150299450': '喉頭ポリープ切除術（ファイバースコープによるもの）',\r\n  '150121110': '乳腺腫瘍摘出術（長径５センチメートル未満）',\r\n  '150121210': '乳腺腫瘍摘出術（長径５センチメートル以上）',\r\n  '150416610': '経皮的シャント拡張術・血栓除去術（初回）',\r\n  '150416710': '経皮的シャント拡張術・血栓除去術（１の実施後３月以内に実施する場合）',\r\n  '150154010': '下肢静脈瘤手術（抜去切除術）',\r\n  '150263410': '下肢静脈瘤手術（硬化療法（一連として））',\r\n  '150296510': '下肢静脈瘤手術（高位結紮術）',\r\n  '150154150': '大伏在静脈抜去術',\r\n  '150360910': '下肢静脈瘤血管内焼灼術',\r\n  '150411150': '下肢静脈瘤血管内塞栓術',\r\n  '150159010': 'ヘルニア手術（鼠径ヘルニア）',\r\n  '150263610': '腹腔鏡下鼠径ヘルニア手術（両側）',\r\n  '150285010': '内視鏡的大腸ポリープ・粘膜切除術（長径２センチメートル未満）',\r\n  '150183410': '内視鏡的大腸ポリープ・粘膜切除術（長径２センチメートル以上）',\r\n  '150325410': '痔核手術（脱肛を含む。）（硬化療法（四段階注射法によるもの））',\r\n  '150190310': '肛門ポリープ切除術',\r\n  '150190410': '肛門尖圭コンジローム切除術',\r\n  '150194510': '体外衝撃波腎・尿管結石破砕術（一連につき）',\r\n  '150421110': '尿失禁手術（ボツリヌス毒素によるもの）',\r\n  '150404310': '顕微鏡下精索静脈瘤手術',\r\n  '150216510': '子宮頸部（腟部）切除術',\r\n  '150421310': '子宮鏡下有茎粘膜下筋腫切出術（電解質溶液利用のもの）',\r\n  '150421410': '子宮内膜ポリープ切除術（電解質溶液利用のもの）',\r\n  '150421510': '子宮鏡下有茎粘膜下筋腫切出術（その他のもの）',\r\n  '150421610': '子宮内膜ポリープ切除術（その他のもの）',\r\n  '150421710': '子宮鏡下子宮筋腫摘出術（電解質溶液利用のもの）',\r\n  '150421810': '子宮鏡下子宮筋腫摘出術（その他のもの）',\r\n  '150366110': '腹腔鏡下卵管形成術',\r\n  '180018910': 'ガンマナイフによる定位放射線治療',\r\n};\r\n\r\n/**\r\n * 対象手術等のコード一覧\r\n * 短期滞在手術等基本料３の対象となる診療行為コードのリスト\r\n * PROCEDURE_NAME_MAP のキーから動的に生成されます。\r\n */\r\nexport const TARGET_PROCEDURES: string[] = Object.keys(PROCEDURE_NAME_MAP);\r\n\r\n/**\r\n * 内視鏡的大腸ポリープ・粘膜切除術の特定加算コード\r\n */\r\nexport const COLONOSCOPY_SPECIAL_ADDITIONS: string[] = ['150429570', '150437170'];\r\n\r\n/**\r\n * 入院期間の最大日数（短期滞在手術等基本料３の条件）\r\n */\r\nexport const MAX_HOSPITAL_DAYS = 5;\r\n\r\n/**\r\n * 非該当理由のメッセージ定数\r\n */\r\nexport const INELIGIBILITY_REASONS = {\r\n  UNDISCHARGED: '退院日未確定',\r\n  NO_TARGET_PROCEDURE: '対象手術等なし',\r\n  HOSPITAL_DAYS_EXCEEDED: '入院期間が６日以上',\r\n  MULTIPLE_TARGET_PROCEDURES: '対象手術等を２以上実施',\r\n  OTHER_SURGERY: '対象手術等以外の手術あり',\r\n  SPECIAL_ADDITION: '内視鏡的大腸ポリープ術に特定加算あり',\r\n};\r\n","/**\r\n * 短期滞在手術等基本料３判定プログラム - 評価ロジック\r\n * このファイルには、短手３該当症例の判定などの評価ロジックを含みます。\r\n */\r\n\r\nimport { CaseData, OutputSettings } from './types';\r\nimport { calculateHospitalDays, formatDate } from './utils'; // formatDate をインポート\r\nimport {\r\n  TARGET_PROCEDURES,\r\n  COLONOSCOPY_SPECIAL_ADDITIONS,\r\n  DEFAULT_RESULT_HEADER,\r\n  MAX_HOSPITAL_DAYS,\r\n  COLONOSCOPY_PROCEDURE_CODES,\r\n  PROCEDURE_NAME_MAP,\r\n  INELIGIBILITY_REASONS,\r\n} from './constants';\r\n\r\n/**\r\n * 短手３該当症例を判定する関数\r\n * 各症例が短期滞在手術等基本料３の条件に該当するかを判定します\r\n * @param cases - 判定対象の症例データ\r\n * @returns 短手３に該当する症例データ（ID昇順でソート済み）\r\n */\r\nexport function evaluateCases(cases: CaseData[]): CaseData[] {\r\n  // 全症例に対して適格性と理由を設定\r\n  const evaluatedCases = cases.map((c) => {\r\n    try {\r\n      // 評価結果を格納するオブジェクトを作成（元のオブジェクトをコピー）\r\n      const evaluatedCase = { ...c };\r\n\r\n      // 1. 退院日が '00000000' でない（退院が確定している）\r\n      if (!c.discharge || c.discharge === '00000000') {\r\n        evaluatedCase.isEligible = false;\r\n        evaluatedCase.reason = INELIGIBILITY_REASONS.UNDISCHARGED;\r\n        return evaluatedCase;\r\n      }\r\n\r\n      // 2. 対象手術等の実施（少なくとも1つの対象手術等が実施されている）\r\n      const targetProceduresFound = c.procedures.filter((p) => TARGET_PROCEDURES.includes(p));\r\n\r\n      if (targetProceduresFound.length === 0) {\r\n        evaluatedCase.isEligible = false;\r\n        evaluatedCase.reason = INELIGIBILITY_REASONS.NO_TARGET_PROCEDURE;\r\n        return evaluatedCase;\r\n      }\r\n\r\n      // 3. 入院期間が5日以内\r\n      const hospitalDays = calculateHospitalDays(c.admission, c.discharge);\r\n\r\n      if (hospitalDays === null || hospitalDays > MAX_HOSPITAL_DAYS) {\r\n        evaluatedCase.isEligible = false;\r\n        evaluatedCase.reason = INELIGIBILITY_REASONS.HOSPITAL_DAYS_EXCEEDED;\r\n        return evaluatedCase;\r\n      }\r\n\r\n      // 4. 入院期間中に対象手術等を2以上実施していないかチェック\r\n      // ただし、同一の対象手術等を複数回実施する場合は例外とする\r\n      if (targetProceduresFound.length > 1) {\r\n        // 対象手術等の種類数をカウント（重複を除外）\r\n        const uniqueTargetProcedures = new Set(targetProceduresFound);\r\n        if (uniqueTargetProcedures.size > 1) {\r\n          evaluatedCase.isEligible = false;\r\n          evaluatedCase.reason = INELIGIBILITY_REASONS.MULTIPLE_TARGET_PROCEDURES;\r\n          return evaluatedCase;\r\n        }\r\n      }\r\n\r\n      // 5. 入院期間中に対象手術等に加えて、他の手術を実施していないかチェック\r\n      // 手術コードは通常 '15' で始まるが、診療明細名称に「加算」が含まれるコードは手術ではないため除外\r\n      const surgeryProcedures = c.procedures.filter((p, index) => {\r\n        // 対象手術等に含まれるコードは除外\r\n        if (TARGET_PROCEDURES.includes(p)) return false;\r\n\r\n        // '15'で始まるコードのみを対象\r\n        if (!p.startsWith('15')) return false;\r\n\r\n        // 診療明細名称に「加算」が含まれるコードは手術ではないため除外\r\n        if (\r\n          c.procedureNames &&\r\n          c.procedureNames[index] &&\r\n          c.procedureNames[index].includes('加算')\r\n        ) {\r\n          return false;\r\n        }\r\n\r\n        // 加算コードは通常、特定のパターンを持つ（例：150000490）\r\n        // 多くの加算コードは '1500' で始まり、その後に '00' が続く\r\n        if (p.startsWith('1500') && p.substring(4, 6) === '00') return false;\r\n\r\n        return true;\r\n      });\r\n\r\n      if (surgeryProcedures.length > 0) {\r\n        evaluatedCase.isEligible = false;\r\n        evaluatedCase.reason = INELIGIBILITY_REASONS.OTHER_SURGERY;\r\n        return evaluatedCase;\r\n      }\r\n\r\n      // 6. 内視鏡的大腸ポリープ・粘膜切除術の特定加算チェック\r\n      // 内視鏡的大腸ポリープ・粘膜切除術を実施したかどうか\r\n      const hasColonoscopy = c.procedures.some((p) => COLONOSCOPY_PROCEDURE_CODES.includes(p));\r\n\r\n      // 特定加算が含まれているかどうか\r\n      const hasSpecialAddition = c.procedures.some((p) =>\r\n        COLONOSCOPY_SPECIAL_ADDITIONS.includes(p),\r\n      );\r\n\r\n      // 内視鏡的大腸ポリープ術に特定加算がある場合は対象外\r\n      if (hasColonoscopy && hasSpecialAddition) {\r\n        evaluatedCase.isEligible = false;\r\n        evaluatedCase.reason = INELIGIBILITY_REASONS.SPECIAL_ADDITION;\r\n        return evaluatedCase;\r\n      }\r\n\r\n      // すべての条件を満たす場合は短手３対象症例\r\n      evaluatedCase.isEligible = true;\r\n\r\n      // 実施された対象手術の名称を理由として設定\r\n      const procedureCode = targetProceduresFound[0]; // 最初の対象手術コード\r\n      evaluatedCase.reason = PROCEDURE_NAME_MAP[procedureCode] || '対象手術等';\r\n\r\n      return evaluatedCase;\r\n    } catch (error) {\r\n      console.error(\r\n        `症例 ${c.id} の評価中にエラーが発生しました: ${error instanceof Error ? error.message : String(error)}`,\r\n      );\r\n      // エラーが発生した場合は該当しないと判断\r\n      return {\r\n        ...c,\r\n        isEligible: false,\r\n        reason: `評価エラー: ${error instanceof Error ? error.message : String(error)}`,\r\n      };\r\n    }\r\n  });\r\n\r\n  // 修正: フィルタリングせず、全ての評価済み症例を返す\r\n  // フィルタリングは formatResults で行う\r\n  // ID順にソート\r\n  return evaluatedCases.sort((a, b) => a.id.localeCompare(b.id));\r\n}\r\n\r\n/**\r\n * 結果をフォーマットする関数\r\n * 判定結果をタブ区切りテキスト形式でフォーマットします\r\n * @param cases - フォーマットする症例データ\r\n * @param headerLine - 出力ヘッダー行（デフォルト: DEFAULT_RESULT_HEADER）\r\n * @param settings - 出力設定（outputMode と dateFormat を含む）\r\n * @returns フォーマットされた結果テキスト\r\n */\r\nexport function formatResults(\r\n  cases: CaseData[],\r\n  headerLine: string = DEFAULT_RESULT_HEADER,\r\n  settings: OutputSettings, // デフォルト値を削除し、必須引数とする\r\n): string {\r\n  // 設定に基づいて出力する症例をフィルタリング\r\n  const filteredCases =\r\n    settings.outputMode === 'allCases' ? cases : cases.filter((c) => c.isEligible === true);\r\n\r\n  // 症例が存在しない場合\r\n  if (filteredCases.length === 0) {\r\n    return '該当する症例はありません。';\r\n  }\r\n\r\n  // ヘッダー行を配列の最初の要素として追加\r\n  const lines = [headerLine];\r\n\r\n  // 各症例のデータ行を追加\r\n  filteredCases.forEach((c) => {\r\n    // 日付を指定されたフォーマットに変換\r\n    const admissionDate = formatDate(c.admission, settings.dateFormat);\r\n    const dischargeDate = formatDate(c.discharge, settings.dateFormat);\r\n\r\n    const line = `${c.id}\\t${admissionDate}\\t${dischargeDate}\\t${c.isEligible ? 'Yes' : 'No'}\\t${c.reason || ''}`;\r\n    lines.push(line);\r\n  });\r\n\r\n  // 行を改行文字で結合して返す\r\n  return lines.join('\\n');\r\n}\r\n","/**\r\n * 短期滞在手術等基本料３判定プログラム - ユーティリティ関数\r\n * このファイルには、アプリケーション全体で使用される汎用的な関数を含みます。\r\n */\r\n\r\n/**\r\n * 日付文字列（yyyymmdd）をDateオブジェクトに変換する関数\r\n * @param dateStr - 変換する日付文字列（yyyymmdd形式）\r\n * @returns Dateオブジェクトまたはnull（無効な日付の場合）\r\n */\r\nexport function parseDate(dateStr: string): Date | null {\r\n  if (!dateStr || dateStr === '00000000') return null;\r\n\r\n  try {\r\n    const year = parseInt(dateStr.substring(0, 4), 10);\r\n    const month = parseInt(dateStr.substring(4, 6), 10) - 1; // 月は0から始まる\r\n    const day = parseInt(dateStr.substring(6, 8), 10);\r\n\r\n    const date = new Date(year, month, day);\r\n\r\n    // 有効な日付かチェック\r\n    if (isNaN(date.getTime())) return null;\r\n\r\n    return date;\r\n  } catch (error) {\r\n    console.error(\r\n      `日付の解析中にエラーが発生しました: ${dateStr} - ${error instanceof Error ? error.message : String(error)}`,\r\n    );\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * 入院期間（日数）を計算する関数\r\n * @param admissionStr - 入院日（yyyymmdd形式）\r\n * @param dischargeStr - 退院日（yyyymmdd形式）\r\n * @returns 入院日数または null（日付が無効な場合）\r\n */\r\nexport function calculateHospitalDays(admissionStr: string, dischargeStr: string): number | null {\r\n  const admissionDate = parseDate(admissionStr);\r\n  const dischargeDate = parseDate(dischargeStr);\r\n\r\n  if (!admissionDate || !dischargeDate) return null;\r\n\r\n  // ミリ秒数を日数に変換（1日 = 24 * 60 * 60 * 1000 ミリ秒）\r\n  // 入院日と退院日も期間に含めるため、計算結果に1を加える\r\n  const diffDays = Math.round(\r\n    (dischargeDate.getTime() - admissionDate.getTime()) / (1000 * 60 * 60 * 24),\r\n  );\r\n  return diffDays + 1;\r\n}\r\n\r\n/**\r\n * 日付文字列のフォーマットを変換する関数\r\n * @param dateStr - 変換する日付文字列（yyyymmdd形式）\r\n * @param format - 出力フォーマット（'yyyymmdd'または'yyyy/mm/dd'）\r\n * @returns フォーマットされた日付文字列、または元の文字列（無効な日付の場合）\r\n */\r\nexport function formatDate(\r\n  dateStr: string,\r\n  format: 'yyyymmdd' | 'yyyy/mm/dd' = 'yyyymmdd',\r\n): string {\r\n  // 00000000の場合はそのまま返す\r\n  if (dateStr === '00000000') return dateStr;\r\n\r\n  // 日付オブジェクトに変換\r\n  const date = parseDate(dateStr);\r\n  if (!date) return dateStr; // 変換できない場合は元の文字列を返す\r\n\r\n  // 年、月、日を取得\r\n  const year = date.getFullYear();\r\n  const month = date.getMonth() + 1; // 月は0から始まるので+1\r\n  const day = date.getDate();\r\n\r\n  // 指定されたフォーマットに変換\r\n  if (format === 'yyyy/mm/dd') {\r\n    return `${year}/${month.toString().padStart(2, '0')}/${day.toString().padStart(2, '0')}`;\r\n  } else {\r\n    return `${year}${month.toString().padStart(2, '0')}${day.toString().padStart(2, '0')}`;\r\n  }\r\n}\r\n\r\n/**\r\n * エラーオブジェクトからメッセージを取得するヘルパー関数\r\n * @param error - エラーオブジェクトまたは任意の値\r\n * @returns エラーメッセージ文字列\r\n */\r\nexport function getErrorMessage(error: unknown): string {\r\n  if (error instanceof Error) return error.message;\r\n  return String(error);\r\n}\r\n"],"names":["$c338b0f983d437f5$export$6af13b7de7554010","constructor","containerId","activeToasts","toastHistory","MAX_VISIBLE_TOASTS","MAX_HISTORY_ITEMS","handleHistoryEscKey","e","key","closeNotificationHistory","toastContainer","document","getElementById","createToastContainer","setupHistoryButton","container","createElement","id","className","body","appendChild","historyButton","setAttribute","innerHTML","addEventListener","showNotificationHistory","showToast","type","title","message","duration","priority","timestamp","Date","now","toastId","toastData","addToastToHistory","push","sort","a","b","manageActiveToasts","some","toast","renderToast","unshift","length","slice","updateHistoryButton","classList","remove","toString","visibleToasts","hiddenToasts","forEach","element","removeToastElement","existingModal","parentNode","removeChild","modal","historyItems","item","timeString","date","toLocaleTimeString","setTimeout","add","closeButtons","querySelectorAll","button","clearButton","querySelector","clearNotificationHistory","target","removeEventListener","icon","closeButton","removeToast","filter","style","opacity","transform","showRecoveryToast","action","recoveryToastId","label","actionButton","handler","$7a1670790cbbe4b0$export$34b1c1ed5dd6d491","files","Error","validationResults","file","content","$7a1670790cbbe4b0$export$7dc2912951b09f","result","$7a1670790cbbe4b0$export$99273a4de8ff332c","isValid","warnings","errors","trim","lines","split","line","$7a1670790cbbe4b0$var$validateHeaderLine","headerLine","trimmedHeader","includes","$7a1670790cbbe4b0$var$validateDataLines","sampleSize","Math","min","tabWarningIssued","columnCountWarningIssued","actionDetailNumWarningIssued","i","undefined","lineWarnings","$7a1670790cbbe4b0$var$validateDataLine","lineIndex","columns","dateActionResult","$7a1670790cbbe4b0$var$validateDateAndActionDetail","admission","dateRegex","test","startsWith","actionDetailNum","actionDetailRegex","name","endsWith","Promise","resolve","reject","reader","FileReader","onload","event","onerror","readAsText","$e3e22f6c17ed805e$export$a5245c9b2355d1f8","selectedFiles","validFiles","fileInput","fileInfoArea","executeButton","dropArea","setupEventListeners","fileSelectButton","preventDefault","stopPropagation","click","processNewFiles","Array","from","handleDragOver","handleDragLeave","handleDrop","tagName","clearFiles","dataTransfer","textFiles","handleError","existingFileNames","map","f","newFiles","duplicateCount","updateFileInfo","recoveryAction","validateSelectedFiles","value","CustomEvent","dispatchEvent","results","updateValidationUI","disabled","error","html","fileStatus","status","messages","find","r","msg","text","statusClass","statusText","context","options","console","solution","fullMessage","updateUI","getSelectedFiles","getValidFileCount","$e3e22f6c17ed805e$var$fileManagerInstance","$e3e22f6c17ed805e$export$d45d33c808f51185","instance","$e3e22f6c17ed805e$export$5ffab0dbdf79647e","readyState","$d5176f4c1bfaf4b6$export$81386075c4f5828b","currentView","resultTextarea","resultTable","textViewButton","tableViewButton","textResultView","tableResultView","copyButton","copyMessage","downloadLink","setResultView","copyResultToClipboard","viewMode","display","textToCopy","navigator","clipboard","writeText","textContent","err","displayResult","resultText","debugInfo","displayText","updateResultTable","resultContainer","updateDownloadLink","hasResult","toggle","clearResultTable","tbody","row","j","cell","blob","Blob","url","URL","createObjectURL","href","revokeObjectURL","dateStr","getFullYear","getMonth","padStart","getDate","getCurrentView","getOutputSettings","eligibleOnlyRadio","dateFormatRadios","dateFormat","radio","checked","outputMode","$952cec8ced8a46bd$export$4100e9622577bf55","$952cec8ced8a46bd$export$9abababf870cce56","$952cec8ced8a46bd$export$861aae5ae66b2524","$952cec8ced8a46bd$export$bc8c9440750cf9cc","Object","keys","$952cec8ced8a46bd$export$c2dd158f3483965f","$952cec8ced8a46bd$export$b875acc5e1c1d7cd","UNDISCHARGED","NO_TARGET_PROCEDURE","HOSPITAL_DAYS_EXCEEDED","MULTIPLE_TARGET_PROCEDURES","OTHER_SURGERY","SPECIAL_ADDITION","$d4b1decbb56d16ba$var$createSafeCase","c","procedures","isArray","procedureNames","$f9424a7ebcc0e1f6$export$6b862160d295c8e","year","parseInt","substring","month","day","isNaN","getTime","String","$f9424a7ebcc0e1f6$export$3ae94a2503e890a1","format","$8acc7c30e37a5f1a$export$62de47a40c7b42b0","processFiles","settings","fileContents","allCases","cases","caseMap","extractedData","$d4b1decbb56d16ba$var$extractCaseData","dataId","discharge","actionDetailNo","basicInfo","procedure","procedureName","caseKey","currentCase","values","existingCases","newCases","newCase","$d4b1decbb56d16ba$var$mergeProcedures","proc","evaluatedCases","evaluatedCase","isEligible","reason","targetProceduresFound","p","hospitalDays","admissionStr","dischargeStr","admissionDate","dischargeDate","diffDays","round","uniqueTargetProcedures","Set","size","surgeryProcedures","index","hasColonoscopy","hasSpecialAddition","localeCompare","filteredCases","join","$157295337300d7f0$var$Application","loadingIndicator","fileManagerInstance","resultViewerInstance","init","outputSettings","app","errorDiv","prepend"],"version":3,"file":"main.js.map"}