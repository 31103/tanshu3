{"mappings":"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","sources":["<anon>","src/browser/main.ts","src/ui/components/file-manager.ts","src/ui/components/notification.ts","src/core/validator.ts","src/ui/components/result-viewer.ts","src/core/file-processor.ts","src/core/common/parsers.ts","src/core/common/constants.ts","src/core/common/evaluator.ts","src/core/common/utils.ts"],"sourcesContent":["(() => {\n/**\r\n * 短期滞在手術等基本料３判定プログラム - メインアプリケーション\r\n * \r\n * このファイルは、アプリケーションのエントリーポイントです。\r\n * 各コンポーネントの初期化と連携を行います。\r\n */ class $c338b0f983d437f5$export$e71c7404ebdda22e {\n    /**\r\n     * 通知システムのコンストラクタ\r\n     * @param containerId 通知コンテナのID\r\n     */ constructor(containerId = 'toastContainer'){\n        this.activeToasts = [];\n        this.toastHistory = [];\n        this.MAX_VISIBLE_TOASTS = 3;\n        this.MAX_HISTORY_ITEMS = 10;\n        /**\r\n     * 履歴モーダルのESCキーハンドラ\r\n     */ this.handleHistoryEscKey = (e)=>{\n            if (e.key === 'Escape') this.closeNotificationHistory();\n        };\n        this.toastContainer = document.getElementById(containerId) || this.createToastContainer(containerId);\n        this.setupHistoryButton();\n    }\n    /**\r\n     * トースト通知コンテナを作成\r\n     * @param containerId コンテナID\r\n     * @returns 作成されたコンテナ要素\r\n     */ createToastContainer(containerId) {\n        const container = document.createElement('div');\n        container.id = containerId;\n        container.className = 'toast-container';\n        document.body.appendChild(container);\n        return container;\n    }\n    /**\r\n     * 履歴ボタンの初期設定\r\n     */ setupHistoryButton() {\n        let historyButton = document.getElementById('notificationHistoryButton');\n        if (!historyButton) {\n            historyButton = document.createElement('button');\n            historyButton.id = 'notificationHistoryButton';\n            historyButton.className = 'notification-history-button hidden';\n            historyButton.setAttribute('aria-label', \"\\u901A\\u77E5\\u5C65\\u6B74\\u3092\\u8868\\u793A\");\n            historyButton.innerHTML = '<span class=\"history-icon\">\\uD83D\\uDD14</span>';\n            document.body.appendChild(historyButton);\n            historyButton.addEventListener('click', ()=>this.showNotificationHistory());\n        }\n    }\n    /**\r\n     * トースト通知を表示\r\n     * @param type 通知タイプ（success, warning, error, info）\r\n     * @param title 通知タイトル\r\n     * @param message 通知メッセージ\r\n     * @param duration 表示時間（ミリ秒）\r\n     * @param priority 優先度（1-5、5が最高）\r\n     */ showToast(type, title, message, duration = 5000, priority = 3) {\n        // 通知オブジェクトを作成\n        const timestamp = Date.now();\n        const toastId = 'toast-' + timestamp;\n        const toastData = {\n            id: toastId,\n            type: type,\n            title: title,\n            message: message,\n            timestamp: timestamp,\n            priority: priority,\n            duration: duration\n        };\n        // 通知履歴に追加\n        this.addToastToHistory(toastData);\n        // 通知を表示キューに追加\n        this.activeToasts.push(toastData);\n        // 優先度順にソート（優先度が高く、新しいものが上位）\n        this.activeToasts.sort((a, b)=>{\n            if (a.priority !== b.priority) return b.priority - a.priority;\n            return b.timestamp - a.timestamp;\n        });\n        // 表示数を制限\n        this.manageActiveToasts();\n        // 通知を表示\n        this.renderToast(toastData);\n    }\n    /**\r\n     * 通知履歴に追加\r\n     * @param toastData 通知データ\r\n     */ addToastToHistory(toastData) {\n        // 履歴に追加\n        this.toastHistory.unshift({\n            type: toastData.type,\n            title: toastData.title,\n            message: toastData.message,\n            timestamp: toastData.timestamp\n        });\n        // 履歴の最大数を制限\n        if (this.toastHistory.length > this.MAX_HISTORY_ITEMS) this.toastHistory = this.toastHistory.slice(0, this.MAX_HISTORY_ITEMS);\n        // 履歴ボタンを更新\n        this.updateHistoryButton();\n    }\n    /**\r\n     * 履歴ボタンを更新\r\n     */ updateHistoryButton() {\n        const historyButton = document.getElementById('notificationHistoryButton');\n        if (historyButton && this.toastHistory.length > 0) {\n            historyButton.classList.remove('hidden');\n            historyButton.setAttribute('data-count', this.toastHistory.length.toString());\n        }\n    }\n    /**\r\n     * アクティブな通知を管理\r\n     */ manageActiveToasts() {\n        // 表示数を制限\n        if (this.activeToasts.length > this.MAX_VISIBLE_TOASTS) {\n            // 優先度の低い通知を非表示にする\n            const visibleToasts = this.activeToasts.slice(0, this.MAX_VISIBLE_TOASTS);\n            const hiddenToasts = this.activeToasts.slice(this.MAX_VISIBLE_TOASTS);\n            // 非表示にする通知を削除\n            hiddenToasts.forEach((toast)=>{\n                if (toast.element) this.removeToastElement(toast.id);\n            });\n            // 集約通知を表示（複数の通知がある場合）\n            if (hiddenToasts.length > 1) {\n                const highestPriorityType = this.getHighestPriorityType(hiddenToasts);\n                this.showAggregateToast(hiddenToasts.length, highestPriorityType);\n            }\n            // アクティブリストを更新\n            this.activeToasts = visibleToasts;\n        }\n    }\n    /**\r\n     * 最も優先度の高い通知タイプを取得\r\n     * @param toasts 通知の配列\r\n     * @returns 最も優先度の高い通知タイプ\r\n     */ getHighestPriorityType(toasts) {\n        const typePriority = {\n            'error': 4,\n            'warning': 3,\n            'info': 2,\n            'success': 1\n        };\n        let highestType = 'info';\n        toasts.forEach((toast)=>{\n            if (typePriority[toast.type] > typePriority[highestType]) highestType = toast.type;\n        });\n        return highestType;\n    }\n    /**\r\n     * 集約通知を表示\r\n     * @param count 集約する通知の数\r\n     * @param type 通知タイプ\r\n     */ showAggregateToast(count, type) {\n        const aggregateToastId = 'toast-aggregate';\n        // 既存の集約通知を削除\n        const existingAggregate = document.getElementById(aggregateToastId);\n        if (existingAggregate) existingAggregate.parentNode?.removeChild(existingAggregate);\n        // 新しい集約通知を作成\n        const toast = document.createElement('div');\n        toast.id = aggregateToastId;\n        toast.className = `toast toast-${type}`;\n        toast.setAttribute('role', 'status');\n        toast.setAttribute('aria-live', 'polite');\n        // アイコンを設定\n        let icon = '';\n        switch(type){\n            case 'success':\n                icon = \"\\u2705\";\n                break;\n            case 'warning':\n                icon = \"\\u26A0\\uFE0F\";\n                break;\n            case 'error':\n                icon = \"\\u274C\";\n                break;\n            case 'info':\n                icon = \"\\u2139\\uFE0F\";\n                break;\n        }\n        // 通知の内容を設定\n        toast.innerHTML = `\n      <div class=\"toast-icon\">${icon}</div>\n      <div class=\"toast-content\">\n        <h3 class=\"toast-title\">\\u{305D}\\u{306E}\\u{4ED6}\\u{306E}\\u{901A}\\u{77E5}</h3>\n        <p class=\"toast-message\">\\u{4ED6}\\u{306B}${count}\\u{4EF6}\\u{306E}\\u{901A}\\u{77E5}\\u{304C}\\u{3042}\\u{308A}\\u{307E}\\u{3059}</p>\n      </div>\n      <button class=\"toast-view-all\" aria-label=\"\\u{3059}\\u{3079}\\u{3066}\\u{306E}\\u{901A}\\u{77E5}\\u{3092}\\u{8868}\\u{793A}\">\\u{8868}\\u{793A}</button>\n    `;\n        // 通知をコンテナに追加\n        this.toastContainer.appendChild(toast);\n        // 「すべて表示」ボタンのイベントリスナーを設定\n        const viewAllButton = toast.querySelector('.toast-view-all');\n        viewAllButton?.addEventListener('click', ()=>this.showNotificationHistory());\n    }\n    /**\r\n     * 通知履歴を表示\r\n     */ showNotificationHistory() {\n        // 既存の履歴モーダルを削除\n        const existingModal = document.getElementById('notificationHistoryModal');\n        if (existingModal) existingModal.parentNode?.removeChild(existingModal);\n        // 履歴モーダルを作成\n        const modal = document.createElement('div');\n        modal.id = 'notificationHistoryModal';\n        modal.className = 'notification-history-modal';\n        modal.setAttribute('role', 'dialog');\n        modal.setAttribute('aria-labelledby', 'notificationHistoryTitle');\n        modal.setAttribute('aria-modal', 'true');\n        // 履歴リストを作成\n        let historyItems = '';\n        this.toastHistory.forEach((item)=>{\n            if (item.timestamp) {\n                const date = new Date(item.timestamp);\n                const timeString = date.toLocaleTimeString();\n                historyItems += `\n          <div class=\"history-item history-item-${item.type}\">\n            <div class=\"history-item-time\">${timeString}</div>\n            <div class=\"history-item-content\">\n              <h4 class=\"history-item-title\">${item.title || ''}</h4>\n              <p class=\"history-item-message\">${item.message || ''}</p>\n            </div>\n          </div>\n        `;\n            }\n        });\n        // モーダルの内容を設定\n        modal.innerHTML = `\n      <div class=\"notification-history-content\">\n        <div class=\"notification-history-header\">\n          <h3 id=\"notificationHistoryTitle\">\\u{901A}\\u{77E5}\\u{5C65}\\u{6B74}</h3>\n          <button class=\"notification-history-close\" aria-label=\"\\u{5C65}\\u{6B74}\\u{3092}\\u{9589}\\u{3058}\\u{308B}\">\\xd7</button>\n        </div>\n        <div class=\"notification-history-list\">\n          ${historyItems.length ? historyItems : '<p class=\"no-history\">\\u901A\\u77E5\\u5C65\\u6B74\\u306F\\u3042\\u308A\\u307E\\u305B\\u3093</p>'}\n        </div>\n        <div class=\"notification-history-footer\">\n          <button class=\"secondary-button notification-history-clear\">\\u{5C65}\\u{6B74}\\u{3092}\\u{30AF}\\u{30EA}\\u{30A2}</button>\n          <button class=\"primary-button notification-history-close-btn\">\\u{9589}\\u{3058}\\u{308B}</button>\n        </div>\n      </div>\n    `;\n        // モーダルをページに追加\n        document.body.appendChild(modal);\n        // モーダルを表示（アニメーション用）\n        setTimeout(()=>{\n            modal.classList.add('active');\n        }, 10);\n        // 閉じるボタンのイベントリスナーを設定\n        const closeButtons = modal.querySelectorAll('.notification-history-close, .notification-history-close-btn');\n        closeButtons.forEach((button)=>{\n            button.addEventListener('click', ()=>{\n                this.closeNotificationHistory();\n            });\n        });\n        // クリアボタンのイベントリスナーを設定\n        const clearButton = modal.querySelector('.notification-history-clear');\n        clearButton?.addEventListener('click', ()=>{\n            this.clearNotificationHistory();\n            this.closeNotificationHistory();\n        });\n        // モーダル外クリックで閉じる\n        modal.addEventListener('click', (e)=>{\n            if (e.target === modal) this.closeNotificationHistory();\n        });\n        // ESCキーで閉じる\n        document.addEventListener('keydown', this.handleHistoryEscKey);\n    }\n    /**\r\n     * 通知履歴モーダルを閉じる\r\n     */ closeNotificationHistory() {\n        const modal = document.getElementById('notificationHistoryModal');\n        if (modal) {\n            modal.classList.remove('active');\n            setTimeout(()=>{\n                if (modal.parentNode) modal.parentNode.removeChild(modal);\n            }, 300);\n        }\n        // ESCキーイベントリスナーを削除\n        document.removeEventListener('keydown', this.handleHistoryEscKey);\n    }\n    /**\r\n     * 通知履歴をクリア\r\n     */ clearNotificationHistory() {\n        this.toastHistory = [];\n        this.updateHistoryButton();\n    }\n    /**\r\n     * トースト通知を描画\r\n     * @param toastData 通知データ\r\n     */ renderToast(toastData) {\n        // トーストのHTML構造を作成\n        const toast = document.createElement('div');\n        toast.id = toastData.id;\n        toast.className = `toast toast-${toastData.type}`;\n        toast.setAttribute('role', 'alert');\n        toast.setAttribute('aria-live', 'assertive');\n        // アイコンを設定\n        let icon = '';\n        switch(toastData.type){\n            case 'success':\n                icon = \"\\u2705\";\n                break;\n            case 'warning':\n                icon = \"\\u26A0\\uFE0F\";\n                break;\n            case 'error':\n                icon = \"\\u274C\";\n                break;\n            case 'info':\n                icon = \"\\u2139\\uFE0F\";\n                break;\n        }\n        // トーストの内容を設定\n        toast.innerHTML = `\n      <div class=\"toast-icon\">${icon}</div>\n      <div class=\"toast-content\">\n        <h3 class=\"toast-title\">${toastData.title}</h3>\n        <p class=\"toast-message\">${toastData.message}</p>\n      </div>\n      <button class=\"toast-close\" aria-label=\"\\u{901A}\\u{77E5}\\u{3092}\\u{9589}\\u{3058}\\u{308B}\">\\xd7</button>\n    `;\n        // トーストをコンテナに追加\n        this.toastContainer.appendChild(toast);\n        // 要素への参照を保存\n        toastData.element = toast;\n        // 閉じるボタンのイベントリスナーを設定\n        const closeButton = toast.querySelector('.toast-close');\n        closeButton?.addEventListener('click', ()=>{\n            this.removeToast(toastData.id);\n        });\n        // 一定時間後に自動的に閉じる\n        if (toastData.duration > 0) setTimeout(()=>{\n            this.removeToast(toastData.id);\n        }, toastData.duration);\n    }\n    /**\r\n     * トースト通知を削除\r\n     * @param toastId 削除するトーストのID\r\n     */ removeToast(toastId) {\n        // アクティブリストから削除\n        this.activeToasts = this.activeToasts.filter((toast)=>toast.id !== toastId);\n        // 要素を削除\n        this.removeToastElement(toastId);\n    }\n    /**\r\n     * トースト要素を削除\r\n     * @param toastId 削除するトースト要素のID\r\n     */ removeToastElement(toastId) {\n        const toast = document.getElementById(toastId);\n        if (toast) {\n            // フェードアウトのためのスタイルを適用\n            toast.style.opacity = '0';\n            toast.style.transform = 'translateX(100%)';\n            // アニメーション完了後に要素を削除\n            setTimeout(()=>{\n                if (toast.parentNode) toast.parentNode.removeChild(toast);\n            }, 300);\n        }\n    }\n    /**\r\n     * エラー回復のための通知を表示\r\n     * @param action 回復アクション情報\r\n     */ showRecoveryToast(action) {\n        const recoveryToastId = 'toast-recovery-' + Date.now();\n        const toast = document.createElement('div');\n        toast.id = recoveryToastId;\n        toast.className = 'toast toast-info';\n        toast.setAttribute('role', 'alert');\n        toast.setAttribute('aria-live', 'assertive');\n        toast.innerHTML = `\n      <div class=\"toast-icon\">\\u{1F504}</div>\n      <div class=\"toast-content\">\n        <h3 class=\"toast-title\">\\u{56DE}\\u{5FA9}\\u{30A2}\\u{30AF}\\u{30B7}\\u{30E7}\\u{30F3}</h3>\n        <p class=\"toast-message\">${action.message}</p>\n      </div>\n      <button class=\"toast-action\" aria-label=\"${action.label}\">${action.label}</button>\n      <button class=\"toast-close\" aria-label=\"\\u{901A}\\u{77E5}\\u{3092}\\u{9589}\\u{3058}\\u{308B}\">\\xd7</button>\n    `;\n        this.toastContainer.appendChild(toast);\n        // アクションボタンのイベントリスナーを設定\n        const actionButton = toast.querySelector('.toast-action');\n        actionButton?.addEventListener('click', ()=>{\n            action.handler();\n            this.removeToastElement(recoveryToastId);\n        });\n        // 閉じるボタンのイベントリスナーを設定\n        const closeButton = toast.querySelector('.toast-close');\n        closeButton?.addEventListener('click', ()=>{\n            this.removeToastElement(recoveryToastId);\n        });\n        // 一定時間後に自動的に閉じる\n        setTimeout(()=>{\n            this.removeToastElement(recoveryToastId);\n        }, 15000); // 回復アクションは長めに表示\n    }\n}\nconst $c338b0f983d437f5$export$6af13b7de7554010 = new $c338b0f983d437f5$export$e71c7404ebdda22e();\n\n\nasync function $7a1670790cbbe4b0$export$34b1c1ed5dd6d491(files) {\n    if (!files || files.length === 0) throw new Error(\"\\u30D5\\u30A1\\u30A4\\u30EB\\u304C\\u9078\\u629E\\u3055\\u308C\\u3066\\u3044\\u307E\\u305B\\u3093\");\n    // 検証結果の配列\n    const validationResults = [];\n    // 各ファイルを検証\n    for (const file of files)try {\n        const content = await $7a1670790cbbe4b0$export$7dc2912951b09f(file);\n        const result = $7a1670790cbbe4b0$export$99273a4de8ff332c(file, content);\n        validationResults.push(result);\n    } catch (error) {\n        // ファイル読み込みエラーの場合\n        validationResults.push({\n            file: file,\n            isValid: false,\n            warnings: [],\n            errors: [\n                error.message || \"\\u4E0D\\u660E\\u306A\\u30A8\\u30E9\\u30FC\\u304C\\u767A\\u751F\\u3057\\u307E\\u3057\\u305F\"\n            ]\n        });\n    }\n    return validationResults;\n}\nfunction $7a1670790cbbe4b0$export$7dc2912951b09f(file) {\n    // テキストファイルでない場合はエラー\n    if (!file.type.includes('text') && !file.name.endsWith('.txt')) return Promise.reject(new Error('Read error: Invalid file format'));\n    return new Promise((resolve, reject)=>{\n        const reader = new FileReader();\n        reader.onload = (event)=>{\n            if (typeof event.target?.result === 'string') resolve(event.target.result);\n            else reject(new Error('Read error: Invalid file format'));\n        };\n        reader.onerror = ()=>{\n            reject(new Error('Read error: File read failed'));\n        };\n        try {\n            reader.readAsText(file);\n        } catch (error) {\n            reject(new Error('Read error: Cannot start reading file'));\n        }\n    });\n}\nfunction $7a1670790cbbe4b0$export$99273a4de8ff332c(file, content) {\n    // 検証結果オブジェクトの初期化\n    const result = {\n        file: file,\n        isValid: true,\n        warnings: [],\n        errors: []\n    };\n    // 1. ファイル全体が空でないかチェック\n    if (!content.trim()) {\n        result.isValid = false;\n        result.errors.push(\"\\u30D5\\u30A1\\u30A4\\u30EB\\u304C\\u7A7A\\u3067\\u3059\");\n        return result; // 空の場合は以降のチェック不要\n    }\n    // 2. 行に分割 (CRLFとLFの両方に対応)\n    //    filter(line => line.trim()) は空行を除外するが、ここでは一旦含めて行番号を維持\n    const lines = content.split(/\\r?\\n/);\n    // 3. 最低行数チェック (ヘッダー行 + データ行1行以上)\n    //    空行を除外してカウント\n    if (lines.filter((line)=>line.trim()).length < 2) {\n        result.isValid = false;\n        result.errors.push(\"\\u30D5\\u30A1\\u30A4\\u30EB\\u304C\\u7A7A\\u304B\\u3001\\u30D8\\u30C3\\u30C0\\u30FC\\u884C\\u307E\\u305F\\u306F\\u30C7\\u30FC\\u30BF\\u884C\\u304C\\u4E0D\\u8DB3\\u3057\\u3066\\u3044\\u307E\\u3059\");\n        return result; // 行数が足りない場合は以降のチェック不要\n    }\n    // 4. ヘッダー行の簡易チェック\n    const headerLine = lines[0].trim();\n    if (!headerLine) // ヘッダー行が空の場合 (通常はありえないが念のため)\n    result.warnings.push(\"\\u30D8\\u30C3\\u30C0\\u30FC\\u884C\\u304C\\u7A7A\\u306E\\u3088\\u3046\\u3067\\u3059\");\n    else if (!headerLine.includes('\\t')) // ヘッダー行にタブが含まれていない場合 (タブ区切りでない可能性)\n    result.warnings.push(\"\\u30D8\\u30C3\\u30C0\\u30FC\\u884C\\u306B\\u30BF\\u30D6\\u533A\\u5207\\u308A\\u304C\\u898B\\u3089\\u308C\\u307E\\u305B\\u3093\");\n    // 5. データ行の簡易チェック (最初の5行まで)\n    const sampleSize = Math.min(5, lines.length - 1); // チェックするデータ行数 (最大5行)\n    let tabWarningIssued = false; // タブ区切り警告発行済みフラグ\n    let columnCountWarningIssued = false; // 列数不足警告発行済みフラグ\n    let actionDetailNumWarningIssued = false; // 行為明細番号形式警告発行済みフラグ\n    // データ行のループ (インデックス 1 から開始)\n    for(let i = 1; i <= sampleSize; i++){\n        // lines[i] が存在しない場合 (ファイル末尾の空行など) はスキップ\n        if (lines[i] === undefined) continue;\n        const line = lines[i].trim();\n        // 空のデータ行はスキップ\n        if (!line) continue;\n        // 5-1. タブ区切り形式チェック (警告)\n        if (!line.includes('\\t') && !tabWarningIssued) {\n            result.warnings.push(`\\u{4E00}\\u{90E8}\\u{306E}\\u{30C7}\\u{30FC}\\u{30BF}\\u{884C}\\u{306B}\\u{30BF}\\u{30D6}\\u{533A}\\u{5207}\\u{308A}\\u{304C}\\u{898B}\\u{3089}\\u{308C}\\u{307E}\\u{305B}\\u{3093} (\\u{6700}\\u{521D}\\u{306E}\\u{4F8B}: \\u{884C} ${i + 1})`);\n            tabWarningIssued = true;\n            continue;\n        }\n        // タブで列に分割\n        const columns = line.split('\\t');\n        // 5-2. 列数チェック (警告) - 10列未満\n        if (columns.length < 10 && !columnCountWarningIssued) {\n            result.warnings.push(`\\u{4E00}\\u{90E8}\\u{306E}\\u{30C7}\\u{30FC}\\u{30BF}\\u{884C}\\u{306E}\\u{5217}\\u{6570}\\u{304C}\\u{5C11}\\u{306A}\\u{3044}\\u{3088}\\u{3046}\\u{3067}\\u{3059} (10\\u{5217}\\u{672A}\\u{6E80}) (\\u{6700}\\u{521D}\\u{306E}\\u{4F8B}: \\u{884C} ${i + 1}, \\u{5217}\\u{6570}: ${columns.length})`);\n            columnCountWarningIssued = true;\n            continue;\n        }\n        // --- 主要な列の簡易フォーマットチェック ---\n        // 列が存在するか確認してからアクセスすることが重要\n        // 5-3. 入院年月日 (列4, インデックス3) の形式チェック (エラー)\n        if (columns.length > 3) {\n            const admission = columns[3].trim(); // 4列目の値を取得\n            const dateRegex = /^(\\d{8}|00000000)$/; // yyyymmdd または 00000000\n            if (!dateRegex.test(admission)) {\n                result.isValid = false; // 不正な形式ならファイルを無効とする\n                // エラーメッセージは最初の一つだけ記録する\n                if (result.errors.length === 0 || !result.errors.some((e)=>e.startsWith(\"\\u5165\\u9662\\u5E74\\u6708\\u65E5\"))) result.errors.push(`\\u{5165}\\u{9662}\\u{5E74}\\u{6708}\\u{65E5}(4\\u{5217}\\u{76EE})\\u{306E}\\u{5F62}\\u{5F0F}\\u{304C}\\u{4E0D}\\u{6B63}\\u{3067}\\u{3059} (yyyymmdd or 00000000) (\\u{6700}\\u{521D}\\u{306E}\\u{4F8B}: \\u{884C} ${i + 1}, \\u{5024}: ${admission})`);\n            // エラーが見つかっても、他の警告を拾うためにループは継続\n            }\n        } else if (!columnCountWarningIssued) {\n            // 列数が足りず、まだ警告が出ていない場合\n            result.warnings.push(`\\u{4E00}\\u{90E8}\\u{306E}\\u{30C7}\\u{30FC}\\u{30BF}\\u{884C}\\u{3067}\\u{5165}\\u{9662}\\u{5E74}\\u{6708}\\u{65E5}(4\\u{5217}\\u{76EE})\\u{304C}\\u{78BA}\\u{8A8D}\\u{3067}\\u{304D}\\u{307E}\\u{305B}\\u{3093} (\\u{5217}\\u{6570}\\u{4E0D}\\u{8DB3}) (\\u{6700}\\u{521D}\\u{306E}\\u{4F8B}: \\u{884C} ${i + 1})`);\n            columnCountWarningIssued = true; // 列数不足の警告として扱う\n        }\n        // 5-4. 行為明細番号 (列7, インデックス6) の形式チェック (警告)\n        if (columns.length > 6) {\n            const actionDetailNum = columns[6].trim(); // 7列目の値を取得\n            const actionDetailRegex = /^(000|\\d{3})$/; // 000 または 3桁の数字\n            if (!actionDetailRegex.test(actionDetailNum) && !actionDetailNumWarningIssued) {\n                result.warnings.push(`\\u{884C}\\u{70BA}\\u{660E}\\u{7D30}\\u{756A}\\u{53F7}(7\\u{5217}\\u{76EE})\\u{306E}\\u{5F62}\\u{5F0F}\\u{304C}\\u{4E0D}\\u{6B63}\\u{306E}\\u{3088}\\u{3046}\\u{3067}\\u{3059} (000 or 3\\u{6841}\\u{6570}\\u{5B57}) (\\u{6700}\\u{521D}\\u{306E}\\u{4F8B}: \\u{884C} ${i + 1}, \\u{5024}: ${actionDetailNum})`);\n                actionDetailNumWarningIssued = true; // 警告は最初の一つだけ\n            }\n        } else if (!columnCountWarningIssued) {\n            // 列数が足りず、まだ警告が出ていない場合\n            result.warnings.push(`\\u{4E00}\\u{90E8}\\u{306E}\\u{30C7}\\u{30FC}\\u{30BF}\\u{884C}\\u{3067}\\u{884C}\\u{70BA}\\u{660E}\\u{7D30}\\u{756A}\\u{53F7}(7\\u{5217}\\u{76EE})\\u{304C}\\u{78BA}\\u{8A8D}\\u{3067}\\u{304D}\\u{307E}\\u{305B}\\u{3093} (\\u{5217}\\u{6570}\\u{4E0D}\\u{8DB3}) (\\u{6700}\\u{521D}\\u{306E}\\u{4F8B}: \\u{884C} ${i + 1})`);\n            columnCountWarningIssued = true; // 列数不足の警告として扱う\n        }\n    }\n    // ループ内で isValid が false に設定されている可能性がある\n    return result;\n}\n\n\nclass $e3e22f6c17ed805e$export$a5245c9b2355d1f8 {\n    /**\r\n     * ファイル管理クラスのコンストラクタ\r\n     */ constructor(){\n        this.selectedFiles = [];\n        this.validFiles = 0;\n        // DOM要素の取得\n        this.fileInput = document.getElementById('fileInput');\n        this.fileInfoArea = document.getElementById('fileInfoArea');\n        this.clearButton = document.getElementById('clearButton');\n        this.executeButton = document.getElementById('executeButton');\n        this.dropArea = document.getElementById('dropArea');\n        if (!this.fileInput || !this.fileInfoArea || !this.clearButton || !this.executeButton || !this.dropArea) throw new Error(\"\\u5FC5\\u8981\\u306ADOM\\u8981\\u7D20\\u304C\\u898B\\u3064\\u304B\\u308A\\u307E\\u305B\\u3093\");\n        this.setupEventListeners();\n    }\n    /**\r\n     * イベントリスナーのセットアップ\r\n     */ setupEventListeners() {\n        // ファイル選択ボタン\n        const fileSelectButton = document.getElementById('fileSelectButton');\n        if (fileSelectButton) fileSelectButton.addEventListener('click', (e)=>{\n            e.preventDefault();\n            e.stopPropagation();\n            this.fileInput.click();\n        });\n        // ファイル選択時の処理\n        this.fileInput.addEventListener('change', ()=>{\n            this.processNewFiles(Array.from(this.fileInput.files || []));\n        });\n        // ドラッグ&ドロップ処理\n        this.dropArea.addEventListener('dragover', (e)=>{\n            e.preventDefault();\n            this.dropArea.classList.add('drag-over');\n        });\n        this.dropArea.addEventListener('dragleave', (e)=>{\n            e.preventDefault();\n            this.dropArea.classList.remove('drag-over');\n        });\n        this.dropArea.addEventListener('drop', (e)=>{\n            e.preventDefault();\n            this.dropArea.classList.remove('drag-over');\n            if (e.dataTransfer && e.dataTransfer.files.length > 0) // ドロップされたファイルを処理\n            this.processNewFiles(Array.from(e.dataTransfer.files));\n        });\n        // キーボード操作のサポート\n        this.dropArea.addEventListener('keydown', (e)=>{\n            // Enterキーまたはスペースキーでファイル選択ダイアログを開く\n            if (e.key === 'Enter' || e.key === ' ') {\n                e.preventDefault();\n                this.fileInput.click();\n            }\n        });\n        // ドロップエリア全体をクリック可能に\n        this.dropArea.addEventListener('click', (e)=>{\n            // buttonの場合は、buttonのイベントに任せる\n            if (e.target.tagName !== 'BUTTON') this.fileInput.click();\n        });\n        // クリアボタンの処理\n        this.clearButton.addEventListener('click', ()=>{\n            this.clearFiles();\n        });\n    }\n    /**\r\n     * 新しく選択されたファイルを処理する\r\n     * @param files 処理対象のファイル配列\r\n     */ processNewFiles(files) {\n        // テキストファイルのみをフィルタリング\n        const textFiles = Array.from(files).filter((file)=>file.type === 'text/plain' || file.name.endsWith('.txt'));\n        // テキストファイル以外が含まれていた場合\n        if (textFiles.length < files.length) {\n            this.handleError(new Error(\"\\u30C6\\u30AD\\u30B9\\u30C8\\u30D5\\u30A1\\u30A4\\u30EB\\u4EE5\\u5916\\u304C\\u542B\\u307E\\u308C\\u3066\\u3044\\u307E\\u3059\"), 'file-format');\n            return;\n        }\n        // 既に追加されているファイルと重複するものを確認\n        const existingFileNames = Array.from(this.selectedFiles).map((f)=>f.name);\n        const newFiles = textFiles.filter((file)=>!existingFileNames.includes(file.name));\n        const duplicateCount = textFiles.length - newFiles.length;\n        // 新しいファイルを追加\n        newFiles.forEach((file)=>this.selectedFiles.push(file));\n        // ファイル情報を更新\n        this.updateFileInfo();\n        // 結果をユーザーに通知\n        if (newFiles.length === 0) this.handleError(new Error(\"\\u3059\\u3079\\u3066\\u306E\\u30D5\\u30A1\\u30A4\\u30EB\\u304C\\u65E2\\u306B\\u8FFD\\u52A0\\u3055\\u308C\\u3066\\u3044\\u307E\\u3059\"), 'file-duplicate', {\n            recoveryAction: {\n                message: \"\\u65E2\\u5B58\\u306E\\u30D5\\u30A1\\u30A4\\u30EB\\u3092\\u30AF\\u30EA\\u30A2\\u3057\\u3066\\u65B0\\u3057\\u3044\\u30D5\\u30A1\\u30A4\\u30EB\\u3092\\u8FFD\\u52A0\\u3057\\u307E\\u3059\\u304B\\uFF1F\",\n                label: \"\\u30AF\\u30EA\\u30A2\\u3057\\u3066\\u8FFD\\u52A0\",\n                handler: ()=>{\n                    this.selectedFiles = [\n                        ...textFiles\n                    ];\n                    this.updateFileInfo();\n                    (0, $c338b0f983d437f5$export$6af13b7de7554010).showToast('success', \"\\u30D5\\u30A1\\u30A4\\u30EB\\u66F4\\u65B0\\u5B8C\\u4E86\", `${textFiles.length}\\u{30D5}\\u{30A1}\\u{30A4}\\u{30EB}\\u{3092}\\u{8FFD}\\u{52A0}\\u{3057}\\u{307E}\\u{3057}\\u{305F}`);\n                }\n            }\n        });\n        else if (duplicateCount > 0) (0, $c338b0f983d437f5$export$6af13b7de7554010).showToast('warning', \"\\u30D5\\u30A1\\u30A4\\u30EB\\u91CD\\u8907\", `${textFiles.length - duplicateCount}\\u{30D5}\\u{30A1}\\u{30A4}\\u{30EB}\\u{3092}\\u{8FFD}\\u{52A0}\\u{3057}\\u{307E}\\u{3057}\\u{305F} (${duplicateCount}\\u{30D5}\\u{30A1}\\u{30A4}\\u{30EB}\\u{306F}\\u{91CD}\\u{8907})`, 5000, 3);\n        else (0, $c338b0f983d437f5$export$6af13b7de7554010).showToast('success', \"\\u30D5\\u30A1\\u30A4\\u30EB\\u8FFD\\u52A0\\u5B8C\\u4E86\", `${textFiles.length}\\u{30D5}\\u{30A1}\\u{30A4}\\u{30EB}\\u{3092}\\u{8FFD}\\u{52A0}\\u{3057}\\u{307E}\\u{3057}\\u{305F}`, 5000, 2);\n        // ファイルを検証\n        this.validateSelectedFiles();\n    }\n    /**\r\n     * 選択されたファイルをクリアする\r\n     */ clearFiles() {\n        // 選択されたファイルをクリア\n        this.selectedFiles = [];\n        this.fileInput.value = '';\n        this.validFiles = 0;\n        // ファイル情報表示を更新\n        this.updateFileInfo();\n        // イベント通知\n        const event = new CustomEvent('filesClear');\n        document.dispatchEvent(event);\n        (0, $c338b0f983d437f5$export$6af13b7de7554010).showToast('info', \"\\u30AF\\u30EA\\u30A2\\u5B8C\\u4E86\", \"\\u30D5\\u30A1\\u30A4\\u30EB\\u9078\\u629E\\u3092\\u30AF\\u30EA\\u30A2\\u3057\\u307E\\u3057\\u305F\");\n    }\n    /**\r\n     * 選択されたファイルを検証する\r\n     */ async validateSelectedFiles() {\n        if (this.selectedFiles.length === 0) return false;\n        try {\n            // 外部のvalidateFilesモジュールを使用\n            const results = await (0, $7a1670790cbbe4b0$export$34b1c1ed5dd6d491)(this.selectedFiles);\n            this.updateValidationUI(results);\n            // 有効なファイル数を計算（型情報を明示的に指定）\n            this.validFiles = results.filter((result)=>result.isValid).length;\n            // 実行ボタンの有効/無効を更新\n            this.executeButton.disabled = this.validFiles === 0;\n            return this.validFiles > 0;\n        } catch (error) {\n            this.handleError(error instanceof Error ? error : new Error(\"\\u4E0D\\u660E\\u306A\\u30A8\\u30E9\\u30FC\"), 'file-validation');\n            return false;\n        }\n    }\n    /**\r\n     * 検証結果をUIに反映する\r\n     * @param results 検証結果の配列\r\n     */ updateValidationUI(results) {\n        // ファイル情報UIを更新\n        this.updateFileInfo(results);\n    }\n    /**\r\n     * ファイル情報表示を更新する\r\n     * @param validationResults 検証結果があれば反映\r\n     */ updateFileInfo(validationResults) {\n        // ファイルが選択されているか確認\n        if (this.selectedFiles.length === 0) {\n            this.fileInfoArea.innerHTML = '<p class=\"no-file-message\">\\u30D5\\u30A1\\u30A4\\u30EB\\u304C\\u9078\\u629E\\u3055\\u308C\\u3066\\u3044\\u307E\\u305B\\u3093</p>';\n            this.clearButton.disabled = true;\n            this.executeButton.disabled = true;\n            return;\n        }\n        // ファイルアイテムのHTMLを生成\n        let html = '';\n        this.selectedFiles.forEach((file)=>{\n            let fileStatus = {\n                status: 'pending',\n                messages: []\n            };\n            if (validationResults) {\n                const result = validationResults.find((r)=>r.file === file);\n                if (result) fileStatus = {\n                    status: result.isValid ? result.warnings.length > 0 ? 'warning' : 'valid' : 'error',\n                    messages: [\n                        ...result.errors.map((msg)=>({\n                                type: 'error',\n                                text: msg\n                            })),\n                        ...result.warnings.map((msg)=>({\n                                type: 'warning',\n                                text: msg\n                            }))\n                    ]\n                };\n            }\n            let statusClass = '';\n            let statusText = '';\n            switch(fileStatus.status){\n                case 'valid':\n                    statusClass = 'status-valid';\n                    statusText = \"\\u6709\\u52B9\";\n                    break;\n                case 'warning':\n                    statusClass = 'status-warning';\n                    statusText = \"\\u8B66\\u544A\";\n                    break;\n                case 'error':\n                    statusClass = 'status-error';\n                    statusText = \"\\u30A8\\u30E9\\u30FC\";\n                    break;\n                default:\n                    statusClass = '';\n                    statusText = \"\\u691C\\u8A3C\\u4E2D...\";\n            }\n            html += `\n        <div class=\"file-item\">\n          <div class=\"file-icon\">\\u{1F4C4}</div>\n          <div class=\"file-name\">${file.name}</div>\n          <div class=\"file-status ${statusClass}\">${statusText}</div>\n        `;\n            // バリデーションメッセージがある場合は表示\n            if (fileStatus.messages && fileStatus.messages.length > 0) {\n                html += '<div class=\"validation-feedback\">';\n                fileStatus.messages.forEach((msg)=>{\n                    let icon = '';\n                    switch(msg.type){\n                        case 'error':\n                            icon = \"\\u274C\";\n                            break;\n                        case 'warning':\n                            icon = \"\\u26A0\\uFE0F\";\n                            break;\n                        case 'info':\n                            icon = \"\\u2139\\uFE0F\";\n                            break;\n                    }\n                    html += `\n            <div class=\"validation-message ${msg.type}\">\n              <span class=\"validation-icon\">${icon}</span>\n              <span class=\"validation-text\">${msg.text}</span>\n            </div>\n          `;\n                });\n                html += '</div>';\n            } else if (fileStatus.status === 'valid') html += `\n          <div class=\"validation-feedback\">\n            <div class=\"validation-message success\">\n              <span class=\"validation-icon\">\\u{2705}</span>\n              <span class=\"validation-text\">\\u{30D5}\\u{30A1}\\u{30A4}\\u{30EB}\\u{5F62}\\u{5F0F}\\u{306F}\\u{6709}\\u{52B9}\\u{3067}\\u{3059}</span>\n            </div>\n          </div>\n        `;\n            html += '</div>'; // file-item end\n        });\n        // HTMLを適用\n        this.fileInfoArea.innerHTML = html;\n        this.clearButton.disabled = false;\n    }\n    /**\r\n     * エラーを処理する\r\n     * @param error エラーオブジェクト\r\n     * @param context エラーが発生したコンテキスト\r\n     * @param options 追加オプション\r\n     */ handleError(error, context, options = {}) {\n        console.error(`\\u{30A8}\\u{30E9}\\u{30FC} (${context}):`, error);\n        // エラータイプに基づいて適切なメッセージと解決策を提供\n        let title = \"\\u30A8\\u30E9\\u30FC\\u304C\\u767A\\u751F\\u3057\\u307E\\u3057\\u305F\";\n        let message = error.message || \"\\u30A8\\u30E9\\u30FC\\u304C\\u767A\\u751F\\u3057\\u307E\\u3057\\u305F\";\n        let solution = '';\n        let priority = 4; // エラーは高い優先度\n        switch(context){\n            case 'file-format':\n                title = \"\\u30D5\\u30A1\\u30A4\\u30EB\\u5F62\\u5F0F\\u30A8\\u30E9\\u30FC\";\n                solution = \"\\u30C6\\u30AD\\u30B9\\u30C8\\u30D5\\u30A1\\u30A4\\u30EB(.txt)\\u306E\\u307F\\u8FFD\\u52A0\\u3067\\u304D\\u307E\\u3059\\u3002\\u30D5\\u30A1\\u30A4\\u30EB\\u5F62\\u5F0F\\u3092\\u78BA\\u8A8D\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\";\n                break;\n            case 'file-validation':\n                title = \"\\u30D5\\u30A1\\u30A4\\u30EB\\u691C\\u8A3C\\u30A8\\u30E9\\u30FC\";\n                solution = \"\\u6B63\\u3057\\u3044\\u5F62\\u5F0F\\u306EEF\\u7D71\\u5408\\u30D5\\u30A1\\u30A4\\u30EB\\u3067\\u3042\\u308B\\u3053\\u3068\\u3092\\u78BA\\u8A8D\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\";\n                break;\n            case 'file-duplicate':\n                title = \"\\u30D5\\u30A1\\u30A4\\u30EB\\u91CD\\u8907\";\n                solution = \"\\u5225\\u306E\\u30D5\\u30A1\\u30A4\\u30EB\\u3092\\u9078\\u629E\\u3059\\u308B\\u304B\\u3001\\u65E2\\u5B58\\u306E\\u30D5\\u30A1\\u30A4\\u30EB\\u3092\\u30AF\\u30EA\\u30A2\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\";\n                break;\n            default:\n                solution = \"\\u554F\\u984C\\u304C\\u89E3\\u6C7A\\u3057\\u306A\\u3044\\u5834\\u5408\\u306F\\u3001\\u30DA\\u30FC\\u30B8\\u3092\\u518D\\u8AAD\\u307F\\u8FBC\\u307F\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\";\n        }\n        // 解決策がある場合はメッセージに追加\n        const fullMessage = solution ? `${message}<br><span class=\"error-solution\">\\u{89E3}\\u{6C7A}\\u{7B56}: ${solution}</span>` : message;\n        // 通知を表示\n        (0, $c338b0f983d437f5$export$6af13b7de7554010).showToast('error', title, fullMessage, 8000, priority);\n        // エラー回復のためのアクションを提供\n        if (options.recoveryAction && options.recoveryAction.message && options.recoveryAction.label && options.recoveryAction.handler) {\n            const recoveryAction = {\n                message: options.recoveryAction.message,\n                label: options.recoveryAction.label,\n                handler: options.recoveryAction.handler\n            };\n            setTimeout(()=>{\n                (0, $c338b0f983d437f5$export$6af13b7de7554010).showRecoveryToast(recoveryAction);\n            }, 1000);\n        }\n        // エラー状態をUIに反映\n        if (options.updateUI) options.updateUI();\n    }\n    /**\r\n     * 選択されたファイルを取得\r\n     * @returns 選択されたファイル配列\r\n     */ getSelectedFiles() {\n        return this.selectedFiles;\n    }\n    /**\r\n     * 有効なファイル数を取得\r\n     * @returns 有効なファイル数\r\n     */ getValidFileCount() {\n        return this.validFiles;\n    }\n}\n// グローバルでアクセス可能なインスタンスを作成\nlet $e3e22f6c17ed805e$var$fileManagerInstance = null;\nfunction $e3e22f6c17ed805e$export$5ffab0dbdf79647e() {\n    if (!$e3e22f6c17ed805e$var$fileManagerInstance) {\n        // DOMが準備できているか確認\n        if (document.readyState === 'loading') throw new Error('DOM is not ready. Call this function after DOMContentLoaded');\n        $e3e22f6c17ed805e$var$fileManagerInstance = new $e3e22f6c17ed805e$export$a5245c9b2355d1f8();\n    }\n    return $e3e22f6c17ed805e$var$fileManagerInstance;\n}\nconst $e3e22f6c17ed805e$export$d45d33c808f51185 = {\n    get instance () {\n        return $e3e22f6c17ed805e$export$5ffab0dbdf79647e();\n    }\n};\n\n\nclass $d5176f4c1bfaf4b6$export$81386075c4f5828b {\n    /**\r\n     * 結果表示クラスのコンストラクタ\r\n     */ constructor(){\n        this.currentView = 'text';\n        // DOM要素の取得\n        this.resultTextarea = document.getElementById('resultTextarea');\n        this.resultTable = document.getElementById('resultTable');\n        this.textViewButton = document.getElementById('textViewButton');\n        this.tableViewButton = document.getElementById('tableViewButton');\n        this.textResultView = document.getElementById('textResultView');\n        this.tableResultView = document.getElementById('tableResultView');\n        this.copyButton = document.getElementById('copyButton');\n        this.copyMessage = document.getElementById('copyMessage');\n        this.downloadLink = document.getElementById('downloadLink');\n        if (!this.resultTextarea || !this.resultTable || !this.textViewButton || !this.tableViewButton || !this.textResultView || !this.tableResultView || !this.copyButton || !this.copyMessage || !this.downloadLink) throw new Error(\"\\u5FC5\\u8981\\u306ADOM\\u8981\\u7D20\\u304C\\u898B\\u3064\\u304B\\u308A\\u307E\\u305B\\u3093\");\n        this.setupEventListeners();\n    }\n    /**\r\n     * イベントリスナーのセットアップ\r\n     */ setupEventListeners() {\n        // 表示切替ボタンのイベント\n        this.textViewButton.addEventListener('click', ()=>{\n            this.setResultView('text');\n        });\n        this.tableViewButton.addEventListener('click', ()=>{\n            this.setResultView('table');\n        });\n        // コピーボタンのイベント\n        this.copyButton.addEventListener('click', ()=>{\n            this.copyResultToClipboard();\n        });\n    }\n    /**\r\n     * 結果表示モードを設定する\r\n     * @param viewMode 表示モード ('text' または 'table')\r\n     */ setResultView(viewMode) {\n        this.currentView = viewMode;\n        if (viewMode === 'text') {\n            this.textResultView.style.display = 'block';\n            this.tableResultView.style.display = 'none';\n            this.textViewButton.classList.add('active');\n            this.tableViewButton.classList.remove('active');\n            this.textViewButton.setAttribute('aria-pressed', 'true');\n            this.tableViewButton.setAttribute('aria-pressed', 'false');\n        } else {\n            this.textResultView.style.display = 'none';\n            this.tableResultView.style.display = 'block';\n            this.textViewButton.classList.remove('active');\n            this.tableViewButton.classList.add('active');\n            this.textViewButton.setAttribute('aria-pressed', 'false');\n            this.tableViewButton.setAttribute('aria-pressed', 'true');\n        }\n    }\n    /**\r\n     * 結果をクリップボードにコピーする (navigator.clipboard APIを使用)\r\n     */ async copyResultToClipboard() {\n        const textToCopy = this.resultTextarea.value;\n        if (!textToCopy) return;\n        try {\n            // navigator.clipboard APIを使用してテキストをコピー\n            await navigator.clipboard.writeText(textToCopy);\n            // コピー成功メッセージを表示\n            this.copyMessage.textContent = \"\\u30B3\\u30D4\\u30FC\\u3057\\u307E\\u3057\\u305F\\uFF01\";\n            this.copyMessage.classList.add('visible');\n            // メッセージを一定時間後に消す\n            setTimeout(()=>{\n                this.copyMessage.classList.remove('visible');\n            }, 2000);\n        } catch (err) {\n            console.error(\"\\u30AF\\u30EA\\u30C3\\u30D7\\u30DC\\u30FC\\u30C9\\u3078\\u306E\\u30B3\\u30D4\\u30FC\\u306B\\u5931\\u6557\\u3057\\u307E\\u3057\\u305F:\", err);\n            // エラーメッセージを表示 (より具体的に)\n            this.copyMessage.textContent = \"\\u30B3\\u30D4\\u30FC\\u306B\\u5931\\u6557\\u3057\\u307E\\u3057\\u305F\";\n            this.copyMessage.classList.add('visible', 'error'); // エラー用スタイルを追加 (CSSで定義が必要)\n            // メッセージを一定時間後に消す\n            setTimeout(()=>{\n                this.copyMessage.classList.remove('visible', 'error');\n            }, 3000);\n        }\n    }\n    /**\r\n     * 結果を表示する\r\n     * @param resultText 結果のテキストデータ\r\n     */ displayResult(resultText, debugInfo) {\n        if (!resultText) return;\n        // デバッグ情報がある場合は、結果の前に追加\n        const displayText = debugInfo ? `=== \\u{30C7}\\u{30D0}\\u{30C3}\\u{30B0}\\u{60C5}\\u{5831} ===\n${debugInfo}\n\n=== \\u{51E6}\\u{7406}\\u{7D50}\\u{679C} ===\n${resultText}` : resultText;\n        // テキストエリアに表示\n        this.resultTextarea.value = displayText;\n        // テーブルに表示（デバッグ情報は除外）\n        this.updateResultTable(resultText);\n        // 結果表示エリアを表示\n        const resultContainer = document.getElementById('resultContainer');\n        if (resultContainer) resultContainer.classList.remove('hidden');\n        // 保存用リンクを更新\n        this.updateDownloadLink(resultText);\n        // 結果があればコピーボタンを有効化\n        this.copyButton.disabled = !resultText;\n    }\n    /**\r\n     * 結果テーブルをクリアする\r\n     */ clearResultTable() {\n        const tbody = this.resultTable.querySelector('tbody');\n        if (tbody) tbody.innerHTML = '';\n    }\n    /**\r\n     * 結果テーブルを更新する\r\n     * @param resultText タブ区切りのテキスト結果\r\n     */ updateResultTable(resultText) {\n        if (!resultText) return;\n        const tbody = this.resultTable.querySelector('tbody');\n        if (!tbody) return;\n        this.clearResultTable();\n        // テキストを行に分割\n        const lines = resultText.trim().split('\\n');\n        // ヘッダー行をスキップして2行目から処理\n        for(let i = 1; i < lines.length; i++){\n            const columns = lines[i].split('\\t');\n            // 行が正しいフォーマットかチェック\n            if (columns.length >= 5) {\n                const row = document.createElement('tr');\n                // 各列のデータをセルに追加\n                for(let j = 0; j < 5; j++){\n                    const cell = document.createElement('td');\n                    cell.textContent = columns[j];\n                    // 短手３対象症例の列に特別なスタイルを適用\n                    if (j === 3) {\n                        if (columns[j] === 'Yes') cell.classList.add('eligible-yes');\n                        else cell.classList.add('eligible-no');\n                    }\n                    row.appendChild(cell);\n                }\n                tbody.appendChild(row);\n            }\n        }\n    }\n    /**\r\n     * ダウンロードリンクを更新する\r\n     * @param resultText 結果テキスト\r\n     */ updateDownloadLink(resultText) {\n        const blob = new Blob([\n            resultText\n        ], {\n            type: 'text/plain'\n        });\n        const url = URL.createObjectURL(blob);\n        // 既存のURLを解放\n        if (this.downloadLink.href) URL.revokeObjectURL(this.downloadLink.href);\n        // 新しいURLを設定\n        this.downloadLink.href = url;\n        // ファイル名の設定\n        const date = new Date();\n        const dateStr = `${date.getFullYear()}${(date.getMonth() + 1).toString().padStart(2, '0')}${date.getDate().toString().padStart(2, '0')}`;\n        this.downloadLink.setAttribute('download', `\\u{77ED}\\u{624B}3\\u{5224}\\u{5B9A}\\u{7D50}\\u{679C}_${dateStr}.txt`);\n        // ダウンロードリンクを表示\n        this.downloadLink.classList.remove('hidden');\n    }\n    /**\r\n     * 現在の表示モードを取得\r\n     * @returns 現在の表示モード\r\n     */ getCurrentView() {\n        return this.currentView;\n    }\n    /**\r\n     * 表示用設定を取得\r\n     * @returns 出力設定\r\n     */ getOutputSettings() {\n        const eligibleOnlyRadio = document.getElementById('eligibleOnly');\n        const dateFormatRadios = document.querySelectorAll('input[name=\"dateFormat\"]');\n        // デフォルト値を小文字に修正し、型を明示\n        let dateFormat = 'yyyymmdd';\n        for (const radio of Array.from(dateFormatRadios))if (radio.checked) {\n            // radio.value が正しい型であることを確認 (必要であればアサーション)\n            dateFormat = radio.value;\n            break;\n        }\n        return {\n            outputMode: eligibleOnlyRadio?.checked ? 'eligibleOnly' : 'allCases',\n            dateFormat: dateFormat\n        };\n    }\n}\nconst $d5176f4c1bfaf4b6$export$22c4203689daa739 = new $d5176f4c1bfaf4b6$export$81386075c4f5828b();\n\n\n\n\n/**\r\n * 短期滞在手術等基本料３判定プログラム - パーサー関数\r\n * このファイルには、ファイル解析に関連する関数を含みます。\r\n */ /**\r\n * デフォルトの結果ヘッダー行\r\n */ const $952cec8ced8a46bd$export$4100e9622577bf55 = \"\\u30C7\\u30FC\\u30BF\\u8B58\\u5225\\u756A\\u53F7\t\\u5165\\u9662\\u5E74\\u6708\\u65E5\t\\u9000\\u9662\\u5E74\\u6708\\u65E5\t\\u77ED\\u624B\\uFF13\\u5BFE\\u8C61\\u75C7\\u4F8B\t\\u7406\\u7531\";\nconst $952cec8ced8a46bd$export$f1a027a66665c964 = \"150285010\"; // 長径２センチメートル未満\nconst $952cec8ced8a46bd$export$a01379b891872e93 = \"150183410\"; // 長径２センチメートル以上\nconst $952cec8ced8a46bd$export$9abababf870cce56 = [\n    $952cec8ced8a46bd$export$f1a027a66665c964,\n    $952cec8ced8a46bd$export$a01379b891872e93\n]; // 小・大の両方のコードをまとめた配列\nconst $952cec8ced8a46bd$export$bc8c9440750cf9cc = [\n    \"160218510\",\n    \"160218610\",\n    \"160183110\",\n    \"160119710\",\n    \"160180410\",\n    \"160098110\",\n    \"150351910\",\n    \"150011310\",\n    \"150294810\",\n    \"150020810\",\n    \"150021010\",\n    \"150021210\",\n    \"150041010\",\n    \"150314110\",\n    \"150273810\",\n    \"150355810\",\n    \"150355910\",\n    \"150078810\",\n    \"150079010\",\n    \"150080210\",\n    \"150083410\",\n    \"150083510\",\n    \"150344510\",\n    \"150395150\",\n    \"150253010\",\n    \"150315610\",\n    \"150096010\",\n    \"150097710\",\n    \"150315910\",\n    \"150316010\",\n    \"150106850\",\n    \"150299450\",\n    \"150121110\",\n    \"150121210\",\n    \"150416610\",\n    \"150416710\",\n    \"150154010\",\n    \"150263410\",\n    \"150296510\",\n    \"150154150\",\n    \"150360910\",\n    \"150411150\",\n    \"150159010\",\n    \"150263610\",\n    \"150285010\",\n    \"150183410\",\n    \"150325410\",\n    \"150190310\",\n    \"150190410\",\n    \"150194510\",\n    \"150421110\",\n    \"150404310\",\n    \"150216510\",\n    \"150421310\",\n    \"150421410\",\n    \"150421510\",\n    \"150421610\",\n    \"150421710\",\n    \"150421810\",\n    \"150366110\",\n    \"180018910\"\n];\nconst $952cec8ced8a46bd$export$861aae5ae66b2524 = {\n    \"160218510\": \"\\u7D42\\u591C\\u7761\\u7720\\u30DD\\u30EA\\u30B0\\u30E9\\u30D5\\u30A3\\u30FC\\uFF08\\uFF11\\u53CA\\u3073\\uFF12\\u4EE5\\u5916\\u306E\\u5834\\u5408\\uFF09\\uFF08\\u5B89\\u5168\\u7CBE\\u5EA6\\u7BA1\\u7406\\u4E0B\\u3067\\u884C\\u3046\\u3082\\u306E\\uFF09\",\n    \"160218610\": \"\\u7D42\\u591C\\u7761\\u7720\\u30DD\\u30EA\\u30B0\\u30E9\\u30D5\\u30A3\\u30FC\\uFF08\\uFF11\\u53CA\\u3073\\uFF12\\u4EE5\\u5916\\u306E\\u5834\\u5408\\uFF09\\uFF08\\u305D\\u306E\\u4ED6\\u306E\\u3082\\u306E\\uFF09\",\n    \"160183110\": \"\\u53CD\\u5FA9\\u7761\\u7720\\u6F5C\\u6642\\u8A66\\u9A13\\uFF08\\uFF2D\\uFF33\\uFF2C\\uFF34\\uFF09\",\n    \"160119710\": \"\\u4E0B\\u5782\\u4F53\\u524D\\u8449\\u8CA0\\u8377\\u8A66\\u9A13\\u6210\\u9577\\u30DB\\u30EB\\u30E2\\u30F3\\uFF08\\uFF27\\uFF28\\uFF09\\uFF08\\u4E00\\u9023\\u3068\\u3057\\u3066\\uFF09\",\n    \"160180410\": \"\\u5C0F\\u5150\\u98DF\\u7269\\u30A2\\u30EC\\u30EB\\u30AE\\u30FC\\u8CA0\\u8377\\u691C\\u67FB\",\n    \"160098110\": \"\\u524D\\u7ACB\\u817A\\u91DD\\u751F\\u691C\\u6CD5\\uFF08\\u305D\\u306E\\u4ED6\\u306E\\u3082\\u306E\\uFF09\",\n    \"150351910\": \"\\u7D4C\\u76AE\\u7684\\u653E\\u5C04\\u7DDA\\u6CBB\\u7642\\u7528\\u91D1\\u5C5E\\u30DE\\u30FC\\u30AB\\u30FC\\u7559\\u7F6E\\u8853\",\n    \"150011310\": \"\\u56DB\\u80A2\\u30FB\\u8EAF\\u5E79\\u8EDF\\u90E8\\u816B\\u760D\\u6458\\u51FA\\u8853\\uFF08\\u624B\\uFF09\",\n    \"150294810\": \"\\u9AA8\\u6298\\u89B3\\u8840\\u7684\\u624B\\u8853\\uFF08\\u624B\\u821F\\u72B6\\u9AA8\\uFF09\",\n    \"150020810\": \"\\u9AA8\\u5185\\u7570\\u7269\\uFF08\\u633F\\u5165\\u7269\\u3092\\u542B\\u3080\\u3002\\uFF09\\u9664\\u53BB\\u8853\\uFF08\\u524D\\u8155\\uFF09\",\n    \"150021010\": \"\\u9AA8\\u5185\\u7570\\u7269\\uFF08\\u633F\\u5165\\u7269\\u3092\\u542B\\u3080\\u3002\\uFF09\\u9664\\u53BB\\u8853\\uFF08\\u9396\\u9AA8\\uFF09\",\n    \"150021210\": \"\\u9AA8\\u5185\\u7570\\u7269\\uFF08\\u633F\\u5165\\u7269\\u3092\\u542B\\u3080\\u3002\\uFF09\\u9664\\u53BB\\u8853\\uFF08\\u624B\\uFF09\",\n    \"150041010\": \"\\u30AC\\u30F3\\u30B0\\u30EA\\u30AA\\u30F3\\u6458\\u51FA\\u8853\\uFF08\\u624B\\uFF09\",\n    \"150314110\": \"\\u95A2\\u7BC0\\u93E1\\u4E0B\\u624B\\u6839\\u7BA1\\u958B\\u653E\\u624B\\u8853\",\n    \"150273810\": \"\\u80F8\\u8154\\u93E1\\u4E0B\\u4EA4\\u611F\\u795E\\u7D4C\\u7BC0\\u5207\\u9664\\u8853\\uFF08\\u4E21\\u5074\\uFF09\",\n    \"150355810\": \"\\u6D99\\u7BA1\\u30C1\\u30E5\\u30FC\\u30D6\\u633F\\u5165\\u8853\\uFF08\\u6D99\\u9053\\u5185\\u8996\\u93E1\\u3092\\u7528\\u3044\\u308B\\u3082\\u306E\\uFF09\",\n    \"150355910\": \"\\u773C\\u77BC\\u5185\\u53CD\\u75C7\\u624B\\u8853\\uFF08\\u76AE\\u819A\\u5207\\u958B\\u6CD5\\uFF09\",\n    \"150078810\": \"\\u773C\\u77BC\\u4E0B\\u5782\\u75C7\\u624B\\u8853\\uFF08\\u773C\\u77BC\\u6319\\u7B4B\\u524D\\u8EE2\\u6CD5\\uFF09\",\n    \"150079010\": \"\\u773C\\u77BC\\u4E0B\\u5782\\u75C7\\u624B\\u8853\\uFF08\\u305D\\u306E\\u4ED6\\u306E\\u3082\\u306E\\uFF09\",\n    \"150080210\": \"\\u7FFC\\u72B6\\u7247\\u624B\\u8853\\uFF08\\u5F01\\u306E\\u79FB\\u690D\\u3092\\u8981\\u3059\\u308B\\u3082\\u306E\\uFF09\",\n    \"150083410\": \"\\u659C\\u8996\\u624B\\u8853\\uFF08\\u5F8C\\u8EE2\\u6CD5\\uFF09\",\n    \"150083510\": \"\\u659C\\u8996\\u624B\\u8853\\uFF08\\u524D\\u8EE2\\u6CD5\\u53CA\\u3073\\u5F8C\\u8EE2\\u6CD5\\u306E\\u4F75\\u65BD\\uFF09\",\n    \"150344510\": \"\\u6CBB\\u7642\\u7684\\u89D2\\u819C\\u5207\\u9664\\u8853\\uFF08\\u30A8\\u30AD\\u30B7\\u30DE\\u30EC\\u30FC\\u30B6\\u30FC\\u306B\\u3088\\u308B\\u3082\\u306E\\uFF08\\u89D2\\u819C\\u30B8\\u30B9\\u30C8\\u30ED\\u30D5\\u30A3\\u30FC\\u53C8\\u306F\\u5E2F\\u72B6\\u89D2\\u819C\\u5909\\u6027\\u306B\\u4FC2\\u308B\\u3082\\u306E\\u306B\\u9650\\u308B\\u3002\\uFF09\\uFF09\",\n    \"150395150\": \"\\u7DD1\\u5185\\u969C\\u624B\\u8853\\uFF08\\u6C34\\u6676\\u4F53\\u518D\\u5EFA\\u8853\\u4F75\\u7528\\u773C\\u5185\\u30C9\\u30EC\\u30FC\\u30F3\\u633F\\u5165\\u8853\\uFF09\",\n    \"150253010\": \"\\u6C34\\u6676\\u4F53\\u518D\\u5EFA\\u8853\\uFF08\\u773C\\u5185\\u30EC\\u30F3\\u30BA\\u3092\\u633F\\u5165\\u3059\\u308B\\u5834\\u5408\\uFF09\\uFF08\\u305D\\u306E\\u4ED6\\u306E\\u3082\\u306E\\uFF09\",\n    \"150315610\": \"\\u6C34\\u6676\\u4F53\\u518D\\u5EFA\\u8853\\uFF08\\u773C\\u5185\\u30EC\\u30F3\\u30BA\\u3092\\u633F\\u5165\\u3057\\u306A\\u3044\\u5834\\u5408\\uFF09\",\n    \"150096010\": \"\\u9F13\\u819C\\u5F62\\u6210\\u624B\\u8853\",\n    \"150097710\": \"\\u9F3B\\u9AA8\\u9AA8\\u6298\\u6574\\u5FA9\\u56FA\\u5B9A\\u8853\",\n    \"150315910\": \"\\u58F0\\u5E2F\\u30DD\\u30EA\\u30FC\\u30D7\\u5207\\u9664\\u8853\\uFF08\\u30D5\\u30A1\\u30A4\\u30D0\\u30FC\\u30B9\\u30B3\\u30FC\\u30D7\\u306B\\u3088\\u308B\\u3082\\u306E\\uFF09\",\n    \"150316010\": \"\\u58F0\\u5E2F\\u30DD\\u30EA\\u30FC\\u30D7\\u5207\\u9664\\u8853\\uFF08\\u76F4\\u9054\\u5589\\u982D\\u93E1\\u306B\\u3088\\u308B\\u3082\\u306E\\uFF09\",\n    \"150106850\": \"\\u5589\\u982D\\u30DD\\u30EA\\u30FC\\u30D7\\u5207\\u9664\\u8853\\uFF08\\u76F4\\u9054\\u5589\\u982D\\u93E1\\u306B\\u3088\\u308B\\u3082\\u306E\\uFF09\",\n    \"150299450\": \"\\u5589\\u982D\\u30DD\\u30EA\\u30FC\\u30D7\\u5207\\u9664\\u8853\\uFF08\\u30D5\\u30A1\\u30A4\\u30D0\\u30FC\\u30B9\\u30B3\\u30FC\\u30D7\\u306B\\u3088\\u308B\\u3082\\u306E\\uFF09\",\n    \"150121110\": \"\\u4E73\\u817A\\u816B\\u760D\\u6458\\u51FA\\u8853\\uFF08\\u9577\\u5F84\\uFF15\\u30BB\\u30F3\\u30C1\\u30E1\\u30FC\\u30C8\\u30EB\\u672A\\u6E80\\uFF09\",\n    \"150121210\": \"\\u4E73\\u817A\\u816B\\u760D\\u6458\\u51FA\\u8853\\uFF08\\u9577\\u5F84\\uFF15\\u30BB\\u30F3\\u30C1\\u30E1\\u30FC\\u30C8\\u30EB\\u4EE5\\u4E0A\\uFF09\",\n    \"150416610\": \"\\u7D4C\\u76AE\\u7684\\u30B7\\u30E3\\u30F3\\u30C8\\u62E1\\u5F35\\u8853\\u30FB\\u8840\\u6813\\u9664\\u53BB\\u8853\\uFF08\\u521D\\u56DE\\uFF09\",\n    \"150416710\": \"\\u7D4C\\u76AE\\u7684\\u30B7\\u30E3\\u30F3\\u30C8\\u62E1\\u5F35\\u8853\\u30FB\\u8840\\u6813\\u9664\\u53BB\\u8853\\uFF08\\uFF11\\u306E\\u5B9F\\u65BD\\u5F8C\\uFF13\\u6708\\u4EE5\\u5185\\u306B\\u5B9F\\u65BD\\u3059\\u308B\\u5834\\u5408\\uFF09\",\n    \"150154010\": \"\\u4E0B\\u80A2\\u9759\\u8108\\u7624\\u624B\\u8853\\uFF08\\u629C\\u53BB\\u5207\\u9664\\u8853\\uFF09\",\n    \"150263410\": \"\\u4E0B\\u80A2\\u9759\\u8108\\u7624\\u624B\\u8853\\uFF08\\u786C\\u5316\\u7642\\u6CD5\\uFF08\\u4E00\\u9023\\u3068\\u3057\\u3066\\uFF09\\uFF09\",\n    \"150296510\": \"\\u4E0B\\u80A2\\u9759\\u8108\\u7624\\u624B\\u8853\\uFF08\\u9AD8\\u4F4D\\u7D50\\u7D2E\\u8853\\uFF09\",\n    \"150154150\": \"\\u5927\\u4F0F\\u5728\\u9759\\u8108\\u629C\\u53BB\\u8853\",\n    \"150360910\": \"\\u4E0B\\u80A2\\u9759\\u8108\\u7624\\u8840\\u7BA1\\u5185\\u713C\\u707C\\u8853\",\n    \"150411150\": \"\\u4E0B\\u80A2\\u9759\\u8108\\u7624\\u8840\\u7BA1\\u5185\\u585E\\u6813\\u8853\",\n    \"150159010\": \"\\u30D8\\u30EB\\u30CB\\u30A2\\u624B\\u8853\\uFF08\\u9F20\\u5F84\\u30D8\\u30EB\\u30CB\\u30A2\\uFF09\",\n    \"150263610\": \"\\u8179\\u8154\\u93E1\\u4E0B\\u9F20\\u5F84\\u30D8\\u30EB\\u30CB\\u30A2\\u624B\\u8853\\uFF08\\u4E21\\u5074\\uFF09\",\n    \"150285010\": \"\\u5185\\u8996\\u93E1\\u7684\\u5927\\u8178\\u30DD\\u30EA\\u30FC\\u30D7\\u30FB\\u7C98\\u819C\\u5207\\u9664\\u8853\\uFF08\\u9577\\u5F84\\uFF12\\u30BB\\u30F3\\u30C1\\u30E1\\u30FC\\u30C8\\u30EB\\u672A\\u6E80\\uFF09\",\n    \"150183410\": \"\\u5185\\u8996\\u93E1\\u7684\\u5927\\u8178\\u30DD\\u30EA\\u30FC\\u30D7\\u30FB\\u7C98\\u819C\\u5207\\u9664\\u8853\\uFF08\\u9577\\u5F84\\uFF12\\u30BB\\u30F3\\u30C1\\u30E1\\u30FC\\u30C8\\u30EB\\u4EE5\\u4E0A\\uFF09\",\n    \"150325410\": \"\\u75D4\\u6838\\u624B\\u8853\\uFF08\\u8131\\u809B\\u3092\\u542B\\u3080\\u3002\\uFF09\\uFF08\\u786C\\u5316\\u7642\\u6CD5\\uFF08\\u56DB\\u6BB5\\u968E\\u6CE8\\u5C04\\u6CD5\\u306B\\u3088\\u308B\\u3082\\u306E\\uFF09\\uFF09\",\n    \"150190310\": \"\\u809B\\u9580\\u30DD\\u30EA\\u30FC\\u30D7\\u5207\\u9664\\u8853\",\n    \"150190410\": \"\\u809B\\u9580\\u5C16\\u572D\\u30B3\\u30F3\\u30B8\\u30ED\\u30FC\\u30E0\\u5207\\u9664\\u8853\",\n    \"150194510\": \"\\u4F53\\u5916\\u885D\\u6483\\u6CE2\\u814E\\u30FB\\u5C3F\\u7BA1\\u7D50\\u77F3\\u7834\\u7815\\u8853\\uFF08\\u4E00\\u9023\\u306B\\u3064\\u304D\\uFF09\",\n    \"150421110\": \"\\u5C3F\\u5931\\u7981\\u624B\\u8853\\uFF08\\u30DC\\u30C4\\u30EA\\u30CC\\u30B9\\u6BD2\\u7D20\\u306B\\u3088\\u308B\\u3082\\u306E\\uFF09\",\n    \"150404310\": \"\\u9855\\u5FAE\\u93E1\\u4E0B\\u7CBE\\u7D22\\u9759\\u8108\\u7624\\u624B\\u8853\",\n    \"150216510\": \"\\u5B50\\u5BAE\\u9838\\u90E8\\uFF08\\u815F\\u90E8\\uFF09\\u5207\\u9664\\u8853\",\n    \"150421310\": \"\\u5B50\\u5BAE\\u93E1\\u4E0B\\u6709\\u830E\\u7C98\\u819C\\u4E0B\\u7B4B\\u816B\\u5207\\u51FA\\u8853\\uFF08\\u96FB\\u89E3\\u8CEA\\u6EB6\\u6DB2\\u5229\\u7528\\u306E\\u3082\\u306E\\uFF09\",\n    \"150421410\": \"\\u5B50\\u5BAE\\u5185\\u819C\\u30DD\\u30EA\\u30FC\\u30D7\\u5207\\u9664\\u8853\\uFF08\\u96FB\\u89E3\\u8CEA\\u6EB6\\u6DB2\\u5229\\u7528\\u306E\\u3082\\u306E\\uFF09\",\n    \"150421510\": \"\\u5B50\\u5BAE\\u93E1\\u4E0B\\u6709\\u830E\\u7C98\\u819C\\u4E0B\\u7B4B\\u816B\\u5207\\u51FA\\u8853\\uFF08\\u305D\\u306E\\u4ED6\\u306E\\u3082\\u306E\\uFF09\",\n    \"150421610\": \"\\u5B50\\u5BAE\\u5185\\u819C\\u30DD\\u30EA\\u30FC\\u30D7\\u5207\\u9664\\u8853\\uFF08\\u305D\\u306E\\u4ED6\\u306E\\u3082\\u306E\\uFF09\",\n    \"150421710\": \"\\u5B50\\u5BAE\\u93E1\\u4E0B\\u5B50\\u5BAE\\u7B4B\\u816B\\u6458\\u51FA\\u8853\\uFF08\\u96FB\\u89E3\\u8CEA\\u6EB6\\u6DB2\\u5229\\u7528\\u306E\\u3082\\u306E\\uFF09\",\n    \"150421810\": \"\\u5B50\\u5BAE\\u93E1\\u4E0B\\u5B50\\u5BAE\\u7B4B\\u816B\\u6458\\u51FA\\u8853\\uFF08\\u305D\\u306E\\u4ED6\\u306E\\u3082\\u306E\\uFF09\",\n    \"150366110\": \"\\u8179\\u8154\\u93E1\\u4E0B\\u5375\\u7BA1\\u5F62\\u6210\\u8853\",\n    \"180018910\": \"\\u30AC\\u30F3\\u30DE\\u30CA\\u30A4\\u30D5\\u306B\\u3088\\u308B\\u5B9A\\u4F4D\\u653E\\u5C04\\u7DDA\\u6CBB\\u7642\"\n};\nconst $952cec8ced8a46bd$export$c2dd158f3483965f = [\n    \"150429570\",\n    \"150437170\"\n];\nconst $952cec8ced8a46bd$export$e682c072e4e56117 = 5;\nconst $952cec8ced8a46bd$export$b875acc5e1c1d7cd = {\n    UNDISCHARGED: \"\\u9000\\u9662\\u65E5\\u672A\\u78BA\\u5B9A\",\n    NO_TARGET_PROCEDURE: \"\\u5BFE\\u8C61\\u624B\\u8853\\u7B49\\u306A\\u3057\",\n    HOSPITAL_DAYS_EXCEEDED: \"\\u5165\\u9662\\u671F\\u9593\\u304C\\uFF16\\u65E5\\u4EE5\\u4E0A\",\n    MULTIPLE_TARGET_PROCEDURES: \"\\u5BFE\\u8C61\\u624B\\u8853\\u7B49\\u3092\\uFF12\\u4EE5\\u4E0A\\u5B9F\\u65BD\",\n    OTHER_SURGERY: \"\\u5BFE\\u8C61\\u624B\\u8853\\u7B49\\u4EE5\\u5916\\u306E\\u624B\\u8853\\u3042\\u308A\",\n    SPECIAL_ADDITION: \"\\u5185\\u8996\\u93E1\\u7684\\u5927\\u8178\\u30DD\\u30EA\\u30FC\\u30D7\\u8853\\u306B\\u7279\\u5B9A\\u52A0\\u7B97\\u3042\\u308A\"\n};\n\n\n/**\r\n * EFファイルの行からデータを抽出する共通関数\r\n * @param columns - データ列の配列\r\n * @returns 患者データ（対象手術の場合は完全、それ以外は基本情報のみ）またはnull（データが不十分な場合）\r\n */ function $d4b1decbb56d16ba$var$extractCaseData(columns) {\n    // 少なくとも基本情報（ID, 入院日, 退院日）を含む列が必要\n    if (columns.length < 4) return null;\n    const dataId = columns[1].trim();\n    if (!dataId) return null;\n    const admission = columns[3].trim();\n    const discharge = columns[2].trim();\n    // 行為明細番号を取得 (列が存在する場合のみ)\n    const actionDetailNo = columns.length > 6 ? columns[6].trim() : null;\n    // 行為明細番号が\"000\"の行（Eファイル）は日付更新にも不要なためスキップ\n    if (actionDetailNo === '000') return null;\n    // 基本情報\n    const basicInfo = {\n        dataId: dataId,\n        admission: admission,\n        discharge: discharge\n    };\n    // レセプト電算コードと診療明細名称を取得 (列が存在する場合のみ)\n    const procedure = columns.length > 8 ? columns[8].trim() : null;\n    const procedureName = columns.length > 10 ? columns[10].trim() : null;\n    // 短手3の対象手術かどうかを判定\n    if (!procedure || !(0, $952cec8ced8a46bd$export$bc8c9440750cf9cc).includes(procedure)) // 対象手術でなくても基本情報は返す（日付更新のため）\n    return {\n        ...basicInfo,\n        procedure: null,\n        procedureName: null\n    };\n    // 対象手術の場合、完全な情報を返す\n    // RawCaseData型にキャストして返す (procedureはstringであることが保証されている)\n    // procedureNameがnullの場合もデフォルト値を設定し、string型を保証\n    return {\n        ...basicInfo,\n        procedure: procedure,\n        procedureName: procedureName ?? \"(\\u540D\\u79F0\\u306A\\u3057)\" // Ensure string type for RawCaseData compatibility\n    };\n}\nfunction $d4b1decbb56d16ba$export$571ac2eb53ddaf2d(content) {\n    const lines = content.split(/\\r?\\n/);\n    const caseMap = {}; // 同一患者の情報を一時的に保持するためのマップ\n    // ヘッダー行を除いたデータ行を処理\n    for(let i = 1; i < lines.length; i++){\n        const line = lines[i].trim();\n        if (!line) continue;\n        try {\n            const columns = line.split('\\t');\n            const extractedData = $d4b1decbb56d16ba$var$extractCaseData(columns);\n            if (extractedData) {\n                const { dataId: dataId, discharge: discharge, admission: admission, procedure: procedure, procedureName: procedureName } = extractedData;\n                // 既存の症例データを取得または新規作成\n                let currentCase = caseMap[dataId];\n                if (!currentCase) {\n                    currentCase = {\n                        id: dataId,\n                        admission: admission,\n                        discharge: discharge,\n                        procedures: [],\n                        procedureNames: []\n                    };\n                    caseMap[dataId] = currentCase;\n                }\n                // 退院日の更新 (00000000 でなく、既存より新しい日付の場合)\n                // 注意: 日付文字列の単純比較で良いか要確認。YYYYMMDD形式ならOK。\n                if (discharge && discharge !== '00000000' && (!currentCase.discharge || currentCase.discharge === '00000000' || discharge > currentCase.discharge)) currentCase.discharge = discharge;\n                // 入院日も同様に更新が必要な場合があるかもしれないが、今回は退院日のみ考慮\n                // 対象手術コードと名称を追加（procedureがnullでない場合のみ）\n                if (procedure && !currentCase.procedures.includes(procedure)) {\n                    currentCase.procedures.push(procedure);\n                    // procedureName が null の場合も考慮して追加 (明示的なチェックを追加)\n                    if (currentCase.procedureNames) currentCase.procedureNames.push(procedureName ?? \"(\\u540D\\u79F0\\u306A\\u3057)\");\n                }\n            }\n        } catch (error) {\n            continue;\n        }\n    }\n    return Object.values(caseMap);\n}\nfunction $d4b1decbb56d16ba$export$b88fb33a849f1168(existingCases, newCases) {\n    const caseMap = {};\n    // 既存のケースをマップに追加\n    for (const c of existingCases)caseMap[c.id] = {\n        ...c,\n        procedures: Array.isArray(c.procedures) ? [\n            ...c.procedures\n        ] : [],\n        procedureNames: Array.isArray(c.procedureNames) ? [\n            ...c.procedureNames\n        ] : []\n    };\n    // 新しいケースをマージ\n    for (const c of newCases)if (caseMap[c.id]) {\n        const currentCase = caseMap[c.id];\n        // 退院日が確定した場合（00000000 から具体的な日付に変わった場合）\n        if (c.discharge !== '00000000') currentCase.discharge = c.discharge;\n        // procedures と procedureNames の初期化を確実に行う\n        if (!Array.isArray(currentCase.procedures)) currentCase.procedures = [];\n        if (!Array.isArray(currentCase.procedureNames)) currentCase.procedureNames = [];\n        // 新しい手術コードを追加（重複を避ける）\n        const procedures = Array.isArray(c.procedures) ? c.procedures : [];\n        const procedureNames = Array.isArray(c.procedureNames) ? c.procedureNames : [];\n        for(let i = 0; i < procedures.length; i++){\n            const proc = procedures[i];\n            if (!currentCase.procedures.includes(proc)) {\n                currentCase.procedures.push(proc);\n                // 対応する手術名も追加（存在する場合）\n                if (procedureNames[i]) currentCase.procedureNames.push(procedureNames[i]);\n            }\n        }\n    } else // 新しい症例を追加\n    caseMap[c.id] = {\n        ...c,\n        procedures: Array.isArray(c.procedures) ? [\n            ...c.procedures\n        ] : [],\n        procedureNames: Array.isArray(c.procedureNames) ? [\n            ...c.procedureNames\n        ] : []\n    };\n    return Object.values(caseMap);\n}\nfunction $d4b1decbb56d16ba$export$19ab349828c56f9a(content) {\n    const result = {\n        isValid: true,\n        errors: [],\n        warnings: []\n    };\n    if (!content || content.trim() === '') {\n        result.isValid = false;\n        result.errors.push(\"\\u30D5\\u30A1\\u30A4\\u30EB\\u304C\\u7A7A\\u3067\\u3059\\u3002\");\n        return result;\n    }\n    const lines = content.split(/\\r?\\n/);\n    if (lines.length < 2) {\n        result.isValid = false;\n        result.errors.push(\"\\u30D5\\u30A1\\u30A4\\u30EB\\u306B\\u5C11\\u306A\\u304F\\u3068\\u3082\\u30D8\\u30C3\\u30C0\\u30FC\\u884C\\u3068\\u30C7\\u30FC\\u30BF\\u884C\\u304C\\u542B\\u307E\\u308C\\u3066\\u3044\\u307E\\u305B\\u3093\\u3002\");\n    }\n    return result;\n}\n\n\n/**\r\n * 短期滞在手術等基本料３判定プログラム - 評価ロジック\r\n * このファイルには、短手３該当症例の判定などの評価ロジックを含みます。\r\n */ /**\r\n * 短期滞在手術等基本料３判定プログラム - ユーティリティ関数\r\n * このファイルには、アプリケーション全体で使用される汎用的な関数を含みます。\r\n */ /**\r\n * 日付文字列（yyyymmdd）をDateオブジェクトに変換する関数\r\n * @param dateStr - 変換する日付文字列（yyyymmdd形式）\r\n * @returns Dateオブジェクトまたはnull（無効な日付の場合）\r\n */ function $f9424a7ebcc0e1f6$export$6b862160d295c8e(dateStr) {\n    if (!dateStr || dateStr === '00000000') return null;\n    try {\n        const year = parseInt(dateStr.substring(0, 4), 10);\n        const month = parseInt(dateStr.substring(4, 6), 10) - 1; // 月は0から始まる\n        const day = parseInt(dateStr.substring(6, 8), 10);\n        const date = new Date(year, month, day);\n        // 有効な日付かチェック\n        if (isNaN(date.getTime())) return null;\n        return date;\n    } catch (error) {\n        console.error(`\\u{65E5}\\u{4ED8}\\u{306E}\\u{89E3}\\u{6790}\\u{4E2D}\\u{306B}\\u{30A8}\\u{30E9}\\u{30FC}\\u{304C}\\u{767A}\\u{751F}\\u{3057}\\u{307E}\\u{3057}\\u{305F}: ${dateStr} - ${error instanceof Error ? error.message : String(error)}`);\n        return null;\n    }\n}\nfunction $f9424a7ebcc0e1f6$export$b1f346a0d0b04f26(admissionStr, dischargeStr) {\n    const admissionDate = $f9424a7ebcc0e1f6$export$6b862160d295c8e(admissionStr);\n    const dischargeDate = $f9424a7ebcc0e1f6$export$6b862160d295c8e(dischargeStr);\n    if (!admissionDate || !dischargeDate) return null;\n    // ミリ秒数を日数に変換（1日 = 24 * 60 * 60 * 1000 ミリ秒）\n    // 入院日と退院日も期間に含めるため、計算結果に1を加える\n    const diffDays = Math.round((dischargeDate.getTime() - admissionDate.getTime()) / 86400000);\n    return diffDays + 1;\n}\nfunction $f9424a7ebcc0e1f6$export$3ae94a2503e890a1(dateStr, format = 'yyyymmdd') {\n    // 00000000の場合はそのまま返す\n    if (dateStr === '00000000') return dateStr;\n    // 日付オブジェクトに変換\n    const date = $f9424a7ebcc0e1f6$export$6b862160d295c8e(dateStr);\n    if (!date) return dateStr; // 変換できない場合は元の文字列を返す\n    // 年、月、日を取得\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1; // 月は0から始まるので+1\n    const day = date.getDate();\n    // 指定されたフォーマットに変換\n    if (format === 'yyyy/mm/dd') return `${year}/${month.toString().padStart(2, '0')}/${day.toString().padStart(2, '0')}`;\n    else return `${year}${month.toString().padStart(2, '0')}${day.toString().padStart(2, '0')}`;\n}\nfunction $f9424a7ebcc0e1f6$export$82f46aa4e6535a45(error) {\n    if (error instanceof Error) return error.message;\n    return String(error);\n}\n\n\n\nfunction $17747c2b7083ee11$export$17a9168246d97340(cases) {\n    // 全症例に対して適格性と理由を設定\n    const evaluatedCases = cases.map((c)=>{\n        try {\n            // 評価結果を格納するオブジェクトを作成（元のオブジェクトをコピー）\n            const evaluatedCase = {\n                ...c\n            };\n            // 1. 退院日が '00000000' でない（退院が確定している）\n            if (!c.discharge || c.discharge === '00000000') {\n                evaluatedCase.isEligible = false;\n                evaluatedCase.reason = (0, $952cec8ced8a46bd$export$b875acc5e1c1d7cd).UNDISCHARGED;\n                return evaluatedCase;\n            }\n            // 2. 対象手術等の実施（少なくとも1つの対象手術等が実施されている）\n            const targetProceduresFound = c.procedures.filter((p)=>(0, $952cec8ced8a46bd$export$bc8c9440750cf9cc).includes(p));\n            if (targetProceduresFound.length === 0) {\n                evaluatedCase.isEligible = false;\n                evaluatedCase.reason = (0, $952cec8ced8a46bd$export$b875acc5e1c1d7cd).NO_TARGET_PROCEDURE;\n                return evaluatedCase;\n            }\n            // 3. 入院期間が5日以内\n            const hospitalDays = (0, $f9424a7ebcc0e1f6$export$b1f346a0d0b04f26)(c.admission, c.discharge);\n            if (hospitalDays === null || hospitalDays > (0, $952cec8ced8a46bd$export$e682c072e4e56117)) {\n                evaluatedCase.isEligible = false;\n                evaluatedCase.reason = (0, $952cec8ced8a46bd$export$b875acc5e1c1d7cd).HOSPITAL_DAYS_EXCEEDED;\n                return evaluatedCase;\n            }\n            // 4. 入院期間中に対象手術等を2以上実施していないかチェック\n            // ただし、同一の対象手術等を複数回実施する場合は例外とする\n            if (targetProceduresFound.length > 1) {\n                // 対象手術等の種類数をカウント（重複を除外）\n                const uniqueTargetProcedures = new Set(targetProceduresFound);\n                if (uniqueTargetProcedures.size > 1) {\n                    evaluatedCase.isEligible = false;\n                    evaluatedCase.reason = (0, $952cec8ced8a46bd$export$b875acc5e1c1d7cd).MULTIPLE_TARGET_PROCEDURES;\n                    return evaluatedCase;\n                }\n            }\n            // 5. 入院期間中に対象手術等に加えて、他の手術を実施していないかチェック\n            // 手術コードは通常 '15' で始まるが、診療明細名称に「加算」が含まれるコードは手術ではないため除外\n            const surgeryProcedures = c.procedures.filter((p, index)=>{\n                // 対象手術等に含まれるコードは除外\n                if ((0, $952cec8ced8a46bd$export$bc8c9440750cf9cc).includes(p)) return false;\n                // '15'で始まるコードのみを対象\n                if (!p.startsWith('15')) return false;\n                // 診療明細名称に「加算」が含まれるコードは手術ではないため除外\n                if (c.procedureNames && c.procedureNames[index] && c.procedureNames[index].includes(\"\\u52A0\\u7B97\")) return false;\n                // 加算コードは通常、特定のパターンを持つ（例：150000490）\n                // 多くの加算コードは '1500' で始まり、その後に '00' が続く\n                if (p.startsWith('1500') && p.substring(4, 6) === '00') return false;\n                return true;\n            });\n            if (surgeryProcedures.length > 0) {\n                evaluatedCase.isEligible = false;\n                evaluatedCase.reason = (0, $952cec8ced8a46bd$export$b875acc5e1c1d7cd).OTHER_SURGERY;\n                return evaluatedCase;\n            }\n            // 6. 内視鏡的大腸ポリープ・粘膜切除術の特定加算チェック\n            // 内視鏡的大腸ポリープ・粘膜切除術を実施したかどうか\n            const hasColonoscopy = c.procedures.some((p)=>(0, $952cec8ced8a46bd$export$9abababf870cce56).includes(p));\n            // 特定加算が含まれているかどうか\n            const hasSpecialAddition = c.procedures.some((p)=>(0, $952cec8ced8a46bd$export$c2dd158f3483965f).includes(p));\n            // 内視鏡的大腸ポリープ術に特定加算がある場合は対象外\n            if (hasColonoscopy && hasSpecialAddition) {\n                evaluatedCase.isEligible = false;\n                evaluatedCase.reason = (0, $952cec8ced8a46bd$export$b875acc5e1c1d7cd).SPECIAL_ADDITION;\n                return evaluatedCase;\n            }\n            // すべての条件を満たす場合は短手３対象症例\n            evaluatedCase.isEligible = true;\n            // 実施された対象手術の名称を理由として設定\n            const procedureCode = targetProceduresFound[0]; // 最初の対象手術コード\n            evaluatedCase.reason = (0, $952cec8ced8a46bd$export$861aae5ae66b2524)[procedureCode] || \"\\u5BFE\\u8C61\\u624B\\u8853\\u7B49\";\n            return evaluatedCase;\n        } catch (error) {\n            console.error(`\\u{75C7}\\u{4F8B} ${c.id} \\u{306E}\\u{8A55}\\u{4FA1}\\u{4E2D}\\u{306B}\\u{30A8}\\u{30E9}\\u{30FC}\\u{304C}\\u{767A}\\u{751F}\\u{3057}\\u{307E}\\u{3057}\\u{305F}: ${error instanceof Error ? error.message : String(error)}`);\n            // エラーが発生した場合は該当しないと判断\n            return {\n                ...c,\n                isEligible: false,\n                reason: `\\u{8A55}\\u{4FA1}\\u{30A8}\\u{30E9}\\u{30FC}: ${error instanceof Error ? error.message : String(error)}`\n            };\n        }\n    });\n    // 修正: フィルタリングせず、全ての評価済み症例を返す\n    // フィルタリングは formatResults で行う\n    // ID順にソート\n    return evaluatedCases.sort((a, b)=>a.id.localeCompare(b.id));\n}\nfunction $17747c2b7083ee11$export$cee0a265a810f88b(cases, headerLine = (0, $952cec8ced8a46bd$export$4100e9622577bf55), settings// デフォルト値を削除し、必須引数とする\n) {\n    // 設定に基づいて出力する症例をフィルタリング\n    const filteredCases = settings.outputMode === 'allCases' ? cases : cases.filter((c)=>c.isEligible === true);\n    // 症例が存在しない場合\n    if (filteredCases.length === 0) return \"\\u8A72\\u5F53\\u3059\\u308B\\u75C7\\u4F8B\\u306F\\u3042\\u308A\\u307E\\u305B\\u3093\\u3002\";\n    // ヘッダー行を配列の最初の要素として追加\n    const lines = [\n        headerLine\n    ];\n    // 各症例のデータ行を追加\n    filteredCases.forEach((c)=>{\n        // 日付を指定されたフォーマットに変換\n        const admissionDate = (0, $f9424a7ebcc0e1f6$export$3ae94a2503e890a1)(c.admission, settings.dateFormat);\n        const dischargeDate = (0, $f9424a7ebcc0e1f6$export$3ae94a2503e890a1)(c.discharge, settings.dateFormat);\n        const line = `${c.id}\\t${admissionDate}\\t${dischargeDate}\\t${c.isEligible ? 'Yes' : 'No'}\\t${c.reason || ''}`;\n        lines.push(line);\n    });\n    // 行を改行文字で結合して返す\n    return lines.join('\\n');\n}\n\n\n\n/**\r\n * ファイル処理クラス\r\n * EFファイルの読み込みと処理を行うユーティリティ\r\n */ class $8acc7c30e37a5f1a$var$FileProcessor {\n    /**\r\n     * 複数のファイルを処理する\r\n * @param files 処理対象のファイル配列\r\n * @param settings 出力設定\r\n * @returns 処理結果のプロミス\r\n */ async processFiles(files, settings) {\n        try {\n            if (!files || files.length === 0) throw new Error(\"\\u30D5\\u30A1\\u30A4\\u30EB\\u304C\\u9078\\u629E\\u3055\\u308C\\u3066\\u3044\\u307E\\u305B\\u3093\");\n            // ファイルの内容を読み込む\n            const fileContents = [];\n            for (const file of files){\n                const content = await (0, $7a1670790cbbe4b0$export$7dc2912951b09f)(file);\n                fileContents.push(content);\n            }\n            // ファイルの内容を解析して症例データを統合\n            let allCases = [];\n            for (const content of fileContents){\n                const cases = (0, $d4b1decbb56d16ba$export$571ac2eb53ddaf2d)(content);\n                allCases = (0, $d4b1decbb56d16ba$export$b88fb33a849f1168)(allCases, cases);\n            }\n            // 判定処理を実行\n            const evaluatedCases = (0, $17747c2b7083ee11$export$17a9168246d97340)(allCases);\n            // 結果をフォーマット\n            const result = (0, $17747c2b7083ee11$export$cee0a265a810f88b)(evaluatedCases, (0, $952cec8ced8a46bd$export$4100e9622577bf55), settings); // settings を渡すように修正\n            return result;\n        } catch (error) {\n            console.error(\"\\u30D5\\u30A1\\u30A4\\u30EB\\u51E6\\u7406\\u30A8\\u30E9\\u30FC:\", error);\n            throw error;\n        }\n    }\n}\nconst $8acc7c30e37a5f1a$export$62de47a40c7b42b0 = new $8acc7c30e37a5f1a$var$FileProcessor();\n\n\n/**\r\n * アプリケーションクラス\r\n */ class $157295337300d7f0$var$Application {\n    /**\r\n     * アプリケーションの初期化\r\n     */ init() {\n        // DOM要素の取得\n        this.loadingIndicator = document.getElementById('loadingIndicator');\n        this.executeButton = document.getElementById('executeButton');\n        // イベントリスナーの設定\n        this.setupEventListeners();\n    }\n    /**\r\n     * イベントリスナーの設定\r\n     */ setupEventListeners() {\n        // 実行ボタンのイベント\n        if (this.executeButton) this.executeButton.addEventListener('click', ()=>{\n            this.processFiles();\n        });\n        // 他のイベントリスナーを設定...\n        document.addEventListener('filesClear', ()=>{\n        // ファイルクリア時の処理（ステップ更新は削除）\n        });\n    }\n    /**\r\n     * ファイル処理の実行\r\n     */ async processFiles() {\n        try {\n            // ファイルが選択されているか確認\n            const selectedFiles = this.fileManagerInstance.getSelectedFiles();\n            if (selectedFiles.length === 0) {\n                this.handleError(new Error(\"\\u30D5\\u30A1\\u30A4\\u30EB\\u304C\\u9078\\u629E\\u3055\\u308C\\u3066\\u3044\\u307E\\u305B\\u3093\"), 'no-files', {\n                    recoveryAction: {\n                        message: \"\\u30D5\\u30A1\\u30A4\\u30EB\\u3092\\u9078\\u629E\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\",\n                        label: \"\\u30D5\\u30A1\\u30A4\\u30EB\\u9078\\u629E\",\n                        handler: ()=>{\n                            const fileInput = document.getElementById('fileInput');\n                            if (fileInput) fileInput.click();\n                        }\n                    }\n                });\n                return;\n            }\n            // 処理中表示\n            if (this.loadingIndicator) this.loadingIndicator.classList.add('active');\n            // ファイルの検証\n            const isValid = await this.fileManagerInstance.validateSelectedFiles();\n            if (!isValid) {\n                if (this.loadingIndicator) this.loadingIndicator.classList.remove('active');\n                // ステップ更新は削除\n                return;\n            }\n            // UIから出力設定を取得\n            const outputSettings = (0, $d5176f4c1bfaf4b6$export$22c4203689daa739).getOutputSettings();\n            // 処理の実行 (設定を渡す)\n            const resultText = await (0, $8acc7c30e37a5f1a$export$62de47a40c7b42b0).processFiles(selectedFiles, outputSettings);\n            // 結果の表示\n            (0, $d5176f4c1bfaf4b6$export$22c4203689daa739).displayResult(resultText);\n            // 成功通知\n            (0, $c338b0f983d437f5$export$6af13b7de7554010).showToast('success', \"\\u51E6\\u7406\\u5B8C\\u4E86\", \"\\u51E6\\u7406\\u304C\\u6B63\\u5E38\\u306B\\u5B8C\\u4E86\\u3057\\u307E\\u3057\\u305F\", 5000, 2);\n        } catch (error) {\n            this.handleError(error instanceof Error ? error : new Error(\"\\u4E0D\\u660E\\u306A\\u30A8\\u30E9\\u30FC\"), 'processing', {\n                recoveryAction: {\n                    message: \"\\u8A2D\\u5B9A\\u3092\\u5909\\u66F4\\u3057\\u3066\\u518D\\u8A66\\u884C\\u3057\\u307E\\u3059\\u304B\\uFF1F\",\n                    label: \"\\u518D\\u8A66\\u884C\",\n                    handler: ()=>{\n                        if (this.executeButton) this.executeButton.click();\n                    }\n                },\n                updateUI: ()=>{\n                // エラー時のUI更新（ステップ更新は削除）\n                }\n            });\n        } finally{\n            // 処理中表示を非表示\n            if (this.loadingIndicator) this.loadingIndicator.classList.remove('active');\n        }\n    }\n    /**\r\n     * エラーハンドリング\r\n     * @param error エラーオブジェクト\r\n     * @param context エラーコンテキスト\r\n     * @param options 追加オプション\r\n     */ handleError(error, context, options = {}) {\n        console.error(`\\u{30A8}\\u{30E9}\\u{30FC} (${context}):`, error);\n        // エラータイプに基づいて適切なメッセージと解決策を提供\n        let title = \"\\u30A8\\u30E9\\u30FC\\u304C\\u767A\\u751F\\u3057\\u307E\\u3057\\u305F\";\n        let message = error.message || \"\\u30A8\\u30E9\\u30FC\\u304C\\u767A\\u751F\\u3057\\u307E\\u3057\\u305F\";\n        let solution = '';\n        let priority = 4; // エラーは高い優先度\n        switch(context){\n            case 'processing':\n                title = \"\\u51E6\\u7406\\u30A8\\u30E9\\u30FC\";\n                if (error.message.includes(\"\\u30E1\\u30E2\\u30EA\")) solution = \"\\u30D5\\u30A1\\u30A4\\u30EB\\u30B5\\u30A4\\u30BA\\u304C\\u5927\\u304D\\u3059\\u304E\\u308B\\u53EF\\u80FD\\u6027\\u304C\\u3042\\u308A\\u307E\\u3059\\u3002\\u5C0F\\u3055\\u306A\\u30D5\\u30A1\\u30A4\\u30EB\\u306B\\u5206\\u5272\\u3057\\u3066\\u51E6\\u7406\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\";\n                else solution = \"\\u5165\\u529B\\u30C7\\u30FC\\u30BF\\u3092\\u78BA\\u8A8D\\u3057\\u3001\\u518D\\u5EA6\\u5B9F\\u884C\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\";\n                break;\n            case 'no-files':\n                title = \"\\u30D5\\u30A1\\u30A4\\u30EB\\u672A\\u9078\\u629E\";\n                message = \"\\u30D5\\u30A1\\u30A4\\u30EB\\u304C\\u9078\\u629E\\u3055\\u308C\\u3066\\u3044\\u307E\\u305B\\u3093\";\n                solution = \"\\u30D5\\u30A1\\u30A4\\u30EB\\u3092\\u9078\\u629E\\u3057\\u3066\\u304B\\u3089\\u51E6\\u7406\\u3092\\u5B9F\\u884C\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\";\n                break;\n            default:\n                solution = \"\\u554F\\u984C\\u304C\\u89E3\\u6C7A\\u3057\\u306A\\u3044\\u5834\\u5408\\u306F\\u3001\\u30DA\\u30FC\\u30B8\\u3092\\u518D\\u8AAD\\u307F\\u8FBC\\u307F\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\";\n        }\n        // 解決策がある場合はメッセージに追加\n        const fullMessage = solution ? `${message}<br><span class=\"error-solution\">\\u{89E3}\\u{6C7A}\\u{7B56}: ${solution}</span>` : message;\n        // 通知を表示\n        (0, $c338b0f983d437f5$export$6af13b7de7554010).showToast('error', title, fullMessage, 8000, priority);\n        // エラー回復のためのアクションを提供\n        if (options.recoveryAction && options.recoveryAction.message && options.recoveryAction.label && options.recoveryAction.handler) {\n            const recoveryAction = {\n                message: options.recoveryAction.message,\n                label: options.recoveryAction.label,\n                handler: options.recoveryAction.handler\n            };\n            setTimeout(()=>{\n                (0, $c338b0f983d437f5$export$6af13b7de7554010).showRecoveryToast(recoveryAction);\n            }, 1000);\n        }\n        // エラー状態をUIに反映\n        if (options.updateUI) options.updateUI();\n    }\n    constructor(){\n        this.loadingIndicator = null;\n        this.executeButton = null;\n        this.fileManagerInstance = (0, $e3e22f6c17ed805e$export$d45d33c808f51185).instance;\n    }\n}\n// DOMContentLoaded イベントで初期化\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    try {\n        const app = new $157295337300d7f0$var$Application();\n        app.init();\n    } catch (error) {\n        console.error(\"\\u521D\\u671F\\u5316\\u30A8\\u30E9\\u30FC:\", error);\n        // エラーメッセージを画面に表示\n        const errorDiv = document.createElement('div');\n        errorDiv.className = 'initialization-error';\n        errorDiv.textContent = \"\\u521D\\u671F\\u5316\\u4E2D\\u306B\\u30A8\\u30E9\\u30FC\\u304C\\u767A\\u751F\\u3057\\u307E\\u3057\\u305F\\u3002\\u30DA\\u30FC\\u30B8\\u3092\\u518D\\u8AAD\\u307F\\u8FBC\\u307F\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\";\n        document.body.prepend(errorDiv);\n    }\n});\n\n})();\n//# sourceMappingURL=main.js.map\n","/**\r\n * 短期滞在手術等基本料３判定プログラム - メインアプリケーション\r\n * \r\n * このファイルは、アプリケーションのエントリーポイントです。\r\n * 各コンポーネントの初期化と連携を行います。\r\n */\r\nimport { fileManager } from '../ui/components/file-manager';\r\nimport { resultViewer } from '../ui/components/result-viewer';\r\nimport { notificationSystem } from '../ui/components/notification';\r\nimport { fileProcessor } from '../core/file-processor';\r\nimport { ErrorHandlerOptions } from '../types/types';\r\n\r\n/**\r\n * アプリケーションクラス\r\n */\r\nclass Application {\r\n    private loadingIndicator: HTMLElement | null = null;\r\n    private executeButton: HTMLButtonElement | null = null;\r\n    private fileManagerInstance = fileManager.instance;\r\n\r\n    /**\r\n     * アプリケーションの初期化\r\n     */\r\n    public init(): void {\r\n        // DOM要素の取得\r\n        this.loadingIndicator = document.getElementById('loadingIndicator');\r\n        this.executeButton = document.getElementById('executeButton') as HTMLButtonElement;\r\n\r\n        // イベントリスナーの設定\r\n        this.setupEventListeners();\r\n    }\r\n\r\n    /**\r\n     * イベントリスナーの設定\r\n     */\r\n    private setupEventListeners(): void {\r\n        // 実行ボタンのイベント\r\n        if (this.executeButton) {\r\n            this.executeButton.addEventListener('click', () => {\r\n                this.processFiles();\r\n            });\r\n        }\r\n\r\n        // 他のイベントリスナーを設定...\r\n        document.addEventListener('filesClear', () => {\r\n            // ファイルクリア時の処理（ステップ更新は削除）\r\n        });\r\n    }\r\n\r\n    /**\r\n     * ファイル処理の実行\r\n     */\r\n    private async processFiles(): Promise<void> {\r\n        try {\r\n            // ファイルが選択されているか確認\r\n            const selectedFiles = this.fileManagerInstance.getSelectedFiles();\r\n            if (selectedFiles.length === 0) {\r\n                this.handleError(new Error('ファイルが選択されていません'), 'no-files', {\r\n                    recoveryAction: {\r\n                        message: 'ファイルを選択してください',\r\n                        label: 'ファイル選択',\r\n                        handler: () => {\r\n                            const fileInput = document.getElementById('fileInput');\r\n                            if (fileInput) fileInput.click();\r\n                        }\r\n                    }\r\n                });\r\n                return;\r\n            }\r\n\r\n            // 処理中表示\r\n            if (this.loadingIndicator) {\r\n                this.loadingIndicator.classList.add('active');\r\n            }\r\n\r\n            // ファイルの検証\r\n            const isValid = await this.fileManagerInstance.validateSelectedFiles();\r\n            if (!isValid) {\r\n                if (this.loadingIndicator) {\r\n                    this.loadingIndicator.classList.remove('active');\r\n                }\r\n                // ステップ更新は削除\r\n                return;\r\n            }\r\n\r\n            // UIから出力設定を取得\r\n            const outputSettings = resultViewer.getOutputSettings();\r\n\r\n            // 処理の実行 (設定を渡す)\r\n            const resultText = await fileProcessor.processFiles(selectedFiles, outputSettings);\r\n\r\n            // 結果の表示\r\n            resultViewer.displayResult(resultText);\r\n\r\n            // 成功通知\r\n            notificationSystem.showToast('success', '処理完了', '処理が正常に完了しました', 5000, 2);\r\n        } catch (error) {\r\n            this.handleError(error instanceof Error ? error : new Error('不明なエラー'), 'processing', {\r\n                recoveryAction: {\r\n                    message: '設定を変更して再試行しますか？',\r\n                    label: '再試行',\r\n                    handler: () => {\r\n                        if (this.executeButton) this.executeButton.click();\r\n                    }\r\n                },\r\n                updateUI: () => {\r\n                    // エラー時のUI更新（ステップ更新は削除）\r\n                }\r\n            });\r\n        } finally {\r\n            // 処理中表示を非表示\r\n            if (this.loadingIndicator) {\r\n                this.loadingIndicator.classList.remove('active');\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * エラーハンドリング\r\n     * @param error エラーオブジェクト\r\n     * @param context エラーコンテキスト\r\n     * @param options 追加オプション\r\n     */\r\n    private handleError(error: Error, context: string, options: ErrorHandlerOptions = {}): void {\r\n        console.error(`エラー (${context}):`, error);\r\n\r\n        // エラータイプに基づいて適切なメッセージと解決策を提供\r\n        let title = 'エラーが発生しました';\r\n        let message = error.message || 'エラーが発生しました';\r\n        let solution = '';\r\n        let priority = 4; // エラーは高い優先度\r\n\r\n        switch (context) {\r\n            case 'processing':\r\n                title = '処理エラー';\r\n                if (error.message.includes('メモリ')) {\r\n                    solution = 'ファイルサイズが大きすぎる可能性があります。小さなファイルに分割して処理してください';\r\n                } else {\r\n                    solution = '入力データを確認し、再度実行してください';\r\n                }\r\n                break;\r\n\r\n            case 'no-files':\r\n                title = 'ファイル未選択';\r\n                message = 'ファイルが選択されていません';\r\n                solution = 'ファイルを選択してから処理を実行してください';\r\n                break;\r\n\r\n            default:\r\n                solution = '問題が解決しない場合は、ページを再読み込みしてください';\r\n        }\r\n\r\n        // 解決策がある場合はメッセージに追加\r\n        const fullMessage = solution ? `${message}<br><span class=\"error-solution\">解決策: ${solution}</span>` : message;\r\n\r\n        // 通知を表示\r\n        notificationSystem.showToast('error', title, fullMessage, 8000, priority);\r\n\r\n        // エラー回復のためのアクションを提供\r\n        if (options.recoveryAction && options.recoveryAction.message &&\r\n            options.recoveryAction.label && options.recoveryAction.handler) {\r\n            const recoveryAction = {\r\n                message: options.recoveryAction.message,\r\n                label: options.recoveryAction.label,\r\n                handler: options.recoveryAction.handler\r\n            };\r\n\r\n            setTimeout(() => {\r\n                notificationSystem.showRecoveryToast(recoveryAction);\r\n            }, 1000);\r\n        }\r\n\r\n        // エラー状態をUIに反映\r\n        if (options.updateUI) {\r\n            options.updateUI();\r\n        }\r\n    }\r\n}\r\n\r\n// DOMContentLoaded イベントで初期化\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    try {\r\n        const app = new Application();\r\n        app.init();\r\n    } catch (error) {\r\n        console.error('初期化エラー:', error);\r\n        // エラーメッセージを画面に表示\r\n        const errorDiv = document.createElement('div');\r\n        errorDiv.className = 'initialization-error';\r\n        errorDiv.textContent = '初期化中にエラーが発生しました。ページを再読み込みしてください。';\r\n        document.body.prepend(errorDiv);\r\n    }\r\n});\r\n","import { FileValidationResult, ErrorHandlerOptions } from '../../types/types';\r\nimport { notificationSystem } from './notification';\r\nimport { validateFiles, readFileAsText, validateFileContent } from '../../core/validator';\r\n\r\n/**\r\n * ファイル管理クラス\r\n * ファイルの選択、表示、管理を行うコンポーネント\r\n */\r\nexport class FileManager {\r\n    private fileInput: HTMLInputElement;\r\n    private fileInfoArea: HTMLElement;\r\n    private clearButton: HTMLButtonElement;\r\n    private executeButton: HTMLButtonElement;\r\n    private dropArea: HTMLElement;\r\n    private selectedFiles: File[] = [];\r\n    private validFiles: number = 0;\r\n\r\n    /**\r\n     * ファイル管理クラスのコンストラクタ\r\n     */\r\n    constructor() {\r\n        // DOM要素の取得\r\n        this.fileInput = document.getElementById('fileInput') as HTMLInputElement;\r\n        this.fileInfoArea = document.getElementById('fileInfoArea') as HTMLElement;\r\n        this.clearButton = document.getElementById('clearButton') as HTMLButtonElement;\r\n        this.executeButton = document.getElementById('executeButton') as HTMLButtonElement;\r\n        this.dropArea = document.getElementById('dropArea') as HTMLElement;\r\n\r\n        if (!this.fileInput || !this.fileInfoArea || !this.clearButton || !this.executeButton || !this.dropArea) {\r\n            throw new Error('必要なDOM要素が見つかりません');\r\n        }\r\n\r\n        this.setupEventListeners();\r\n    }\r\n\r\n    /**\r\n     * イベントリスナーのセットアップ\r\n     */\r\n    private setupEventListeners(): void {\r\n        // ファイル選択ボタン\r\n        const fileSelectButton = document.getElementById('fileSelectButton');\r\n        if (fileSelectButton) {\r\n            fileSelectButton.addEventListener('click', (e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this.fileInput.click();\r\n            });\r\n        }\r\n\r\n        // ファイル選択時の処理\r\n        this.fileInput.addEventListener('change', () => {\r\n            this.processNewFiles(Array.from(this.fileInput.files || []));\r\n        });\r\n\r\n        // ドラッグ&ドロップ処理\r\n        this.dropArea.addEventListener('dragover', (e) => {\r\n            e.preventDefault();\r\n            this.dropArea.classList.add('drag-over');\r\n        });\r\n\r\n        this.dropArea.addEventListener('dragleave', (e) => {\r\n            e.preventDefault();\r\n            this.dropArea.classList.remove('drag-over');\r\n        });\r\n\r\n        this.dropArea.addEventListener('drop', (e) => {\r\n            e.preventDefault();\r\n            this.dropArea.classList.remove('drag-over');\r\n\r\n            if (e.dataTransfer && e.dataTransfer.files.length > 0) {\r\n                // ドロップされたファイルを処理\r\n                this.processNewFiles(Array.from(e.dataTransfer.files));\r\n            }\r\n        });\r\n\r\n        // キーボード操作のサポート\r\n        this.dropArea.addEventListener('keydown', (e) => {\r\n            // Enterキーまたはスペースキーでファイル選択ダイアログを開く\r\n            if (e.key === 'Enter' || e.key === ' ') {\r\n                e.preventDefault();\r\n                this.fileInput.click();\r\n            }\r\n        });\r\n\r\n        // ドロップエリア全体をクリック可能に\r\n        this.dropArea.addEventListener('click', (e) => {\r\n            // buttonの場合は、buttonのイベントに任せる\r\n            if ((e.target as HTMLElement).tagName !== 'BUTTON') {\r\n                this.fileInput.click();\r\n            }\r\n        });\r\n\r\n        // クリアボタンの処理\r\n        this.clearButton.addEventListener('click', () => {\r\n            this.clearFiles();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 新しく選択されたファイルを処理する\r\n     * @param files 処理対象のファイル配列\r\n     */\r\n    public processNewFiles(files: File[]): void {\r\n        // テキストファイルのみをフィルタリング\r\n        const textFiles = Array.from(files).filter(file => file.type === 'text/plain' || file.name.endsWith('.txt'));\r\n\r\n        // テキストファイル以外が含まれていた場合\r\n        if (textFiles.length < files.length) {\r\n            this.handleError(new Error('テキストファイル以外が含まれています'), 'file-format');\r\n            return;\r\n        }\r\n\r\n        // 既に追加されているファイルと重複するものを確認\r\n        const existingFileNames = Array.from(this.selectedFiles).map(f => f.name);\r\n        const newFiles = textFiles.filter(file => !existingFileNames.includes(file.name));\r\n        const duplicateCount = textFiles.length - newFiles.length;\r\n\r\n        // 新しいファイルを追加\r\n        newFiles.forEach(file => this.selectedFiles.push(file));\r\n\r\n        // ファイル情報を更新\r\n        this.updateFileInfo();\r\n\r\n        // 結果をユーザーに通知\r\n        if (newFiles.length === 0) {\r\n            this.handleError(new Error('すべてのファイルが既に追加されています'), 'file-duplicate', {\r\n                recoveryAction: {\r\n                    message: '既存のファイルをクリアして新しいファイルを追加しますか？',\r\n                    label: 'クリアして追加',\r\n                    handler: () => {\r\n                        this.selectedFiles = [...textFiles];\r\n                        this.updateFileInfo();\r\n                        notificationSystem.showToast('success', 'ファイル更新完了', `${textFiles.length}ファイルを追加しました`);\r\n                    }\r\n                }\r\n            });\r\n        } else if (duplicateCount > 0) {\r\n            notificationSystem.showToast('warning', 'ファイル重複',\r\n                `${textFiles.length - duplicateCount}ファイルを追加しました (${duplicateCount}ファイルは重複)`, 5000, 3);\r\n        } else {\r\n            notificationSystem.showToast('success', 'ファイル追加完了', `${textFiles.length}ファイルを追加しました`, 5000, 2);\r\n        }\r\n\r\n        // ファイルを検証\r\n        this.validateSelectedFiles();\r\n    }\r\n\r\n    /**\r\n     * 選択されたファイルをクリアする\r\n     */\r\n    public clearFiles(): void {\r\n        // 選択されたファイルをクリア\r\n        this.selectedFiles = [];\r\n        this.fileInput.value = '';\r\n        this.validFiles = 0;\r\n\r\n        // ファイル情報表示を更新\r\n        this.updateFileInfo();\r\n\r\n        // イベント通知\r\n        const event = new CustomEvent('filesClear');\r\n        document.dispatchEvent(event);\r\n\r\n        notificationSystem.showToast('info', 'クリア完了', 'ファイル選択をクリアしました');\r\n    }\r\n\r\n    /**\r\n     * 選択されたファイルを検証する\r\n     */\r\n    public async validateSelectedFiles(): Promise<boolean> {\r\n        if (this.selectedFiles.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            // 外部のvalidateFilesモジュールを使用\r\n            const results = await validateFiles(this.selectedFiles);\r\n            this.updateValidationUI(results);\r\n\r\n            // 有効なファイル数を計算（型情報を明示的に指定）\r\n            this.validFiles = results.filter((result: FileValidationResult) => result.isValid).length;\r\n\r\n            // 実行ボタンの有効/無効を更新\r\n            this.executeButton.disabled = this.validFiles === 0;\r\n\r\n            return this.validFiles > 0;\r\n        } catch (error) {\r\n            this.handleError(error instanceof Error ? error : new Error('不明なエラー'), 'file-validation');\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 検証結果をUIに反映する\r\n     * @param results 検証結果の配列\r\n     */\r\n    private updateValidationUI(results: FileValidationResult[]): void {\r\n        // ファイル情報UIを更新\r\n        this.updateFileInfo(results);\r\n    }\r\n\r\n    /**\r\n     * ファイル情報表示を更新する\r\n     * @param validationResults 検証結果があれば反映\r\n     */\r\n    private updateFileInfo(validationResults?: FileValidationResult[]): void {\r\n        // ファイルが選択されているか確認\r\n        if (this.selectedFiles.length === 0) {\r\n            this.fileInfoArea.innerHTML = '<p class=\"no-file-message\">ファイルが選択されていません</p>';\r\n            this.clearButton.disabled = true;\r\n            this.executeButton.disabled = true;\r\n            return;\r\n        }\r\n\r\n        // ファイルアイテムのHTMLを生成\r\n        let html = '';\r\n\r\n        this.selectedFiles.forEach(file => {\r\n            // 検証結果を探す\r\n            type FileStatus = {\r\n                status: string;\r\n                messages: Array<{ type: string, text: string }>;\r\n            };\r\n            let fileStatus: FileStatus = { status: 'pending', messages: [] };\r\n\r\n            if (validationResults) {\r\n                const result = validationResults.find(r => r.file === file);\r\n                if (result) {\r\n                    fileStatus = {\r\n                        status: result.isValid ?\r\n                            (result.warnings.length > 0 ? 'warning' : 'valid') : 'error',\r\n                        messages: [\r\n                            ...result.errors.map(msg => ({ type: 'error', text: msg })),\r\n                            ...result.warnings.map(msg => ({ type: 'warning', text: msg }))\r\n                        ]\r\n                    };\r\n                }\r\n            }\r\n\r\n            let statusClass = '';\r\n            let statusText = '';\r\n\r\n            switch (fileStatus.status) {\r\n                case 'valid':\r\n                    statusClass = 'status-valid';\r\n                    statusText = '有効';\r\n                    break;\r\n                case 'warning':\r\n                    statusClass = 'status-warning';\r\n                    statusText = '警告';\r\n                    break;\r\n                case 'error':\r\n                    statusClass = 'status-error';\r\n                    statusText = 'エラー';\r\n                    break;\r\n                default:\r\n                    statusClass = '';\r\n                    statusText = '検証中...';\r\n            }\r\n\r\n            html += `\r\n        <div class=\"file-item\">\r\n          <div class=\"file-icon\">📄</div>\r\n          <div class=\"file-name\">${file.name}</div>\r\n          <div class=\"file-status ${statusClass}\">${statusText}</div>\r\n        `;\r\n\r\n            // バリデーションメッセージがある場合は表示\r\n            if (fileStatus.messages && fileStatus.messages.length > 0) {\r\n                html += '<div class=\"validation-feedback\">';\r\n                fileStatus.messages.forEach((msg: { type: string; text: string }) => {\r\n                    let icon = '';\r\n                    switch (msg.type) {\r\n                        case 'error': icon = '❌'; break;\r\n                        case 'warning': icon = '⚠️'; break;\r\n                        case 'info': icon = 'ℹ️'; break;\r\n                    }\r\n                    html += `\r\n            <div class=\"validation-message ${msg.type}\">\r\n              <span class=\"validation-icon\">${icon}</span>\r\n              <span class=\"validation-text\">${msg.text}</span>\r\n            </div>\r\n          `;\r\n                });\r\n                html += '</div>';\r\n            } else if (fileStatus.status === 'valid') {\r\n                html += `\r\n          <div class=\"validation-feedback\">\r\n            <div class=\"validation-message success\">\r\n              <span class=\"validation-icon\">✅</span>\r\n              <span class=\"validation-text\">ファイル形式は有効です</span>\r\n            </div>\r\n          </div>\r\n        `;\r\n            }\r\n\r\n            html += '</div>'; // file-item end\r\n        });\r\n\r\n        // HTMLを適用\r\n        this.fileInfoArea.innerHTML = html;\r\n        this.clearButton.disabled = false;\r\n    }\r\n\r\n    /**\r\n     * エラーを処理する\r\n     * @param error エラーオブジェクト\r\n     * @param context エラーが発生したコンテキスト\r\n     * @param options 追加オプション\r\n     */\r\n    private handleError(error: Error, context: string, options: ErrorHandlerOptions = {}): void {\r\n        console.error(`エラー (${context}):`, error);\r\n\r\n        // エラータイプに基づいて適切なメッセージと解決策を提供\r\n        let title = 'エラーが発生しました';\r\n        let message = error.message || 'エラーが発生しました';\r\n        let solution = '';\r\n        let priority = 4; // エラーは高い優先度\r\n\r\n        switch (context) {\r\n            case 'file-format':\r\n                title = 'ファイル形式エラー';\r\n                solution = 'テキストファイル(.txt)のみ追加できます。ファイル形式を確認してください';\r\n                break;\r\n\r\n            case 'file-validation':\r\n                title = 'ファイル検証エラー';\r\n                solution = '正しい形式のEF統合ファイルであることを確認してください';\r\n                break;\r\n\r\n            case 'file-duplicate':\r\n                title = 'ファイル重複';\r\n                solution = '別のファイルを選択するか、既存のファイルをクリアしてください';\r\n                break;\r\n\r\n            default:\r\n                solution = '問題が解決しない場合は、ページを再読み込みしてください';\r\n        }\r\n\r\n        // 解決策がある場合はメッセージに追加\r\n        const fullMessage = solution ? `${message}<br><span class=\"error-solution\">解決策: ${solution}</span>` : message;\r\n\r\n        // 通知を表示\r\n        notificationSystem.showToast('error', title, fullMessage, 8000, priority);\r\n\r\n        // エラー回復のためのアクションを提供\r\n        if (options.recoveryAction && options.recoveryAction.message &&\r\n            options.recoveryAction.label && options.recoveryAction.handler) {\r\n            const recoveryAction = {\r\n                message: options.recoveryAction.message,\r\n                label: options.recoveryAction.label,\r\n                handler: options.recoveryAction.handler\r\n            };\r\n\r\n            setTimeout(() => {\r\n                notificationSystem.showRecoveryToast(recoveryAction);\r\n            }, 1000);\r\n        }\r\n\r\n        // エラー状態をUIに反映\r\n        if (options.updateUI) {\r\n            options.updateUI();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 選択されたファイルを取得\r\n     * @returns 選択されたファイル配列\r\n     */\r\n    public getSelectedFiles(): File[] {\r\n        return this.selectedFiles;\r\n    }\r\n\r\n    /**\r\n     * 有効なファイル数を取得\r\n     * @returns 有効なファイル数\r\n     */\r\n    public getValidFileCount(): number {\r\n        return this.validFiles;\r\n    }\r\n}\r\n\r\n// グローバルでアクセス可能なインスタンスを作成\r\nlet fileManagerInstance: FileManager | null = null;\r\n\r\n// インスタンスを取得または作成する関数\r\nexport function getFileManager(): FileManager {\r\n    if (!fileManagerInstance) {\r\n        // DOMが準備できているか確認\r\n        if (document.readyState === 'loading') {\r\n            throw new Error('DOM is not ready. Call this function after DOMContentLoaded');\r\n        }\r\n        fileManagerInstance = new FileManager();\r\n    }\r\n    return fileManagerInstance;\r\n}\r\n\r\n// 既存のexport文を削除し、新しい初期化方法を使用\r\nexport const fileManager = {\r\n    get instance() {\r\n        return getFileManager();\r\n    }\r\n};","import { ToastData, TypePriorityMap } from '../../types/types';\r\n\r\n/**\r\n * 通知システム\r\n * ユーザーへの通知表示を管理するモジュール\r\n */\r\nexport class NotificationSystem {\r\n    private toastContainer: HTMLElement;\r\n    private activeToasts: ToastData[] = [];\r\n    private toastHistory: Partial<ToastData>[] = [];\r\n    private readonly MAX_VISIBLE_TOASTS = 3;\r\n    private readonly MAX_HISTORY_ITEMS = 10;\r\n\r\n    /**\r\n     * 通知システムのコンストラクタ\r\n     * @param containerId 通知コンテナのID\r\n     */\r\n    constructor(containerId: string = 'toastContainer') {\r\n        this.toastContainer = document.getElementById(containerId) || this.createToastContainer(containerId);\r\n        this.setupHistoryButton();\r\n    }\r\n\r\n    /**\r\n     * トースト通知コンテナを作成\r\n     * @param containerId コンテナID\r\n     * @returns 作成されたコンテナ要素\r\n     */\r\n    private createToastContainer(containerId: string): HTMLElement {\r\n        const container = document.createElement('div');\r\n        container.id = containerId;\r\n        container.className = 'toast-container';\r\n        document.body.appendChild(container);\r\n        return container;\r\n    }\r\n\r\n    /**\r\n     * 履歴ボタンの初期設定\r\n     */\r\n    private setupHistoryButton(): void {\r\n        let historyButton = document.getElementById('notificationHistoryButton');\r\n        if (!historyButton) {\r\n            historyButton = document.createElement('button');\r\n            historyButton.id = 'notificationHistoryButton';\r\n            historyButton.className = 'notification-history-button hidden';\r\n            historyButton.setAttribute('aria-label', '通知履歴を表示');\r\n            historyButton.innerHTML = '<span class=\"history-icon\">🔔</span>';\r\n            document.body.appendChild(historyButton);\r\n\r\n            historyButton.addEventListener('click', () => this.showNotificationHistory());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * トースト通知を表示\r\n     * @param type 通知タイプ（success, warning, error, info）\r\n     * @param title 通知タイトル\r\n     * @param message 通知メッセージ\r\n     * @param duration 表示時間（ミリ秒）\r\n     * @param priority 優先度（1-5、5が最高）\r\n     */\r\n    public showToast(\r\n        type: 'success' | 'warning' | 'error' | 'info',\r\n        title: string,\r\n        message: string,\r\n        duration: number = 5000,\r\n        priority: number = 3\r\n    ): void {\r\n        // 通知オブジェクトを作成\r\n        const timestamp = Date.now();\r\n        const toastId = 'toast-' + timestamp;\r\n        const toastData: ToastData = {\r\n            id: toastId,\r\n            type,\r\n            title,\r\n            message,\r\n            timestamp,\r\n            priority,\r\n            duration\r\n        };\r\n\r\n        // 通知履歴に追加\r\n        this.addToastToHistory(toastData);\r\n\r\n        // 通知を表示キューに追加\r\n        this.activeToasts.push(toastData);\r\n\r\n        // 優先度順にソート（優先度が高く、新しいものが上位）\r\n        this.activeToasts.sort((a, b) => {\r\n            if (a.priority !== b.priority) {\r\n                return b.priority - a.priority;\r\n            }\r\n            return b.timestamp - a.timestamp;\r\n        });\r\n\r\n        // 表示数を制限\r\n        this.manageActiveToasts();\r\n\r\n        // 通知を表示\r\n        this.renderToast(toastData);\r\n    }\r\n\r\n    /**\r\n     * 通知履歴に追加\r\n     * @param toastData 通知データ\r\n     */\r\n    private addToastToHistory(toastData: ToastData): void {\r\n        // 履歴に追加\r\n        this.toastHistory.unshift({\r\n            type: toastData.type,\r\n            title: toastData.title,\r\n            message: toastData.message,\r\n            timestamp: toastData.timestamp\r\n        });\r\n\r\n        // 履歴の最大数を制限\r\n        if (this.toastHistory.length > this.MAX_HISTORY_ITEMS) {\r\n            this.toastHistory = this.toastHistory.slice(0, this.MAX_HISTORY_ITEMS);\r\n        }\r\n\r\n        // 履歴ボタンを更新\r\n        this.updateHistoryButton();\r\n    }\r\n\r\n    /**\r\n     * 履歴ボタンを更新\r\n     */\r\n    private updateHistoryButton(): void {\r\n        const historyButton = document.getElementById('notificationHistoryButton');\r\n        if (historyButton && this.toastHistory.length > 0) {\r\n            historyButton.classList.remove('hidden');\r\n            historyButton.setAttribute('data-count', this.toastHistory.length.toString());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * アクティブな通知を管理\r\n     */\r\n    private manageActiveToasts(): void {\r\n        // 表示数を制限\r\n        if (this.activeToasts.length > this.MAX_VISIBLE_TOASTS) {\r\n            // 優先度の低い通知を非表示にする\r\n            const visibleToasts = this.activeToasts.slice(0, this.MAX_VISIBLE_TOASTS);\r\n            const hiddenToasts = this.activeToasts.slice(this.MAX_VISIBLE_TOASTS);\r\n\r\n            // 非表示にする通知を削除\r\n            hiddenToasts.forEach(toast => {\r\n                if (toast.element) {\r\n                    this.removeToastElement(toast.id);\r\n                }\r\n            });\r\n\r\n            // 集約通知を表示（複数の通知がある場合）\r\n            if (hiddenToasts.length > 1) {\r\n                const highestPriorityType = this.getHighestPriorityType(hiddenToasts);\r\n                this.showAggregateToast(hiddenToasts.length, highestPriorityType);\r\n            }\r\n\r\n            // アクティブリストを更新\r\n            this.activeToasts = visibleToasts;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 最も優先度の高い通知タイプを取得\r\n     * @param toasts 通知の配列\r\n     * @returns 最も優先度の高い通知タイプ\r\n     */\r\n    private getHighestPriorityType(toasts: ToastData[]): 'success' | 'warning' | 'error' | 'info' {\r\n        const typePriority: TypePriorityMap = { 'error': 4, 'warning': 3, 'info': 2, 'success': 1 };\r\n        let highestType: 'success' | 'warning' | 'error' | 'info' = 'info';\r\n\r\n        toasts.forEach(toast => {\r\n            if (typePriority[toast.type] > typePriority[highestType]) {\r\n                highestType = toast.type;\r\n            }\r\n        });\r\n\r\n        return highestType;\r\n    }\r\n\r\n    /**\r\n     * 集約通知を表示\r\n     * @param count 集約する通知の数\r\n     * @param type 通知タイプ\r\n     */\r\n    private showAggregateToast(count: number, type: 'success' | 'warning' | 'error' | 'info'): void {\r\n        const aggregateToastId = 'toast-aggregate';\r\n\r\n        // 既存の集約通知を削除\r\n        const existingAggregate = document.getElementById(aggregateToastId);\r\n        if (existingAggregate) {\r\n            existingAggregate.parentNode?.removeChild(existingAggregate);\r\n        }\r\n\r\n        // 新しい集約通知を作成\r\n        const toast = document.createElement('div');\r\n        toast.id = aggregateToastId;\r\n        toast.className = `toast toast-${type}`;\r\n        toast.setAttribute('role', 'status');\r\n        toast.setAttribute('aria-live', 'polite');\r\n\r\n        // アイコンを設定\r\n        let icon = '';\r\n        switch (type) {\r\n            case 'success': icon = '✅'; break;\r\n            case 'warning': icon = '⚠️'; break;\r\n            case 'error': icon = '❌'; break;\r\n            case 'info': icon = 'ℹ️'; break;\r\n        }\r\n\r\n        // 通知の内容を設定\r\n        toast.innerHTML = `\r\n      <div class=\"toast-icon\">${icon}</div>\r\n      <div class=\"toast-content\">\r\n        <h3 class=\"toast-title\">その他の通知</h3>\r\n        <p class=\"toast-message\">他に${count}件の通知があります</p>\r\n      </div>\r\n      <button class=\"toast-view-all\" aria-label=\"すべての通知を表示\">表示</button>\r\n    `;\r\n\r\n        // 通知をコンテナに追加\r\n        this.toastContainer.appendChild(toast);\r\n\r\n        // 「すべて表示」ボタンのイベントリスナーを設定\r\n        const viewAllButton = toast.querySelector('.toast-view-all');\r\n        viewAllButton?.addEventListener('click', () => this.showNotificationHistory());\r\n    }\r\n\r\n    /**\r\n     * 通知履歴を表示\r\n     */\r\n    public showNotificationHistory(): void {\r\n        // 既存の履歴モーダルを削除\r\n        const existingModal = document.getElementById('notificationHistoryModal');\r\n        if (existingModal) {\r\n            existingModal.parentNode?.removeChild(existingModal);\r\n        }\r\n\r\n        // 履歴モーダルを作成\r\n        const modal = document.createElement('div');\r\n        modal.id = 'notificationHistoryModal';\r\n        modal.className = 'notification-history-modal';\r\n        modal.setAttribute('role', 'dialog');\r\n        modal.setAttribute('aria-labelledby', 'notificationHistoryTitle');\r\n        modal.setAttribute('aria-modal', 'true');\r\n\r\n        // 履歴リストを作成\r\n        let historyItems = '';\r\n        this.toastHistory.forEach(item => {\r\n            if (item.timestamp) {\r\n                const date = new Date(item.timestamp);\r\n                const timeString = date.toLocaleTimeString();\r\n                historyItems += `\r\n          <div class=\"history-item history-item-${item.type}\">\r\n            <div class=\"history-item-time\">${timeString}</div>\r\n            <div class=\"history-item-content\">\r\n              <h4 class=\"history-item-title\">${item.title || ''}</h4>\r\n              <p class=\"history-item-message\">${item.message || ''}</p>\r\n            </div>\r\n          </div>\r\n        `;\r\n            }\r\n        });\r\n\r\n        // モーダルの内容を設定\r\n        modal.innerHTML = `\r\n      <div class=\"notification-history-content\">\r\n        <div class=\"notification-history-header\">\r\n          <h3 id=\"notificationHistoryTitle\">通知履歴</h3>\r\n          <button class=\"notification-history-close\" aria-label=\"履歴を閉じる\">×</button>\r\n        </div>\r\n        <div class=\"notification-history-list\">\r\n          ${historyItems.length ? historyItems : '<p class=\"no-history\">通知履歴はありません</p>'}\r\n        </div>\r\n        <div class=\"notification-history-footer\">\r\n          <button class=\"secondary-button notification-history-clear\">履歴をクリア</button>\r\n          <button class=\"primary-button notification-history-close-btn\">閉じる</button>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n        // モーダルをページに追加\r\n        document.body.appendChild(modal);\r\n\r\n        // モーダルを表示（アニメーション用）\r\n        setTimeout(() => {\r\n            modal.classList.add('active');\r\n        }, 10);\r\n\r\n        // 閉じるボタンのイベントリスナーを設定\r\n        const closeButtons = modal.querySelectorAll('.notification-history-close, .notification-history-close-btn');\r\n        closeButtons.forEach(button => {\r\n            button.addEventListener('click', () => {\r\n                this.closeNotificationHistory();\r\n            });\r\n        });\r\n\r\n        // クリアボタンのイベントリスナーを設定\r\n        const clearButton = modal.querySelector('.notification-history-clear');\r\n        clearButton?.addEventListener('click', () => {\r\n            this.clearNotificationHistory();\r\n            this.closeNotificationHistory();\r\n        });\r\n\r\n        // モーダル外クリックで閉じる\r\n        modal.addEventListener('click', (e) => {\r\n            if (e.target === modal) {\r\n                this.closeNotificationHistory();\r\n            }\r\n        });\r\n\r\n        // ESCキーで閉じる\r\n        document.addEventListener('keydown', this.handleHistoryEscKey);\r\n    }\r\n\r\n    /**\r\n     * 履歴モーダルのESCキーハンドラ\r\n     */\r\n    private handleHistoryEscKey = (e: KeyboardEvent): void => {\r\n        if (e.key === 'Escape') {\r\n            this.closeNotificationHistory();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 通知履歴モーダルを閉じる\r\n     */\r\n    private closeNotificationHistory(): void {\r\n        const modal = document.getElementById('notificationHistoryModal');\r\n        if (modal) {\r\n            modal.classList.remove('active');\r\n            setTimeout(() => {\r\n                if (modal.parentNode) {\r\n                    modal.parentNode.removeChild(modal);\r\n                }\r\n            }, 300);\r\n        }\r\n\r\n        // ESCキーイベントリスナーを削除\r\n        document.removeEventListener('keydown', this.handleHistoryEscKey);\r\n    }\r\n\r\n    /**\r\n     * 通知履歴をクリア\r\n     */\r\n    public clearNotificationHistory(): void {\r\n        this.toastHistory = [];\r\n        this.updateHistoryButton();\r\n    }\r\n\r\n    /**\r\n     * トースト通知を描画\r\n     * @param toastData 通知データ\r\n     */\r\n    private renderToast(toastData: ToastData): void {\r\n        // トーストのHTML構造を作成\r\n        const toast = document.createElement('div');\r\n        toast.id = toastData.id;\r\n        toast.className = `toast toast-${toastData.type}`;\r\n        toast.setAttribute('role', 'alert');\r\n        toast.setAttribute('aria-live', 'assertive');\r\n\r\n        // アイコンを設定\r\n        let icon = '';\r\n        switch (toastData.type) {\r\n            case 'success': icon = '✅'; break;\r\n            case 'warning': icon = '⚠️'; break;\r\n            case 'error': icon = '❌'; break;\r\n            case 'info': icon = 'ℹ️'; break;\r\n        }\r\n\r\n        // トーストの内容を設定\r\n        toast.innerHTML = `\r\n      <div class=\"toast-icon\">${icon}</div>\r\n      <div class=\"toast-content\">\r\n        <h3 class=\"toast-title\">${toastData.title}</h3>\r\n        <p class=\"toast-message\">${toastData.message}</p>\r\n      </div>\r\n      <button class=\"toast-close\" aria-label=\"通知を閉じる\">×</button>\r\n    `;\r\n\r\n        // トーストをコンテナに追加\r\n        this.toastContainer.appendChild(toast);\r\n\r\n        // 要素への参照を保存\r\n        toastData.element = toast;\r\n\r\n        // 閉じるボタンのイベントリスナーを設定\r\n        const closeButton = toast.querySelector('.toast-close');\r\n        closeButton?.addEventListener('click', () => {\r\n            this.removeToast(toastData.id);\r\n        });\r\n\r\n        // 一定時間後に自動的に閉じる\r\n        if (toastData.duration > 0) {\r\n            setTimeout(() => {\r\n                this.removeToast(toastData.id);\r\n            }, toastData.duration);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * トースト通知を削除\r\n     * @param toastId 削除するトーストのID\r\n     */\r\n    public removeToast(toastId: string): void {\r\n        // アクティブリストから削除\r\n        this.activeToasts = this.activeToasts.filter(toast => toast.id !== toastId);\r\n\r\n        // 要素を削除\r\n        this.removeToastElement(toastId);\r\n    }\r\n\r\n    /**\r\n     * トースト要素を削除\r\n     * @param toastId 削除するトースト要素のID\r\n     */\r\n    private removeToastElement(toastId: string): void {\r\n        const toast = document.getElementById(toastId);\r\n        if (toast) {\r\n            // フェードアウトのためのスタイルを適用\r\n            toast.style.opacity = '0';\r\n            toast.style.transform = 'translateX(100%)';\r\n\r\n            // アニメーション完了後に要素を削除\r\n            setTimeout(() => {\r\n                if (toast.parentNode) {\r\n                    toast.parentNode.removeChild(toast);\r\n                }\r\n            }, 300);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * エラー回復のための通知を表示\r\n     * @param action 回復アクション情報\r\n     */\r\n    public showRecoveryToast(action: {\r\n        message: string;\r\n        label: string;\r\n        handler: () => void;\r\n    }): void {\r\n        const recoveryToastId = 'toast-recovery-' + Date.now();\r\n        const toast = document.createElement('div');\r\n        toast.id = recoveryToastId;\r\n        toast.className = 'toast toast-info';\r\n        toast.setAttribute('role', 'alert');\r\n        toast.setAttribute('aria-live', 'assertive');\r\n\r\n        toast.innerHTML = `\r\n      <div class=\"toast-icon\">🔄</div>\r\n      <div class=\"toast-content\">\r\n        <h3 class=\"toast-title\">回復アクション</h3>\r\n        <p class=\"toast-message\">${action.message}</p>\r\n      </div>\r\n      <button class=\"toast-action\" aria-label=\"${action.label}\">${action.label}</button>\r\n      <button class=\"toast-close\" aria-label=\"通知を閉じる\">×</button>\r\n    `;\r\n\r\n        this.toastContainer.appendChild(toast);\r\n\r\n        // アクションボタンのイベントリスナーを設定\r\n        const actionButton = toast.querySelector('.toast-action');\r\n        actionButton?.addEventListener('click', () => {\r\n            action.handler();\r\n            this.removeToastElement(recoveryToastId);\r\n        });\r\n\r\n        // 閉じるボタンのイベントリスナーを設定\r\n        const closeButton = toast.querySelector('.toast-close');\r\n        closeButton?.addEventListener('click', () => {\r\n            this.removeToastElement(recoveryToastId);\r\n        });\r\n\r\n        // 一定時間後に自動的に閉じる\r\n        setTimeout(() => {\r\n            this.removeToastElement(recoveryToastId);\r\n        }, 15000); // 回復アクションは長めに表示\r\n    }\r\n}\r\n\r\n// グローバルでアクセス可能なインスタンスを作成\r\nexport const notificationSystem = new NotificationSystem();","import { FileValidationResult } from '../types/types';\r\n\r\n/**\r\n * ファイルのバリデーションを実行する関数\r\n * @param files バリデーション対象のファイル配列\r\n * @returns 検証結果の配列\r\n */\r\nexport async function validateFiles(files: File[]): Promise<FileValidationResult[]> {\r\n  if (!files || files.length === 0) {\r\n    throw new Error('ファイルが選択されていません');\r\n  }\r\n\r\n  // 検証結果の配列\r\n  const validationResults: FileValidationResult[] = [];\r\n\r\n  // 各ファイルを検証\r\n  for (const file of files) {\r\n    try {\r\n      const content = await readFileAsText(file);\r\n      const result = validateFileContent(file, content);\r\n      validationResults.push(result);\r\n    } catch (error) {\r\n      // ファイル読み込みエラーの場合\r\n      validationResults.push({\r\n        file,\r\n        isValid: false,\r\n        warnings: [],\r\n        errors: [(error as Error).message || '不明なエラーが発生しました'],\r\n      });\r\n    }\r\n  }\r\n\r\n  return validationResults;\r\n}\r\n\r\n/**\r\n * ファイルをテキストとして読み込む\r\n * @param file 読み込むファイル\r\n * @returns ファイルの内容\r\n */\r\nexport function readFileAsText(file: File): Promise<string> {\r\n  // テキストファイルでない場合はエラー\r\n  if (!file.type.includes('text') && !file.name.endsWith('.txt')) {\r\n    return Promise.reject(new Error('Read error: Invalid file format'));\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = (event) => {\r\n      if (typeof event.target?.result === 'string') {\r\n        resolve(event.target.result);\r\n      } else {\r\n        reject(new Error('Read error: Invalid file format'));\r\n      }\r\n    };\r\n\r\n    reader.onerror = () => {\r\n      reject(new Error('Read error: File read failed'));\r\n    };\r\n\r\n    try {\r\n      reader.readAsText(file);\r\n    } catch (error) {\r\n      reject(new Error('Read error: Cannot start reading file'));\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * ファイルの内容を検証する\r\n * @param file ファイルオブジェクト\r\n * @param content ファイルの内容\r\n * @returns 検証結果\r\n */\r\nexport function validateFileContent(file: File, content: string): FileValidationResult {\r\n  // 検証結果オブジェクトの初期化\r\n  const result: FileValidationResult = {\r\n    file,\r\n    isValid: true,\r\n    warnings: [],\r\n    errors: [],\r\n  };\r\n\r\n  // 1. ファイル全体が空でないかチェック\r\n  if (!content.trim()) {\r\n    result.isValid = false;\r\n    result.errors.push('ファイルが空です');\r\n    return result; // 空の場合は以降のチェック不要\r\n  }\r\n\r\n  // 2. 行に分割 (CRLFとLFの両方に対応)\r\n  //    filter(line => line.trim()) は空行を除外するが、ここでは一旦含めて行番号を維持\r\n  const lines = content.split(/\\r?\\n/);\r\n\r\n  // 3. 最低行数チェック (ヘッダー行 + データ行1行以上)\r\n  //    空行を除外してカウント\r\n  if (lines.filter((line) => line.trim()).length < 2) {\r\n    result.isValid = false;\r\n    result.errors.push('ファイルが空か、ヘッダー行またはデータ行が不足しています');\r\n    return result; // 行数が足りない場合は以降のチェック不要\r\n  }\r\n\r\n  // 4. ヘッダー行の簡易チェック\r\n  const headerLine = lines[0].trim();\r\n  if (!headerLine) {\r\n    // ヘッダー行が空の場合 (通常はありえないが念のため)\r\n    result.warnings.push('ヘッダー行が空のようです');\r\n  } else if (!headerLine.includes('\\t')) {\r\n    // ヘッダー行にタブが含まれていない場合 (タブ区切りでない可能性)\r\n    result.warnings.push('ヘッダー行にタブ区切りが見られません');\r\n  }\r\n\r\n  // 5. データ行の簡易チェック (最初の5行まで)\r\n  const sampleSize = Math.min(5, lines.length - 1); // チェックするデータ行数 (最大5行)\r\n  let tabWarningIssued = false; // タブ区切り警告発行済みフラグ\r\n  let columnCountWarningIssued = false; // 列数不足警告発行済みフラグ\r\n  let actionDetailNumWarningIssued = false; // 行為明細番号形式警告発行済みフラグ\r\n\r\n  // データ行のループ (インデックス 1 から開始)\r\n  for (let i = 1; i <= sampleSize; i++) {\r\n    // lines[i] が存在しない場合 (ファイル末尾の空行など) はスキップ\r\n    if (lines[i] === undefined) continue;\r\n\r\n    const line = lines[i].trim();\r\n    // 空のデータ行はスキップ\r\n    if (!line) continue;\r\n\r\n    // 5-1. タブ区切り形式チェック (警告)\r\n    if (!line.includes('\\t') && !tabWarningIssued) {\r\n      result.warnings.push(`一部のデータ行にタブ区切りが見られません (最初の例: 行 ${i + 1})`);\r\n      tabWarningIssued = true;\r\n      // タブがない場合、以降の列チェックは無意味なのでスキップ\r\n      continue;\r\n    }\r\n\r\n    // タブで列に分割\r\n    const columns = line.split('\\t');\r\n\r\n    // 5-2. 列数チェック (警告) - 10列未満\r\n    if (columns.length < 10 && !columnCountWarningIssued) {\r\n      result.warnings.push(\r\n        `一部のデータ行の列数が少ないようです (10列未満) (最初の例: 行 ${i + 1}, 列数: ${columns.length})`,\r\n      );\r\n      columnCountWarningIssued = true;\r\n      // 列数が少ない場合、特定の列へのアクセスは危険なのでスキップ\r\n      // (ただし、他の行で十分な列数がある可能性もあるため、ループは継続)\r\n      continue;\r\n    }\r\n\r\n    // --- 主要な列の簡易フォーマットチェック ---\r\n    // 列が存在するか確認してからアクセスすることが重要\r\n\r\n    // 5-3. 入院年月日 (列4, インデックス3) の形式チェック (エラー)\r\n    if (columns.length > 3) {\r\n      const admission = columns[3].trim(); // 4列目の値を取得\r\n      const dateRegex = /^(\\d{8}|00000000)$/; // yyyymmdd または 00000000\r\n      if (!dateRegex.test(admission)) {\r\n        result.isValid = false; // 不正な形式ならファイルを無効とする\r\n        // エラーメッセージは最初の一つだけ記録する\r\n        if (result.errors.length === 0 || !result.errors.some((e) => e.startsWith('入院年月日'))) {\r\n          result.errors.push(\r\n            `入院年月日(4列目)の形式が不正です (yyyymmdd or 00000000) (最初の例: 行 ${i + 1}, 値: ${admission})`,\r\n          );\r\n        }\r\n        // エラーが見つかっても、他の警告を拾うためにループは継続\r\n      }\r\n    } else if (!columnCountWarningIssued) {\r\n      // 列数が足りず、まだ警告が出ていない場合\r\n      result.warnings.push(\r\n        `一部のデータ行で入院年月日(4列目)が確認できません (列数不足) (最初の例: 行 ${i + 1})`,\r\n      );\r\n      columnCountWarningIssued = true; // 列数不足の警告として扱う\r\n    }\r\n\r\n    // 5-4. 行為明細番号 (列7, インデックス6) の形式チェック (警告)\r\n    if (columns.length > 6) {\r\n      const actionDetailNum = columns[6].trim(); // 7列目の値を取得\r\n      const actionDetailRegex = /^(000|\\d{3})$/; // 000 または 3桁の数字\r\n      if (!actionDetailRegex.test(actionDetailNum) && !actionDetailNumWarningIssued) {\r\n        result.warnings.push(\r\n          `行為明細番号(7列目)の形式が不正のようです (000 or 3桁数字) (最初の例: 行 ${i + 1}, 値: ${actionDetailNum})`,\r\n        );\r\n        actionDetailNumWarningIssued = true; // 警告は最初の一つだけ\r\n      }\r\n    } else if (!columnCountWarningIssued) {\r\n      // 列数が足りず、まだ警告が出ていない場合\r\n      result.warnings.push(\r\n        `一部のデータ行で行為明細番号(7列目)が確認できません (列数不足) (最初の例: 行 ${i + 1})`,\r\n      );\r\n      columnCountWarningIssued = true; // 列数不足の警告として扱う\r\n    }\r\n  }\r\n\r\n  // ループ内で isValid が false に設定されている可能性がある\r\n  return result;\r\n}\r\n","import { OutputSettings } from '../../core/common/types'; // さらに正しいパスに修正\r\n\r\n/**\r\n * 結果表示クラス\r\n * テキスト/テーブル形式での結果表示を管理するコンポーネント\r\n */\r\nexport class ResultViewer {\r\n    private resultTextarea: HTMLTextAreaElement;\r\n    private resultTable: HTMLTableElement;\r\n    private textViewButton: HTMLButtonElement;\r\n    private tableViewButton: HTMLButtonElement;\r\n    private textResultView: HTMLElement;\r\n    private tableResultView: HTMLElement;\r\n    private copyButton: HTMLButtonElement;\r\n    private copyMessage: HTMLElement;\r\n    private downloadLink: HTMLAnchorElement;\r\n    private currentView: 'text' | 'table' = 'text';\r\n\r\n    /**\r\n     * 結果表示クラスのコンストラクタ\r\n     */\r\n    constructor() {\r\n        // DOM要素の取得\r\n        this.resultTextarea = document.getElementById('resultTextarea') as HTMLTextAreaElement;\r\n        this.resultTable = document.getElementById('resultTable') as HTMLTableElement;\r\n        this.textViewButton = document.getElementById('textViewButton') as HTMLButtonElement;\r\n        this.tableViewButton = document.getElementById('tableViewButton') as HTMLButtonElement;\r\n        this.textResultView = document.getElementById('textResultView') as HTMLElement;\r\n        this.tableResultView = document.getElementById('tableResultView') as HTMLElement;\r\n        this.copyButton = document.getElementById('copyButton') as HTMLButtonElement;\r\n        this.copyMessage = document.getElementById('copyMessage') as HTMLElement;\r\n        this.downloadLink = document.getElementById('downloadLink') as HTMLAnchorElement;\r\n\r\n        if (!this.resultTextarea || !this.resultTable || !this.textViewButton ||\r\n            !this.tableViewButton || !this.textResultView || !this.tableResultView ||\r\n            !this.copyButton || !this.copyMessage || !this.downloadLink) {\r\n            throw new Error('必要なDOM要素が見つかりません');\r\n        }\r\n\r\n        this.setupEventListeners();\r\n    }\r\n\r\n    /**\r\n     * イベントリスナーのセットアップ\r\n     */\r\n    private setupEventListeners(): void {\r\n        // 表示切替ボタンのイベント\r\n        this.textViewButton.addEventListener('click', () => {\r\n            this.setResultView('text');\r\n        });\r\n\r\n        this.tableViewButton.addEventListener('click', () => {\r\n            this.setResultView('table');\r\n        });\r\n\r\n        // コピーボタンのイベント\r\n        this.copyButton.addEventListener('click', () => {\r\n            this.copyResultToClipboard();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 結果表示モードを設定する\r\n     * @param viewMode 表示モード ('text' または 'table')\r\n     */\r\n    public setResultView(viewMode: 'text' | 'table'): void {\r\n        this.currentView = viewMode;\r\n\r\n        if (viewMode === 'text') {\r\n            this.textResultView.style.display = 'block';\r\n            this.tableResultView.style.display = 'none';\r\n            this.textViewButton.classList.add('active');\r\n            this.tableViewButton.classList.remove('active');\r\n            this.textViewButton.setAttribute('aria-pressed', 'true');\r\n            this.tableViewButton.setAttribute('aria-pressed', 'false');\r\n        } else {\r\n            this.textResultView.style.display = 'none';\r\n            this.tableResultView.style.display = 'block';\r\n            this.textViewButton.classList.remove('active');\r\n            this.tableViewButton.classList.add('active');\r\n            this.textViewButton.setAttribute('aria-pressed', 'false');\r\n            this.tableViewButton.setAttribute('aria-pressed', 'true');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 結果をクリップボードにコピーする (navigator.clipboard APIを使用)\r\n     */\r\n    private async copyResultToClipboard(): Promise<void> {\r\n        const textToCopy = this.resultTextarea.value;\r\n        if (!textToCopy) return;\r\n\r\n        try {\r\n            // navigator.clipboard APIを使用してテキストをコピー\r\n            await navigator.clipboard.writeText(textToCopy);\r\n\r\n            // コピー成功メッセージを表示\r\n            this.copyMessage.textContent = 'コピーしました！';\r\n            this.copyMessage.classList.add('visible');\r\n\r\n            // メッセージを一定時間後に消す\r\n            setTimeout(() => {\r\n                this.copyMessage.classList.remove('visible');\r\n            }, 2000);\r\n        } catch (err) {\r\n            console.error('クリップボードへのコピーに失敗しました:', err);\r\n            // エラーメッセージを表示 (より具体的に)\r\n            this.copyMessage.textContent = 'コピーに失敗しました';\r\n            this.copyMessage.classList.add('visible', 'error'); // エラー用スタイルを追加 (CSSで定義が必要)\r\n\r\n            // メッセージを一定時間後に消す\r\n            setTimeout(() => {\r\n                this.copyMessage.classList.remove('visible', 'error');\r\n            }, 3000);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 結果を表示する\r\n     * @param resultText 結果のテキストデータ\r\n     */\r\n    public displayResult(resultText: string, debugInfo?: string): void {\r\n        if (!resultText) return;\r\n\r\n        // デバッグ情報がある場合は、結果の前に追加\r\n        const displayText = debugInfo\r\n            ? `=== デバッグ情報 ===\\n${debugInfo}\\n\\n=== 処理結果 ===\\n${resultText}`\r\n            : resultText;\r\n\r\n        // テキストエリアに表示\r\n        this.resultTextarea.value = displayText;\r\n\r\n        // テーブルに表示（デバッグ情報は除外）\r\n        this.updateResultTable(resultText);\r\n\r\n        // 結果表示エリアを表示\r\n        const resultContainer = document.getElementById('resultContainer');\r\n        if (resultContainer) {\r\n            resultContainer.classList.remove('hidden');\r\n        }\r\n\r\n        // 保存用リンクを更新\r\n        this.updateDownloadLink(resultText);\r\n\r\n        // 結果があればコピーボタンを有効化\r\n        this.copyButton.disabled = !resultText;\r\n    }\r\n\r\n    /**\r\n     * 結果テーブルをクリアする\r\n     */\r\n    private clearResultTable(): void {\r\n        const tbody = this.resultTable.querySelector('tbody');\r\n        if (tbody) {\r\n            tbody.innerHTML = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 結果テーブルを更新する\r\n     * @param resultText タブ区切りのテキスト結果\r\n     */\r\n    private updateResultTable(resultText: string): void {\r\n        if (!resultText) return;\r\n\r\n        const tbody = this.resultTable.querySelector('tbody');\r\n        if (!tbody) return;\r\n\r\n        this.clearResultTable();\r\n\r\n        // テキストを行に分割\r\n        const lines = resultText.trim().split('\\n');\r\n\r\n        // ヘッダー行をスキップして2行目から処理\r\n        for (let i = 1; i < lines.length; i++) {\r\n            const columns = lines[i].split('\\t');\r\n\r\n            // 行が正しいフォーマットかチェック\r\n            if (columns.length >= 5) {\r\n                const row = document.createElement('tr');\r\n\r\n                // 各列のデータをセルに追加\r\n                for (let j = 0; j < 5; j++) {\r\n                    const cell = document.createElement('td');\r\n                    cell.textContent = columns[j];\r\n\r\n                    // 短手３対象症例の列に特別なスタイルを適用\r\n                    if (j === 3) {\r\n                        if (columns[j] === 'Yes') {\r\n                            cell.classList.add('eligible-yes');\r\n                        } else {\r\n                            cell.classList.add('eligible-no');\r\n                        }\r\n                    }\r\n\r\n                    row.appendChild(cell);\r\n                }\r\n\r\n                tbody.appendChild(row);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ダウンロードリンクを更新する\r\n     * @param resultText 結果テキスト\r\n     */\r\n    private updateDownloadLink(resultText: string): void {\r\n        const blob = new Blob([resultText], { type: 'text/plain' });\r\n        const url = URL.createObjectURL(blob);\r\n\r\n        // 既存のURLを解放\r\n        if (this.downloadLink.href) {\r\n            URL.revokeObjectURL(this.downloadLink.href);\r\n        }\r\n\r\n        // 新しいURLを設定\r\n        this.downloadLink.href = url;\r\n\r\n        // ファイル名の設定\r\n        const date = new Date();\r\n        const dateStr = `${date.getFullYear()}${(date.getMonth() + 1).toString().padStart(2, '0')}${date.getDate().toString().padStart(2, '0')}`;\r\n        this.downloadLink.setAttribute('download', `短手3判定結果_${dateStr}.txt`);\r\n\r\n        // ダウンロードリンクを表示\r\n        this.downloadLink.classList.remove('hidden');\r\n    }\r\n\r\n    /**\r\n     * 現在の表示モードを取得\r\n     * @returns 現在の表示モード\r\n     */\r\n    public getCurrentView(): 'text' | 'table' {\r\n        return this.currentView;\r\n    }\r\n\r\n    /**\r\n     * 表示用設定を取得\r\n     * @returns 出力設定\r\n     */\r\n    public getOutputSettings(): OutputSettings { // 戻り値の型を明示 (インポート元が修正されたため)\r\n        const eligibleOnlyRadio = document.getElementById('eligibleOnly') as HTMLInputElement;\r\n        const dateFormatRadios = document.querySelectorAll('input[name=\"dateFormat\"]') as NodeListOf<HTMLInputElement>;\r\n\r\n        // デフォルト値を小文字に修正し、型を明示\r\n        let dateFormat: 'yyyymmdd' | 'yyyy/mm/dd' = 'yyyymmdd';\r\n        for (const radio of Array.from(dateFormatRadios)) {\r\n            if (radio.checked) {\r\n                // radio.value が正しい型であることを確認 (必要であればアサーション)\r\n                dateFormat = radio.value as 'yyyymmdd' | 'yyyy/mm/dd';\r\n                break;\r\n            }\r\n        }\r\n\r\n        return {\r\n            outputMode: eligibleOnlyRadio?.checked ? 'eligibleOnly' : 'allCases',\r\n            dateFormat\r\n        };\r\n    }\r\n}\r\n\r\n// グローバルでアクセス可能なインスタンスを作成\r\nexport const resultViewer = new ResultViewer();\r\n","import { CaseData, OutputSettings } from './common/types'; // OutputSettings をインポート\r\nimport { readFileAsText } from './validator';\r\nimport { parseEFFile, mergeCases } from './common/parsers';\r\nimport { evaluateCases, formatResults } from './common/evaluator';\r\nimport { DEFAULT_RESULT_HEADER } from './common/constants'; // DEFAULT_RESULT_HEADER をインポート\r\n\r\n/**\r\n * ファイル処理クラス\r\n * EFファイルの読み込みと処理を行うユーティリティ\r\n */\r\nclass FileProcessor {\r\n    /**\r\n     * 複数のファイルを処理する\r\n * @param files 処理対象のファイル配列\r\n * @param settings 出力設定\r\n * @returns 処理結果のプロミス\r\n */\r\n    public async processFiles(files: File[], settings: OutputSettings): Promise<string> { // settings 引数を追加\r\n        try {\r\n            if (!files || files.length === 0) {\r\n                throw new Error('ファイルが選択されていません');\r\n            }\r\n\r\n            // ファイルの内容を読み込む\r\n            const fileContents: string[] = [];\r\n            for (const file of files) {\r\n                const content = await readFileAsText(file);\r\n                fileContents.push(content);\r\n            }\r\n\r\n            // ファイルの内容を解析して症例データを統合\r\n            let allCases: CaseData[] = [];\r\n            for (const content of fileContents) {\r\n                const cases = parseEFFile(content);\r\n                allCases = mergeCases(allCases, cases);\r\n            }\r\n\r\n            // 判定処理を実行\r\n            const evaluatedCases = evaluateCases(allCases);\r\n\r\n            // 結果をフォーマット\r\n            const result = formatResults(evaluatedCases, DEFAULT_RESULT_HEADER, settings); // settings を渡すように修正\r\n\r\n            return result;\r\n        } catch (error) {\r\n            console.error('ファイル処理エラー:', error);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n\r\n// グローバルでアクセス可能なインスタンスを作成\r\nexport const fileProcessor = new FileProcessor();\r\n","/**\r\n * 短期滞在手術等基本料３判定プログラム - パーサー関数\r\n * このファイルには、ファイル解析に関連する関数を含みます。\r\n */\r\n\r\nimport { CaseData, RawCaseData, ValidationResult } from './types';\r\nimport { TARGET_PROCEDURES } from './constants';\r\n\r\n/**\r\n * EFファイルの行からデータを抽出する共通関数\r\n * @param columns - データ列の配列\r\n * @returns 患者データ（対象手術の場合は完全、それ以外は基本情報のみ）またはnull（データが不十分な場合）\r\n */\r\nfunction extractCaseData(columns: string[]): (RawCaseData & { procedure: string; procedureName: string | null }) | ({ dataId: string; admission: string; discharge: string; procedure: null; procedureName: null }) | null {\r\n    // 少なくとも基本情報（ID, 入院日, 退院日）を含む列が必要\r\n    if (columns.length < 4) {\r\n        return null;\r\n    }\r\n\r\n    const dataId = columns[1].trim();\r\n    if (!dataId) {\r\n        return null;\r\n    }\r\n    const admission = columns[3].trim();\r\n    const discharge = columns[2].trim();\r\n\r\n    // 行為明細番号を取得 (列が存在する場合のみ)\r\n    const actionDetailNo = columns.length > 6 ? columns[6].trim() : null;\r\n\r\n    // 行為明細番号が\"000\"の行（Eファイル）は日付更新にも不要なためスキップ\r\n    if (actionDetailNo === '000') {\r\n        return null;\r\n    }\r\n\r\n    // 基本情報\r\n    const basicInfo = { dataId, admission, discharge };\r\n\r\n    // レセプト電算コードと診療明細名称を取得 (列が存在する場合のみ)\r\n    const procedure = columns.length > 8 ? columns[8].trim() : null;\r\n    const procedureName = columns.length > 10 ? columns[10].trim() : null;\r\n\r\n    // 短手3の対象手術かどうかを判定\r\n    if (!procedure || !TARGET_PROCEDURES.includes(procedure)) {\r\n        // 対象手術でなくても基本情報は返す（日付更新のため）\r\n        return { ...basicInfo, procedure: null, procedureName: null };\r\n    }\r\n\r\n    // 対象手術の場合、完全な情報を返す\r\n    // RawCaseData型にキャストして返す (procedureはstringであることが保証されている)\r\n    // procedureNameがnullの場合もデフォルト値を設定し、string型を保証\r\n    return {\r\n        ...basicInfo,\r\n        procedure: procedure, // procedure is guaranteed to be string here\r\n        procedureName: procedureName ?? '(名称なし)' // Ensure string type for RawCaseData compatibility\r\n    };\r\n}\r\n\r\n\r\n\r\n/**\r\n * 入院EF統合ファイルの内容をパースする関数\r\n * ファイルの内容を解析し、患者ごとのデータを抽出します\r\n * @param content - ファイルの内容\r\n * @returns 統合前の症例データ配列\r\n */\r\nexport function parseEFFile(content: string): CaseData[] {\r\n    const lines = content.split(/\\r?\\n/);\r\n    const caseMap: Record<string, CaseData> = {}; // 同一患者の情報を一時的に保持するためのマップ\r\n\r\n    // ヘッダー行を除いたデータ行を処理\r\n    for (let i = 1; i < lines.length; i++) {\r\n        const line = lines[i].trim();\r\n        if (!line) {\r\n            continue;\r\n        }\r\n\r\n        try {\r\n            const columns = line.split('\\t');\r\n            const extractedData = extractCaseData(columns);\r\n\r\n            if (extractedData) {\r\n                const { dataId, discharge, admission, procedure, procedureName } = extractedData;\r\n\r\n                // 既存の症例データを取得または新規作成\r\n                let currentCase = caseMap[dataId];\r\n                if (!currentCase) {\r\n                    currentCase = {\r\n                        id: dataId,\r\n                        admission: admission,\r\n                        discharge: discharge, // 初期値として設定\r\n                        procedures: [],\r\n                        procedureNames: []\r\n                    };\r\n                    caseMap[dataId] = currentCase;\r\n                }\r\n\r\n                // 退院日の更新 (00000000 でなく、既存より新しい日付の場合)\r\n                // 注意: 日付文字列の単純比較で良いか要確認。YYYYMMDD形式ならOK。\r\n                if (discharge && discharge !== '00000000' && (!currentCase.discharge || currentCase.discharge === '00000000' || discharge > currentCase.discharge)) {\r\n                    currentCase.discharge = discharge;\r\n                }\r\n                // 入院日も同様に更新が必要な場合があるかもしれないが、今回は退院日のみ考慮\r\n\r\n                // 対象手術コードと名称を追加（procedureがnullでない場合のみ）\r\n                if (procedure && !currentCase.procedures.includes(procedure)) {\r\n                    currentCase.procedures.push(procedure);\r\n                    // procedureName が null の場合も考慮して追加 (明示的なチェックを追加)\r\n                    if (currentCase.procedureNames) {\r\n                        currentCase.procedureNames.push(procedureName ?? '(名称なし)');\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            // エラーが発生しても処理を継続するが、ログは残さない\r\n            continue;\r\n        }\r\n    }\r\n\r\n    return Object.values(caseMap);\r\n}\r\n\r\n\r\n\r\n/**\r\n * 複数ファイルからの症例データを統合する関数\r\n * 同一IDの症例については、退院日が更新されている場合に差し替え、手術コードは統合します\r\n * @param existingCases - 既存の症例データ\r\n * @param newCases - 新しい症例データ\r\n * @returns 統合された症例データ\r\n */\r\nexport function mergeCases(existingCases: CaseData[], newCases: CaseData[]): CaseData[] {\r\n    const caseMap: Record<string, CaseData> = {};\r\n\r\n    // 既存のケースをマップに追加\r\n    for (const c of existingCases) {\r\n        caseMap[c.id] = {\r\n            ...c,\r\n            procedures: Array.isArray(c.procedures) ? [...c.procedures] : [],\r\n            procedureNames: Array.isArray(c.procedureNames) ? [...c.procedureNames] : []\r\n        };\r\n    }\r\n\r\n    // 新しいケースをマージ\r\n    for (const c of newCases) {\r\n        if (caseMap[c.id]) {\r\n            const currentCase = caseMap[c.id];\r\n\r\n            // 退院日が確定した場合（00000000 から具体的な日付に変わった場合）\r\n            if (c.discharge !== '00000000') {\r\n                currentCase.discharge = c.discharge;\r\n            }\r\n\r\n            // procedures と procedureNames の初期化を確実に行う\r\n            if (!Array.isArray(currentCase.procedures)) {\r\n                currentCase.procedures = [];\r\n            }\r\n            if (!Array.isArray(currentCase.procedureNames)) {\r\n                currentCase.procedureNames = [];\r\n            }\r\n\r\n            // 新しい手術コードを追加（重複を避ける）\r\n            const procedures = Array.isArray(c.procedures) ? c.procedures : [];\r\n            const procedureNames = Array.isArray(c.procedureNames) ? c.procedureNames : [];\r\n\r\n            for (let i = 0; i < procedures.length; i++) {\r\n                const proc = procedures[i];\r\n                if (!currentCase.procedures.includes(proc)) {\r\n                    currentCase.procedures.push(proc);\r\n\r\n                    // 対応する手術名も追加（存在する場合）\r\n                    if (procedureNames[i]) {\r\n                        currentCase.procedureNames.push(procedureNames[i]);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            // 新しい症例を追加\r\n            caseMap[c.id] = {\r\n                ...c,\r\n                procedures: Array.isArray(c.procedures) ? [...c.procedures] : [],\r\n                procedureNames: Array.isArray(c.procedureNames) ? [...c.procedureNames] : []\r\n            };\r\n        }\r\n    }\r\n\r\n    return Object.values(caseMap);\r\n}\r\n\r\n/**\r\n * 入院統合EFファイルのフォーマットを検証する関数\r\n * @param content - ファイルの内容\r\n * @returns 検証結果オブジェクト\r\n */\r\nexport function validateEFFile(content: string): ValidationResult {\r\n    const result: ValidationResult = {\r\n        isValid: true,\r\n        errors: [],\r\n        warnings: []\r\n    };\r\n\r\n    if (!content || content.trim() === '') {\r\n        result.isValid = false;\r\n        result.errors.push('ファイルが空です。');\r\n        return result;\r\n    }\r\n\r\n    const lines = content.split(/\\r?\\n/);\r\n    if (lines.length < 2) {\r\n        result.isValid = false;\r\n        result.errors.push('ファイルに少なくともヘッダー行とデータ行が含まれていません。');\r\n    }\r\n\r\n    return result;\r\n}\r\n","/**\r\n * デフォルトの結果ヘッダー行\r\n */\r\nexport const DEFAULT_RESULT_HEADER = \"データ識別番号\\t入院年月日\\t退院年月日\\t短手３対象症例\\t理由\";\r\n\r\n/**\r\n * 内視鏡的大腸ポリープ・粘膜切除術の診療行為コード\r\n */\r\nexport const COLONOSCOPY_PROCEDURE_CODE_SMALL = \"150285010\"; // 長径２センチメートル未満\r\nexport const COLONOSCOPY_PROCEDURE_CODE_LARGE = \"150183410\"; // 長径２センチメートル以上\r\nexport const COLONOSCOPY_PROCEDURE_CODES: string[] = [COLONOSCOPY_PROCEDURE_CODE_SMALL, COLONOSCOPY_PROCEDURE_CODE_LARGE]; // 小・大の両方のコードをまとめた配列\r\n\r\n/**\r\n * 対象手術等のコード一覧\r\n * 短期滞在手術等基本料３の対象となる診療行為コードのリスト\r\n */\r\nexport const TARGET_PROCEDURES: string[] = [\r\n    \"160218510\", \"160218610\", \"160183110\", \"160119710\", \"160180410\",\r\n    \"160098110\", \"150351910\", \"150011310\", \"150294810\", \"150020810\",\r\n    \"150021010\", \"150021210\", \"150041010\", \"150314110\", \"150273810\",\r\n    \"150355810\", \"150355910\", \"150078810\", \"150079010\", \"150080210\",\r\n    \"150083410\", \"150083510\", \"150344510\", \"150395150\", \"150253010\",\r\n    \"150315610\", \"150096010\", \"150097710\", \"150315910\", \"150316010\",\r\n    \"150106850\", \"150299450\", \"150121110\", \"150121210\", \"150416610\",\r\n    \"150416710\", \"150154010\", \"150263410\", \"150296510\", \"150154150\",\r\n    \"150360910\", \"150411150\", \"150159010\", \"150263610\", \"150285010\",\r\n    \"150183410\", \"150325410\", \"150190310\", \"150190410\", \"150194510\",\r\n    \"150421110\", \"150404310\", \"150216510\", \"150421310\", \"150421410\",\r\n    \"150421510\", \"150421610\", \"150421710\", \"150421810\", \"150366110\",\r\n    \"180018910\"\r\n];\r\n\r\n/**\r\n * 対象手術等のコードと名称のマッピング\r\n * 短期滞在手術等基本料３の対象となる診療行為コードとその名称のマッピング\r\n */\r\nexport const PROCEDURE_NAME_MAP: Record<string, string> = {\r\n    \"160218510\": \"終夜睡眠ポリグラフィー（１及び２以外の場合）（安全精度管理下で行うもの）\",\r\n    \"160218610\": \"終夜睡眠ポリグラフィー（１及び２以外の場合）（その他のもの）\",\r\n    \"160183110\": \"反復睡眠潜時試験（ＭＳＬＴ）\",\r\n    \"160119710\": \"下垂体前葉負荷試験成長ホルモン（ＧＨ）（一連として）\",\r\n    \"160180410\": \"小児食物アレルギー負荷検査\",\r\n    \"160098110\": \"前立腺針生検法（その他のもの）\",\r\n    \"150351910\": \"経皮的放射線治療用金属マーカー留置術\",\r\n    \"150011310\": \"四肢・躯幹軟部腫瘍摘出術（手）\",\r\n    \"150294810\": \"骨折観血的手術（手舟状骨）\",\r\n    \"150020810\": \"骨内異物（挿入物を含む。）除去術（前腕）\",\r\n    \"150021010\": \"骨内異物（挿入物を含む。）除去術（鎖骨）\",\r\n    \"150021210\": \"骨内異物（挿入物を含む。）除去術（手）\",\r\n    \"150041010\": \"ガングリオン摘出術（手）\",\r\n    \"150314110\": \"関節鏡下手根管開放手術\",\r\n    \"150273810\": \"胸腔鏡下交感神経節切除術（両側）\",\r\n    \"150355810\": \"涙管チューブ挿入術（涙道内視鏡を用いるもの）\",\r\n    \"150355910\": \"眼瞼内反症手術（皮膚切開法）\",\r\n    \"150078810\": \"眼瞼下垂症手術（眼瞼挙筋前転法）\",\r\n    \"150079010\": \"眼瞼下垂症手術（その他のもの）\",\r\n    \"150080210\": \"翼状片手術（弁の移植を要するもの）\",\r\n    \"150083410\": \"斜視手術（後転法）\",\r\n    \"150083510\": \"斜視手術（前転法及び後転法の併施）\",\r\n    \"150344510\": \"治療的角膜切除術（エキシマレーザーによるもの（角膜ジストロフィー又は帯状角膜変性に係るものに限る。））\",\r\n    \"150395150\": \"緑内障手術（水晶体再建術併用眼内ドレーン挿入術）\",\r\n    \"150253010\": \"水晶体再建術（眼内レンズを挿入する場合）（その他のもの）\",\r\n    \"150315610\": \"水晶体再建術（眼内レンズを挿入しない場合）\",\r\n    \"150096010\": \"鼓膜形成手術\",\r\n    \"150097710\": \"鼻骨骨折整復固定術\",\r\n    \"150315910\": \"声帯ポリープ切除術（ファイバースコープによるもの）\",\r\n    \"150316010\": \"声帯ポリープ切除術（直達喉頭鏡によるもの）\",\r\n    \"150106850\": \"喉頭ポリープ切除術（直達喉頭鏡によるもの）\",\r\n    \"150299450\": \"喉頭ポリープ切除術（ファイバースコープによるもの）\",\r\n    \"150121110\": \"乳腺腫瘍摘出術（長径５センチメートル未満）\",\r\n    \"150121210\": \"乳腺腫瘍摘出術（長径５センチメートル以上）\",\r\n    \"150416610\": \"経皮的シャント拡張術・血栓除去術（初回）\",\r\n    \"150416710\": \"経皮的シャント拡張術・血栓除去術（１の実施後３月以内に実施する場合）\",\r\n    \"150154010\": \"下肢静脈瘤手術（抜去切除術）\",\r\n    \"150263410\": \"下肢静脈瘤手術（硬化療法（一連として））\",\r\n    \"150296510\": \"下肢静脈瘤手術（高位結紮術）\",\r\n    \"150154150\": \"大伏在静脈抜去術\",\r\n    \"150360910\": \"下肢静脈瘤血管内焼灼術\",\r\n    \"150411150\": \"下肢静脈瘤血管内塞栓術\",\r\n    \"150159010\": \"ヘルニア手術（鼠径ヘルニア）\",\r\n    \"150263610\": \"腹腔鏡下鼠径ヘルニア手術（両側）\",\r\n    \"150285010\": \"内視鏡的大腸ポリープ・粘膜切除術（長径２センチメートル未満）\",\r\n    \"150183410\": \"内視鏡的大腸ポリープ・粘膜切除術（長径２センチメートル以上）\",\r\n    \"150325410\": \"痔核手術（脱肛を含む。）（硬化療法（四段階注射法によるもの））\",\r\n    \"150190310\": \"肛門ポリープ切除術\",\r\n    \"150190410\": \"肛門尖圭コンジローム切除術\",\r\n    \"150194510\": \"体外衝撃波腎・尿管結石破砕術（一連につき）\",\r\n    \"150421110\": \"尿失禁手術（ボツリヌス毒素によるもの）\",\r\n    \"150404310\": \"顕微鏡下精索静脈瘤手術\",\r\n    \"150216510\": \"子宮頸部（腟部）切除術\",\r\n    \"150421310\": \"子宮鏡下有茎粘膜下筋腫切出術（電解質溶液利用のもの）\",\r\n    \"150421410\": \"子宮内膜ポリープ切除術（電解質溶液利用のもの）\",\r\n    \"150421510\": \"子宮鏡下有茎粘膜下筋腫切出術（その他のもの）\",\r\n    \"150421610\": \"子宮内膜ポリープ切除術（その他のもの）\",\r\n    \"150421710\": \"子宮鏡下子宮筋腫摘出術（電解質溶液利用のもの）\",\r\n    \"150421810\": \"子宮鏡下子宮筋腫摘出術（その他のもの）\",\r\n    \"150366110\": \"腹腔鏡下卵管形成術\",\r\n    \"180018910\": \"ガンマナイフによる定位放射線治療\"\r\n};\r\n\r\n/**\r\n * 内視鏡的大腸ポリープ・粘膜切除術の特定加算コード\r\n */\r\nexport const COLONOSCOPY_SPECIAL_ADDITIONS: string[] = [\"150429570\", \"150437170\"];\r\n\r\n/**\r\n * 入院期間の最大日数（短期滞在手術等基本料３の条件）\r\n */\r\nexport const MAX_HOSPITAL_DAYS = 5;\r\n\r\n/**\r\n * 非該当理由のメッセージ定数\r\n */\r\nexport const INELIGIBILITY_REASONS = {\r\n    UNDISCHARGED: \"退院日未確定\",\r\n    NO_TARGET_PROCEDURE: \"対象手術等なし\",\r\n    HOSPITAL_DAYS_EXCEEDED: \"入院期間が６日以上\",\r\n    MULTIPLE_TARGET_PROCEDURES: \"対象手術等を２以上実施\",\r\n    OTHER_SURGERY: \"対象手術等以外の手術あり\",\r\n    SPECIAL_ADDITION: \"内視鏡的大腸ポリープ術に特定加算あり\"\r\n};\r\n","/**\r\n * 短期滞在手術等基本料３判定プログラム - 評価ロジック\r\n * このファイルには、短手３該当症例の判定などの評価ロジックを含みます。\r\n */\r\n\r\nimport { CaseData, OutputSettings } from './types';\r\nimport { calculateHospitalDays, formatDate } from './utils'; // formatDate をインポート\r\nimport {\r\n    TARGET_PROCEDURES,\r\n    COLONOSCOPY_SPECIAL_ADDITIONS,\r\n    DEFAULT_RESULT_HEADER,\r\n    MAX_HOSPITAL_DAYS,\r\n    COLONOSCOPY_PROCEDURE_CODES,\r\n    PROCEDURE_NAME_MAP,\r\n    INELIGIBILITY_REASONS\r\n} from './constants';\r\n\r\n/**\r\n * 短手３該当症例を判定する関数\r\n * 各症例が短期滞在手術等基本料３の条件に該当するかを判定します\r\n * @param cases - 判定対象の症例データ\r\n * @returns 短手３に該当する症例データ（ID昇順でソート済み）\r\n */\r\nexport function evaluateCases(cases: CaseData[]): CaseData[] {\r\n    // 全症例に対して適格性と理由を設定\r\n    const evaluatedCases = cases.map(c => {\r\n        try {\r\n            // 評価結果を格納するオブジェクトを作成（元のオブジェクトをコピー）\r\n            const evaluatedCase = { ...c };\r\n\r\n            // 1. 退院日が '00000000' でない（退院が確定している）\r\n            if (!c.discharge || c.discharge === '00000000') {\r\n                evaluatedCase.isEligible = false;\r\n                evaluatedCase.reason = INELIGIBILITY_REASONS.UNDISCHARGED;\r\n                return evaluatedCase;\r\n            }\r\n\r\n            // 2. 対象手術等の実施（少なくとも1つの対象手術等が実施されている）\r\n            const targetProceduresFound = c.procedures.filter(p => TARGET_PROCEDURES.includes(p));\r\n\r\n            if (targetProceduresFound.length === 0) {\r\n                evaluatedCase.isEligible = false;\r\n                evaluatedCase.reason = INELIGIBILITY_REASONS.NO_TARGET_PROCEDURE;\r\n                return evaluatedCase;\r\n            }\r\n\r\n            // 3. 入院期間が5日以内\r\n            const hospitalDays = calculateHospitalDays(c.admission, c.discharge);\r\n\r\n            if (hospitalDays === null || hospitalDays > MAX_HOSPITAL_DAYS) {\r\n                evaluatedCase.isEligible = false;\r\n                evaluatedCase.reason = INELIGIBILITY_REASONS.HOSPITAL_DAYS_EXCEEDED;\r\n                return evaluatedCase;\r\n            }\r\n\r\n            // 4. 入院期間中に対象手術等を2以上実施していないかチェック\r\n            // ただし、同一の対象手術等を複数回実施する場合は例外とする\r\n            if (targetProceduresFound.length > 1) {\r\n                // 対象手術等の種類数をカウント（重複を除外）\r\n                const uniqueTargetProcedures = new Set(targetProceduresFound);\r\n                if (uniqueTargetProcedures.size > 1) {\r\n                    evaluatedCase.isEligible = false;\r\n                    evaluatedCase.reason = INELIGIBILITY_REASONS.MULTIPLE_TARGET_PROCEDURES;\r\n                    return evaluatedCase;\r\n                }\r\n            }\r\n\r\n            // 5. 入院期間中に対象手術等に加えて、他の手術を実施していないかチェック\r\n            // 手術コードは通常 '15' で始まるが、診療明細名称に「加算」が含まれるコードは手術ではないため除外\r\n            const surgeryProcedures = c.procedures.filter((p, index) => {\r\n                // 対象手術等に含まれるコードは除外\r\n                if (TARGET_PROCEDURES.includes(p)) return false;\r\n\r\n                // '15'で始まるコードのみを対象\r\n                if (!p.startsWith('15')) return false;\r\n\r\n                // 診療明細名称に「加算」が含まれるコードは手術ではないため除外\r\n                if (c.procedureNames && c.procedureNames[index] && c.procedureNames[index].includes('加算')) {\r\n                    return false;\r\n                }\r\n\r\n                // 加算コードは通常、特定のパターンを持つ（例：150000490）\r\n                // 多くの加算コードは '1500' で始まり、その後に '00' が続く\r\n                if (p.startsWith('1500') && p.substring(4, 6) === '00') return false;\r\n\r\n                return true;\r\n            });\r\n\r\n            if (surgeryProcedures.length > 0) {\r\n                evaluatedCase.isEligible = false;\r\n                evaluatedCase.reason = INELIGIBILITY_REASONS.OTHER_SURGERY;\r\n                return evaluatedCase;\r\n            }\r\n\r\n            // 6. 内視鏡的大腸ポリープ・粘膜切除術の特定加算チェック\r\n            // 内視鏡的大腸ポリープ・粘膜切除術を実施したかどうか\r\n            const hasColonoscopy = c.procedures.some(p => COLONOSCOPY_PROCEDURE_CODES.includes(p));\r\n\r\n            // 特定加算が含まれているかどうか\r\n            const hasSpecialAddition = c.procedures.some(p => COLONOSCOPY_SPECIAL_ADDITIONS.includes(p));\r\n\r\n            // 内視鏡的大腸ポリープ術に特定加算がある場合は対象外\r\n            if (hasColonoscopy && hasSpecialAddition) {\r\n                evaluatedCase.isEligible = false;\r\n                evaluatedCase.reason = INELIGIBILITY_REASONS.SPECIAL_ADDITION;\r\n                return evaluatedCase;\r\n            }\r\n\r\n            // すべての条件を満たす場合は短手３対象症例\r\n            evaluatedCase.isEligible = true;\r\n\r\n            // 実施された対象手術の名称を理由として設定\r\n            const procedureCode = targetProceduresFound[0]; // 最初の対象手術コード\r\n            evaluatedCase.reason = PROCEDURE_NAME_MAP[procedureCode] || \"対象手術等\";\r\n\r\n            return evaluatedCase;\r\n        } catch (error) {\r\n            console.error(`症例 ${c.id} の評価中にエラーが発生しました: ${error instanceof Error ? error.message : String(error)}`);\r\n            // エラーが発生した場合は該当しないと判断\r\n            return {\r\n                ...c,\r\n                isEligible: false,\r\n                reason: `評価エラー: ${error instanceof Error ? error.message : String(error)}`\r\n            };\r\n        }\r\n    });\r\n\r\n    // 修正: フィルタリングせず、全ての評価済み症例を返す\r\n    // フィルタリングは formatResults で行う\r\n    // ID順にソート\r\n    return evaluatedCases.sort((a, b) => a.id.localeCompare(b.id));\r\n}\r\n\r\n/**\r\n * 結果をフォーマットする関数\r\n * 判定結果をタブ区切りテキスト形式でフォーマットします\r\n * @param cases - フォーマットする症例データ\r\n * @param headerLine - 出力ヘッダー行（デフォルト: DEFAULT_RESULT_HEADER）\r\n * @param settings - 出力設定（outputMode と dateFormat を含む）\r\n * @returns フォーマットされた結果テキスト\r\n */\r\nexport function formatResults(\r\n    cases: CaseData[],\r\n    headerLine: string = DEFAULT_RESULT_HEADER,\r\n    settings: OutputSettings // デフォルト値を削除し、必須引数とする\r\n): string {\r\n    // 設定に基づいて出力する症例をフィルタリング\r\n    const filteredCases = settings.outputMode === 'allCases'\r\n        ? cases\r\n        : cases.filter(c => c.isEligible === true);\r\n\r\n    // 症例が存在しない場合\r\n    if (filteredCases.length === 0) {\r\n        return \"該当する症例はありません。\";\r\n    }\r\n\r\n    // ヘッダー行を配列の最初の要素として追加\r\n    const lines = [headerLine];\r\n\r\n    // 各症例のデータ行を追加\r\n    filteredCases.forEach(c => {\r\n        // 日付を指定されたフォーマットに変換\r\n        const admissionDate = formatDate(c.admission, settings.dateFormat);\r\n        const dischargeDate = formatDate(c.discharge, settings.dateFormat);\r\n\r\n        const line = `${c.id}\\t${admissionDate}\\t${dischargeDate}\\t${c.isEligible ? 'Yes' : 'No'}\\t${c.reason || ''}`;\r\n        lines.push(line);\r\n    });\r\n\r\n    // 行を改行文字で結合して返す\r\n    return lines.join('\\n');\r\n}\r\n","/**\r\n * 短期滞在手術等基本料３判定プログラム - ユーティリティ関数\r\n * このファイルには、アプリケーション全体で使用される汎用的な関数を含みます。\r\n */\r\n\r\n/**\r\n * 日付文字列（yyyymmdd）をDateオブジェクトに変換する関数\r\n * @param dateStr - 変換する日付文字列（yyyymmdd形式）\r\n * @returns Dateオブジェクトまたはnull（無効な日付の場合）\r\n */\r\nexport function parseDate(dateStr: string): Date | null {\r\n    if (!dateStr || dateStr === '00000000') return null;\r\n\r\n    try {\r\n        const year = parseInt(dateStr.substring(0, 4), 10);\r\n        const month = parseInt(dateStr.substring(4, 6), 10) - 1; // 月は0から始まる\r\n        const day = parseInt(dateStr.substring(6, 8), 10);\r\n\r\n        const date = new Date(year, month, day);\r\n\r\n        // 有効な日付かチェック\r\n        if (isNaN(date.getTime())) return null;\r\n\r\n        return date;\r\n    } catch (error) {\r\n        console.error(`日付の解析中にエラーが発生しました: ${dateStr} - ${error instanceof Error ? error.message : String(error)}`);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * 入院期間（日数）を計算する関数\r\n * @param admissionStr - 入院日（yyyymmdd形式）\r\n * @param dischargeStr - 退院日（yyyymmdd形式）\r\n * @returns 入院日数または null（日付が無効な場合）\r\n */\r\nexport function calculateHospitalDays(admissionStr: string, dischargeStr: string): number | null {\r\n    const admissionDate = parseDate(admissionStr);\r\n    const dischargeDate = parseDate(dischargeStr);\r\n\r\n    if (!admissionDate || !dischargeDate) return null;\r\n\r\n    // ミリ秒数を日数に変換（1日 = 24 * 60 * 60 * 1000 ミリ秒）\r\n    // 入院日と退院日も期間に含めるため、計算結果に1を加える\r\n    const diffDays = Math.round((dischargeDate.getTime() - admissionDate.getTime()) / (1000 * 60 * 60 * 24));\r\n    return diffDays + 1;\r\n}\r\n\r\n/**\r\n * 日付文字列のフォーマットを変換する関数\r\n * @param dateStr - 変換する日付文字列（yyyymmdd形式）\r\n * @param format - 出力フォーマット（'yyyymmdd'または'yyyy/mm/dd'）\r\n * @returns フォーマットされた日付文字列、または元の文字列（無効な日付の場合）\r\n */\r\nexport function formatDate(dateStr: string, format: 'yyyymmdd' | 'yyyy/mm/dd' = 'yyyymmdd'): string {\r\n    // 00000000の場合はそのまま返す\r\n    if (dateStr === '00000000') return dateStr;\r\n\r\n    // 日付オブジェクトに変換\r\n    const date = parseDate(dateStr);\r\n    if (!date) return dateStr; // 変換できない場合は元の文字列を返す\r\n\r\n    // 年、月、日を取得\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth() + 1; // 月は0から始まるので+1\r\n    const day = date.getDate();\r\n\r\n    // 指定されたフォーマットに変換\r\n    if (format === 'yyyy/mm/dd') {\r\n        return `${year}/${month.toString().padStart(2, '0')}/${day.toString().padStart(2, '0')}`;\r\n    } else {\r\n        return `${year}${month.toString().padStart(2, '0')}${day.toString().padStart(2, '0')}`;\r\n    }\r\n}\r\n\r\n/**\r\n * エラーオブジェクトからメッセージを取得するヘルパー関数\r\n * @param error - エラーオブジェクトまたは任意の値\r\n * @returns エラーメッセージ文字列\r\n */\r\nexport function getErrorMessage(error: unknown): string {\r\n    if (error instanceof Error) return error.message;\r\n    return String(error);\r\n}\r\n"],"names":["$c338b0f983d437f5$export$6af13b7de7554010","constructor","containerId","activeToasts","toastHistory","MAX_VISIBLE_TOASTS","MAX_HISTORY_ITEMS","handleHistoryEscKey","e","key","closeNotificationHistory","toastContainer","document","getElementById","createToastContainer","setupHistoryButton","container","createElement","id","className","body","appendChild","historyButton","setAttribute","innerHTML","addEventListener","showNotificationHistory","showToast","type","title","message","duration","priority","timestamp","Date","now","toastData","addToastToHistory","push","sort","a","b","manageActiveToasts","renderToast","unshift","length","slice","updateHistoryButton","classList","remove","toString","visibleToasts","hiddenToasts","forEach","toast","element","removeToastElement","highestPriorityType","getHighestPriorityType","showAggregateToast","toasts","typePriority","highestType","count","aggregateToastId","existingAggregate","parentNode","removeChild","icon","viewAllButton","querySelector","existingModal","modal","historyItems","item","timeString","date","toLocaleTimeString","setTimeout","add","closeButtons","querySelectorAll","button","clearButton","clearNotificationHistory","target","removeEventListener","closeButton","removeToast","toastId","filter","style","opacity","transform","showRecoveryToast","action","recoveryToastId","label","actionButton","handler","$7a1670790cbbe4b0$export$34b1c1ed5dd6d491","files","Error","validationResults","file","content","$7a1670790cbbe4b0$export$7dc2912951b09f","result","$7a1670790cbbe4b0$export$99273a4de8ff332c","isValid","warnings","errors","trim","lines","split","line","headerLine","includes","sampleSize","Math","min","tabWarningIssued","columnCountWarningIssued","actionDetailNumWarningIssued","i","undefined","columns","admission","dateRegex","test","some","startsWith","actionDetailNum","actionDetailRegex","error","name","endsWith","Promise","resolve","reject","reader","FileReader","onload","event","onerror","readAsText","$e3e22f6c17ed805e$export$a5245c9b2355d1f8","selectedFiles","validFiles","fileInput","fileInfoArea","executeButton","dropArea","setupEventListeners","fileSelectButton","preventDefault","stopPropagation","click","processNewFiles","Array","from","dataTransfer","tagName","clearFiles","textFiles","handleError","existingFileNames","map","f","newFiles","duplicateCount","updateFileInfo","recoveryAction","validateSelectedFiles","value","CustomEvent","dispatchEvent","results","updateValidationUI","disabled","html","fileStatus","status","messages","find","r","msg","text","statusClass","statusText","context","options","console","solution","fullMessage","updateUI","getSelectedFiles","getValidFileCount","$e3e22f6c17ed805e$var$fileManagerInstance","$e3e22f6c17ed805e$export$d45d33c808f51185","instance","$e3e22f6c17ed805e$export$5ffab0dbdf79647e","readyState","$d5176f4c1bfaf4b6$export$22c4203689daa739","currentView","resultTextarea","resultTable","textViewButton","tableViewButton","textResultView","tableResultView","copyButton","copyMessage","downloadLink","setResultView","copyResultToClipboard","viewMode","display","textToCopy","navigator","clipboard","writeText","textContent","err","displayResult","resultText","debugInfo","displayText","updateResultTable","resultContainer","updateDownloadLink","clearResultTable","tbody","row","j","cell","blob","Blob","url","URL","createObjectURL","href","revokeObjectURL","dateStr","getFullYear","getMonth","padStart","getDate","getCurrentView","getOutputSettings","eligibleOnlyRadio","dateFormatRadios","dateFormat","radio","checked","outputMode","$952cec8ced8a46bd$export$4100e9622577bf55","$952cec8ced8a46bd$export$9abababf870cce56","$952cec8ced8a46bd$export$bc8c9440750cf9cc","$952cec8ced8a46bd$export$861aae5ae66b2524","$952cec8ced8a46bd$export$c2dd158f3483965f","$952cec8ced8a46bd$export$b875acc5e1c1d7cd","UNDISCHARGED","NO_TARGET_PROCEDURE","HOSPITAL_DAYS_EXCEEDED","MULTIPLE_TARGET_PROCEDURES","OTHER_SURGERY","SPECIAL_ADDITION","$f9424a7ebcc0e1f6$export$6b862160d295c8e","year","parseInt","substring","month","day","isNaN","getTime","String","$f9424a7ebcc0e1f6$export$3ae94a2503e890a1","format","$8acc7c30e37a5f1a$export$62de47a40c7b42b0","processFiles","settings","fileContents","allCases","cases","caseMap","extractedData","$d4b1decbb56d16ba$var$extractCaseData","dataId","discharge","actionDetailNo","basicInfo","procedure","procedureName","currentCase","procedures","procedureNames","Object","values","existingCases","newCases","c","isArray","proc","evaluatedCases","evaluatedCase","isEligible","reason","targetProceduresFound","p","hospitalDays","admissionStr","dischargeStr","admissionDate","dischargeDate","diffDays","round","uniqueTargetProcedures","Set","size","surgeryProcedures","index","hasColonoscopy","hasSpecialAddition","localeCompare","filteredCases","join","$157295337300d7f0$var$Application","init","loadingIndicator","fileManagerInstance","outputSettings","app","errorDiv","prepend"],"version":3,"file":"main.js.map"}